
test_sem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009728  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bac  08009bac  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bb4  08009bb4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004438  2000007c  08009c38  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044b4  08009c38  000244b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a498  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003de9  00000000  00000000  0003a587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003e370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001195  00000000  00000000  0003f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001971d  00000000  00000000  00040b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bcbd  00000000  00000000  0005a2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a288  00000000  00000000  00075f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006700  00000000  00000000  001101f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  001168f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080098b0 	.word	0x080098b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080098b0 	.word	0x080098b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <LCD_init>:

#include "I2C_LCD.h"



void LCD_init() {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    HAL_Delay(15);
 8000d6c:	200f      	movs	r0, #15
 8000d6e:	f001 fd47 	bl	8002800 <HAL_Delay>
    LCD_send_cmd(0x30);
 8000d72:	2030      	movs	r0, #48	; 0x30
 8000d74:	f000 f854 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(5);
 8000d78:	2005      	movs	r0, #5
 8000d7a:	f001 fd41 	bl	8002800 <HAL_Delay>
    LCD_send_cmd(0x30);
 8000d7e:	2030      	movs	r0, #48	; 0x30
 8000d80:	f000 f84e 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f001 fd3b 	bl	8002800 <HAL_Delay>
    LCD_send_cmd(0x30);
 8000d8a:	2030      	movs	r0, #48	; 0x30
 8000d8c:	f000 f848 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000d90:	200a      	movs	r0, #10
 8000d92:	f001 fd35 	bl	8002800 <HAL_Delay>
    LCD_send_cmd(0x20);
 8000d96:	2020      	movs	r0, #32
 8000d98:	f000 f842 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f001 fd2f 	bl	8002800 <HAL_Delay>

    LCD_send_cmd(0x28);
 8000da2:	2028      	movs	r0, #40	; 0x28
 8000da4:	f000 f83c 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000da8:	200a      	movs	r0, #10
 8000daa:	f001 fd29 	bl	8002800 <HAL_Delay>
    LCD_send_cmd(0x08);
 8000dae:	2008      	movs	r0, #8
 8000db0:	f000 f836 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000db4:	200a      	movs	r0, #10
 8000db6:	f001 fd23 	bl	8002800 <HAL_Delay>
    LCD_send_cmd(0x01);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 f830 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000dc0:	200a      	movs	r0, #10
 8000dc2:	f001 fd1d 	bl	8002800 <HAL_Delay>
    LCD_send_cmd(0x0c);
 8000dc6:	200c      	movs	r0, #12
 8000dc8:	f000 f82a 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f001 fd17 	bl	8002800 <HAL_Delay>
    LCD_send_cmd(0x06);
 8000dd2:	2006      	movs	r0, #6
 8000dd4:	f000 f824 	bl	8000e20 <LCD_send_cmd>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <LCD_put_cursor>:
    LCD_send_cmd(0x08);
    for (int8_t i = 0; i < 70; i++) {
        LCD_send_data('\0');
    }
}
void LCD_put_cursor(uint8_t row, uint8_t col) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	4613      	mov	r3, r2
 8000dea:	71bb      	strb	r3, [r7, #6]
    if (row == 0) {
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d104      	bne.n	8000dfc <LCD_put_cursor+0x20>
        col |= 0x80;
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000df8:	71bb      	strb	r3, [r7, #6]
 8000dfa:	e006      	b.n	8000e0a <LCD_put_cursor+0x2e>
    }
    else if (row == 1) {
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d103      	bne.n	8000e0a <LCD_put_cursor+0x2e>
        col |= 0xc0;
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e08:	71bb      	strb	r3, [r7, #6]
    }

    HAL_Delay(10);
 8000e0a:	200a      	movs	r0, #10
 8000e0c:	f001 fcf8 	bl	8002800 <HAL_Delay>
    LCD_send_cmd(col);
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f804 	bl	8000e20 <LCD_send_cmd>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LCD_send_cmd>:

void LCD_send_cmd(uint8_t cmd) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd_t[4];
    uint8_t cmd_h, cmd_l;

    cmd_h = cmd & 0xf0;
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f023 030f 	bic.w	r3, r3, #15
 8000e30:	73fb      	strb	r3, [r7, #15]
    cmd_l = cmd << 4 & 0xf0;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	73bb      	strb	r3, [r7, #14]

    cmd_t[0] = cmd_h | 0x0c;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	f043 030c 	orr.w	r3, r3, #12
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	723b      	strb	r3, [r7, #8]
    cmd_t[1] = cmd_h | 0x08;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	727b      	strb	r3, [r7, #9]
    cmd_t[2] = cmd_l | 0x0c;
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	f043 030c 	orr.w	r3, r3, #12
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	72bb      	strb	r3, [r7, #10]
    cmd_t[3] = cmd_l | 0x08;
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, cmd_t, sizeof(cmd_t), 4);
 8000e60:	f107 0208 	add.w	r2, r7, #8
 8000e64:	2304      	movs	r3, #4
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2304      	movs	r3, #4
 8000e6a:	214e      	movs	r1, #78	; 0x4e
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <LCD_send_cmd+0x5c>)
 8000e6e:	f002 f941 	bl	80030f4 <HAL_I2C_Master_Transmit>
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000454 	.word	0x20000454

08000e80 <LCD_send_data>:
void LCD_send_data(char data) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
    uint8_t data_t[4];
    uint8_t data_h, data_l;

    data_h = data & 0xf0;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f023 030f 	bic.w	r3, r3, #15
 8000e90:	73fb      	strb	r3, [r7, #15]
    data_l = data << 4 & 0xf0;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_h | 0x0d;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f043 030d 	orr.w	r3, r3, #13
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_h | 0x09;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	f043 0309 	orr.w	r3, r3, #9
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0d;
 8000eac:	7bbb      	ldrb	r3, [r7, #14]
 8000eae:	f043 030d 	orr.w	r3, r3, #13
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	f043 0309 	orr.w	r3, r3, #9
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, data_t, sizeof(data_t), 4);
 8000ec0:	f107 0208 	add.w	r2, r7, #8
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2304      	movs	r3, #4
 8000eca:	214e      	movs	r1, #78	; 0x4e
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <LCD_send_data+0x5c>)
 8000ece:	f002 f911 	bl	80030f4 <HAL_I2C_Master_Transmit>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000454 	.word	0x20000454

08000ee0 <LCD_send_str>:
void LCD_send_str(char *str) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000ee8:	e006      	b.n	8000ef8 <LCD_send_str+0x18>
        LCD_send_data(*str++);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ffc4 	bl	8000e80 <LCD_send_data>
    while (*str) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f4      	bne.n	8000eea <LCD_send_str+0xa>
    }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <initialize>:
osSemaphoreId hBinarySemHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void initialize(void) // All Variables Initializing Func
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Left UltraSonic initialize
 8000f10:	2100      	movs	r1, #0
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <initialize+0x38>)
 8000f14:	f003 fae8 	bl	80044e8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3); // Right UltraSonic initialize
 8000f18:	2108      	movs	r1, #8
 8000f1a:	480a      	ldr	r0, [pc, #40]	; (8000f44 <initialize+0x38>)
 8000f1c:	f003 fae4 	bl	80044e8 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	// Left ServoMotor initialize
 8000f20:	2100      	movs	r1, #0
 8000f22:	4809      	ldr	r0, [pc, #36]	; (8000f48 <initialize+0x3c>)
 8000f24:	f003 f9d6 	bl	80042d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	// Right ServoMotor initialize
 8000f28:	2104      	movs	r1, #4
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <initialize+0x3c>)
 8000f2c:	f003 f9d2 	bl	80042d4 <HAL_TIM_PWM_Start>

	LCD_init();	// LCD initialize
 8000f30:	f7ff ff1a 	bl	8000d68 <LCD_init>

	TIM3->CCR1 = 55;	// Left ServoMotor Start Value
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <initialize+0x40>)
 8000f36:	2237      	movs	r2, #55	; 0x37
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 110;	// Right ServoMotor Start Value
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <initialize+0x40>)
 8000f3c:	226e      	movs	r2, #110	; 0x6e
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200004f4 	.word	0x200004f4
 8000f48:	2000053c 	.word	0x2000053c
 8000f4c:	40000400 	.word	0x40000400

08000f50 <delay>:

void delay (uint16_t time) // Use Microsecond Func
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <delay+0x30>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim2) < time);
 8000f62:	bf00      	nop
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <delay+0x30>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3f9      	bcc.n	8000f64 <delay+0x14>
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200004f4 	.word	0x200004f4
 8000f84:	00000000 	.word	0x00000000

08000f88 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // UltraSonic Initialize Func
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7f1b      	ldrb	r3, [r3, #28]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	f040 8083 	bne.w	80010a0 <HAL_TIM_IC_CaptureCallback+0x118>
//	if (htim == &htim2)
	{
		if (Is_First_Captured_left==0) // if the first value is not captured
 8000f9a:	4b89      	ldr	r3, [pc, #548]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d11a      	bne.n	8000fd8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_VAL_left_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f003 fecf 	bl	8004d48 <HAL_TIM_ReadCapturedValue>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a85      	ldr	r2, [pc, #532]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000fae:	6013      	str	r3, [r2, #0]
			Is_First_Captured_left = 1;  // set the first captured as true
 8000fb0:	4b83      	ldr	r3, [pc, #524]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 020a 	bic.w	r2, r2, #10
 8000fc4:	621a      	str	r2, [r3, #32]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0202 	orr.w	r2, r2, #2
 8000fd4:	621a      	str	r2, [r3, #32]
 8000fd6:	e063      	b.n	80010a0 <HAL_TIM_IC_CaptureCallback+0x118>
		}

		else if (Is_First_Captured_left==1)   // if the first is already captured
 8000fd8:	4b79      	ldr	r3, [pc, #484]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d15f      	bne.n	80010a0 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			IC_Val_left_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f003 feb0 	bl	8004d48 <HAL_TIM_ReadCapturedValue>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a77      	ldr	r2, [pc, #476]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fec:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val_left_2 > IC_VAL_left_1)
 8000ff6:	4b74      	ldr	r3, [pc, #464]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b72      	ldr	r3, [pc, #456]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d907      	bls.n	8001012 <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference_left = IC_Val_left_2-IC_VAL_left_1;
 8001002:	4b71      	ldr	r3, [pc, #452]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b6f      	ldr	r3, [pc, #444]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	4a6f      	ldr	r2, [pc, #444]	; (80011cc <HAL_TIM_IC_CaptureCallback+0x244>)
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e00f      	b.n	8001032 <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if (IC_VAL_left_1 > IC_Val_left_2)
 8001012:	4b6c      	ldr	r3, [pc, #432]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b6c      	ldr	r3, [pc, #432]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d909      	bls.n	8001032 <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference_left = (0xffff - IC_VAL_left_1) + IC_Val_left_2;
 800101e:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800102c:	33ff      	adds	r3, #255	; 0xff
 800102e:	4a67      	ldr	r2, [pc, #412]	; (80011cc <HAL_TIM_IC_CaptureCallback+0x244>)
 8001030:	6013      	str	r3, [r2, #0]
			}

			Distance_In = Difference_left * .034/2;
 8001032:	4b66      	ldr	r3, [pc, #408]	; (80011cc <HAL_TIM_IC_CaptureCallback+0x244>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa6c 	bl	8000514 <__aeabi_ui2d>
 800103c:	a35e      	add	r3, pc, #376	; (adr r3, 80011b8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fae1 	bl	8000608 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001056:	f7ff fc01 	bl	800085c <__aeabi_ddiv>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f7ff fce3 	bl	8000a2c <__aeabi_d2uiz>
 8001066:	4603      	mov	r3, r0
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800106c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_left = 0; // set it back to false
 800106e:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a1a      	ldr	r2, [r3, #32]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 020a 	bic.w	r2, r2, #10
 8001082:	621a      	str	r2, [r3, #32]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6a12      	ldr	r2, [r2, #32]
 800108e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001090:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0202 	bic.w	r2, r2, #2
 800109e:	60da      	str	r2, [r3, #12]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7f1b      	ldrb	r3, [r3, #28]
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	f040 8083 	bne.w	80011b0 <HAL_TIM_IC_CaptureCallback+0x228>
//	if (htim == &htim3)
	{
		if (Is_First_Captured_right==0) // if the first value is not captured
 80010aa:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d11a      	bne.n	80010e8 <HAL_TIM_IC_CaptureCallback+0x160>
		{
			IC_Val_right_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 80010b2:	2108      	movs	r1, #8
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f003 fe47 	bl	8004d48 <HAL_TIM_ReadCapturedValue>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a47      	ldr	r2, [pc, #284]	; (80011dc <HAL_TIM_IC_CaptureCallback+0x254>)
 80010be:	6013      	str	r3, [r2, #0]
			Is_First_Captured_right = 1;  // set the first captured as true
 80010c0:	4b45      	ldr	r3, [pc, #276]	; (80011d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6a1a      	ldr	r2, [r3, #32]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80010d4:	621a      	str	r2, [r3, #32]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a1a      	ldr	r2, [r3, #32]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010e4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
		}
	}
}
 80010e6:	e063      	b.n	80011b0 <HAL_TIM_IC_CaptureCallback+0x228>
		else if (Is_First_Captured_right==1)   // if the first is already captured
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d15f      	bne.n	80011b0 <HAL_TIM_IC_CaptureCallback+0x228>
			IC_Val_right_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80010f0:	2108      	movs	r1, #8
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f003 fe28 	bl	8004d48 <HAL_TIM_ReadCapturedValue>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a39      	ldr	r2, [pc, #228]	; (80011e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010fc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val_right_2 > IC_Val_right_1)
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b34      	ldr	r3, [pc, #208]	; (80011dc <HAL_TIM_IC_CaptureCallback+0x254>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d907      	bls.n	8001122 <HAL_TIM_IC_CaptureCallback+0x19a>
				Difference_right = IC_Val_right_2-IC_Val_right_1;
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e00f      	b.n	8001142 <HAL_TIM_IC_CaptureCallback+0x1ba>
			else if (IC_Val_right_1 > IC_Val_right_2)
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d909      	bls.n	8001142 <HAL_TIM_IC_CaptureCallback+0x1ba>
				Difference_right = (0xffff - IC_Val_right_1) + IC_Val_right_2;
 800112e:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800113c:	33ff      	adds	r3, #255	; 0xff
 800113e:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001140:	6013      	str	r3, [r2, #0]
			Distance_Out = Difference_right * .034/2;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9e4 	bl	8000514 <__aeabi_ui2d>
 800114c:	a31a      	add	r3, pc, #104	; (adr r3, 80011b8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa59 	bl	8000608 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001166:	f7ff fb79 	bl	800085c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fc5b 	bl	8000a2c <__aeabi_d2uiz>
 8001176:	4603      	mov	r3, r0
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800117c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_right = 0; // set it back to false
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a1a      	ldr	r2, [r3, #32]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001192:	621a      	str	r2, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6a12      	ldr	r2, [r2, #32]
 800119e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0208 	bic.w	r2, r2, #8
 80011ae:	60da      	str	r2, [r3, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	b020c49c 	.word	0xb020c49c
 80011bc:	3fa16872 	.word	0x3fa16872
 80011c0:	200000a4 	.word	0x200000a4
 80011c4:	20000098 	.word	0x20000098
 80011c8:	2000009c 	.word	0x2000009c
 80011cc:	200000a0 	.word	0x200000a0
 80011d0:	200000a5 	.word	0x200000a5
 80011d4:	200004f4 	.word	0x200004f4
 80011d8:	200000b4 	.word	0x200000b4
 80011dc:	200000a8 	.word	0x200000a8
 80011e0:	200000ac 	.word	0x200000ac
 80011e4:	200000b0 	.word	0x200000b0
 80011e8:	200000b5 	.word	0x200000b5

080011ec <HCSR04_Read_Left>:

void HCSR04_Read_Left (void) // Detecting Left UltraSonic Value Func
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <HCSR04_Read_Left+0x38>)
 80011f8:	f001 fe1e 	bl	8002e38 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80011fc:	200a      	movs	r0, #10
 80011fe:	f7ff fea7 	bl	8000f50 <delay>
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <HCSR04_Read_Left+0x38>)
 800120a:	f001 fe15 	bl	8002e38 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HCSR04_Read_Left+0x3c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HCSR04_Read_Left+0x3c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0202 	orr.w	r2, r2, #2
 800121c:	60da      	str	r2, [r3, #12]
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020000 	.word	0x40020000
 8001228:	200004f4 	.word	0x200004f4

0800122c <HCSR04_Read_Right>:

void HCSR04_Read_Right (void) // Detecting Right UltraSonic Value Func
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001230:	2201      	movs	r2, #1
 8001232:	2120      	movs	r1, #32
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <HCSR04_Read_Right+0x34>)
 8001236:	f001 fdff 	bl	8002e38 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 800123a:	200a      	movs	r0, #10
 800123c:	f7ff fe88 	bl	8000f50 <delay>
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001240:	2200      	movs	r2, #0
 8001242:	2120      	movs	r1, #32
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <HCSR04_Read_Right+0x34>)
 8001246:	f001 fdf7 	bl	8002e38 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC3);
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HCSR04_Read_Right+0x38>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HCSR04_Read_Right+0x38>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0208 	orr.w	r2, r2, #8
 8001258:	60da      	str	r2, [r3, #12]
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40020400 	.word	0x40020400
 8001264:	200004f4 	.word	0x200004f4

08001268 <Entrace_Car>:

void Entrace_Car(void) // Receive raspberry pi Array Data in IASS
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	if(strstr(rasp_rx_number_plate, "IASS") != NULL) // array in IASS => true
 800126c:	490d      	ldr	r1, [pc, #52]	; (80012a4 <Entrace_Car+0x3c>)
 800126e:	480e      	ldr	r0, [pc, #56]	; (80012a8 <Entrace_Car+0x40>)
 8001270:	f007 f9aa 	bl	80085c8 <strstr>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <Entrace_Car+0x22>
    {
    	TIM3->CCR1 = 110;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <Entrace_Car+0x44>)
 800127c:	226e      	movs	r2, #110	; 0x6e
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
    	osDelay(3000);
 8001280:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001284:	f005 fa4f 	bl	8006726 <osDelay>
    else if(Distance_In > 10)
    {
    	TIM3->CCR1 = 55;
    	osDelay(100);
    }
}
 8001288:	e009      	b.n	800129e <Entrace_Car+0x36>
    else if(Distance_In > 10)
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <Entrace_Car+0x48>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b0a      	cmp	r3, #10
 8001290:	d905      	bls.n	800129e <Entrace_Car+0x36>
    	TIM3->CCR1 = 55;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <Entrace_Car+0x44>)
 8001294:	2237      	movs	r2, #55	; 0x37
 8001296:	635a      	str	r2, [r3, #52]	; 0x34
    	osDelay(100);
 8001298:	2064      	movs	r0, #100	; 0x64
 800129a:	f005 fa44 	bl	8006726 <osDelay>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	080098c8 	.word	0x080098c8
 80012a8:	20000160 	.word	0x20000160
 80012ac:	40000400 	.word	0x40000400
 80012b0:	200000a5 	.word	0x200000a5

080012b4 <Exit_Car>:
void Exit_Car(void) // Receive raspberry pi Array Data in OASS
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	if(strstr(rasp_rx_number_plate, "OASS") != NULL) // array in OASS => true
 80012b8:	490f      	ldr	r1, [pc, #60]	; (80012f8 <Exit_Car+0x44>)
 80012ba:	4810      	ldr	r0, [pc, #64]	; (80012fc <Exit_Car+0x48>)
 80012bc:	f007 f984 	bl	80085c8 <strstr>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <Exit_Car+0x2a>
    {
		osDelay(4000);
 80012c6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80012ca:	f005 fa2c 	bl	8006726 <osDelay>
    	TIM3->CCR2 = 55;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <Exit_Car+0x4c>)
 80012d0:	2237      	movs	r2, #55	; 0x37
 80012d2:	639a      	str	r2, [r3, #56]	; 0x38
    	osDelay(3000);
 80012d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012d8:	f005 fa25 	bl	8006726 <osDelay>
	else if(Distance_Out > 10)
    {
    	TIM3->CCR2 = 110;
    	osDelay(100);
    }
}
 80012dc:	e009      	b.n	80012f2 <Exit_Car+0x3e>
	else if(Distance_Out > 10)
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <Exit_Car+0x50>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b0a      	cmp	r3, #10
 80012e4:	d905      	bls.n	80012f2 <Exit_Car+0x3e>
    	TIM3->CCR2 = 110;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <Exit_Car+0x4c>)
 80012e8:	226e      	movs	r2, #110	; 0x6e
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
    	osDelay(100);
 80012ec:	2064      	movs	r0, #100	; 0x64
 80012ee:	f005 fa1a 	bl	8006726 <osDelay>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	080098d0 	.word	0x080098d0
 80012fc:	20000160 	.word	0x20000160
 8001300:	40000400 	.word	0x40000400
 8001304:	200000b5 	.word	0x200000b5

08001308 <Default_LCD>:

void Default_LCD(void) // Show Default LCD output
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    if (Distance_In > 10 && Distance_Out > 10)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <Default_LCD+0x54>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b0a      	cmp	r3, #10
 8001312:	d921      	bls.n	8001358 <Default_LCD+0x50>
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <Default_LCD+0x58>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b0a      	cmp	r3, #10
 800131a:	d91d      	bls.n	8001358 <Default_LCD+0x50>
    {
    	osDelay(1500);
 800131c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001320:	f005 fa01 	bl	8006726 <osDelay>
		sprintf(buff, "Parking Manager ");
 8001324:	490f      	ldr	r1, [pc, #60]	; (8001364 <Default_LCD+0x5c>)
 8001326:	4810      	ldr	r0, [pc, #64]	; (8001368 <Default_LCD+0x60>)
 8001328:	f007 f8f8 	bl	800851c <siprintf>
		LCD_put_cursor(0, 0);
 800132c:	2100      	movs	r1, #0
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fd54 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff);
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <Default_LCD+0x60>)
 8001336:	f7ff fdd3 	bl	8000ee0 <LCD_send_str>
		sprintf(buff_space, "                ");
 800133a:	490c      	ldr	r1, [pc, #48]	; (800136c <Default_LCD+0x64>)
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <Default_LCD+0x68>)
 800133e:	f007 f8ed 	bl	800851c <siprintf>
		LCD_put_cursor(1, 0);
 8001342:	2100      	movs	r1, #0
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fd49 	bl	8000ddc <LCD_put_cursor>
	    LCD_send_str(buff_space);
 800134a:	4809      	ldr	r0, [pc, #36]	; (8001370 <Default_LCD+0x68>)
 800134c:	f7ff fdc8 	bl	8000ee0 <LCD_send_str>
	    osDelay(1500);
 8001350:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001354:	f005 f9e7 	bl	8006726 <osDelay>
    }
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200000a5 	.word	0x200000a5
 8001360:	200000b5 	.word	0x200000b5
 8001364:	080098d8 	.word	0x080098d8
 8001368:	200000b8 	.word	0x200000b8
 800136c:	080098ec 	.word	0x080098ec
 8001370:	20000130 	.word	0x20000130

08001374 <Entrance_Success>:
void Entrance_Success(void) // if receive raspberry pi array data in IASS
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	if (rasp_rx_number_plate[0] == 'I' && rasp_rx_number_plate[3] == 'S')
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <Entrance_Success+0x54>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b49      	cmp	r3, #73	; 0x49
 800137e:	d121      	bne.n	80013c4 <Entrance_Success+0x50>
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <Entrance_Success+0x54>)
 8001382:	78db      	ldrb	r3, [r3, #3]
 8001384:	2b53      	cmp	r3, #83	; 0x53
 8001386:	d11d      	bne.n	80013c4 <Entrance_Success+0x50>
	{
		osDelay(1500);
 8001388:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800138c:	f005 f9cb 	bl	8006726 <osDelay>
		sprintf(buff_welcome, "Welcome         ");
 8001390:	490e      	ldr	r1, [pc, #56]	; (80013cc <Entrance_Success+0x58>)
 8001392:	480f      	ldr	r0, [pc, #60]	; (80013d0 <Entrance_Success+0x5c>)
 8001394:	f007 f8c2 	bl	800851c <siprintf>
		LCD_put_cursor(0, 0);
 8001398:	2100      	movs	r1, #0
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fd1e 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff_welcome);
 80013a0:	480b      	ldr	r0, [pc, #44]	; (80013d0 <Entrance_Success+0x5c>)
 80013a2:	f7ff fd9d 	bl	8000ee0 <LCD_send_str>

		sprintf(buff_carNumber, car_number);
 80013a6:	490b      	ldr	r1, [pc, #44]	; (80013d4 <Entrance_Success+0x60>)
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <Entrance_Success+0x64>)
 80013aa:	f007 f8b7 	bl	800851c <siprintf>
		LCD_put_cursor(1, 0);
 80013ae:	2100      	movs	r1, #0
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff fd13 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff_carNumber);
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <Entrance_Success+0x64>)
 80013b8:	f7ff fd92 	bl	8000ee0 <LCD_send_str>
		osDelay(1500);
 80013bc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80013c0:	f005 f9b1 	bl	8006726 <osDelay>
	}
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000160 	.word	0x20000160
 80013cc:	08009900 	.word	0x08009900
 80013d0:	20000144 	.word	0x20000144
 80013d4:	20000178 	.word	0x20000178
 80013d8:	2000011c 	.word	0x2000011c

080013dc <Entrance_Fail>:
void Entrance_Fail(void) // if receive raspberry pi array data in IAIL
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	if (rasp_rx_number_plate[0] == 'I' && rasp_rx_number_plate[3] == 'L')
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <Entrance_Fail+0x54>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b49      	cmp	r3, #73	; 0x49
 80013e6:	d121      	bne.n	800142c <Entrance_Fail+0x50>
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <Entrance_Fail+0x54>)
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	2b4c      	cmp	r3, #76	; 0x4c
 80013ee:	d11d      	bne.n	800142c <Entrance_Fail+0x50>
	{
		osDelay(1500);
 80013f0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80013f4:	f005 f997 	bl	8006726 <osDelay>
		sprintf(buff_in_ban, "you cant enter  ");
 80013f8:	490e      	ldr	r1, [pc, #56]	; (8001434 <Entrance_Fail+0x58>)
 80013fa:	480f      	ldr	r0, [pc, #60]	; (8001438 <Entrance_Fail+0x5c>)
 80013fc:	f007 f88e 	bl	800851c <siprintf>
		LCD_put_cursor(0, 0);
 8001400:	2100      	movs	r1, #0
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fcea 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff_in_ban);
 8001408:	480b      	ldr	r0, [pc, #44]	; (8001438 <Entrance_Fail+0x5c>)
 800140a:	f7ff fd69 	bl	8000ee0 <LCD_send_str>

		sprintf(buff_space, "                ");
 800140e:	490b      	ldr	r1, [pc, #44]	; (800143c <Entrance_Fail+0x60>)
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <Entrance_Fail+0x64>)
 8001412:	f007 f883 	bl	800851c <siprintf>
		LCD_put_cursor(1, 0);
 8001416:	2100      	movs	r1, #0
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff fcdf 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff_space);
 800141e:	4808      	ldr	r0, [pc, #32]	; (8001440 <Entrance_Fail+0x64>)
 8001420:	f7ff fd5e 	bl	8000ee0 <LCD_send_str>
		osDelay(1500);
 8001424:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001428:	f005 f97d 	bl	8006726 <osDelay>
	}
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000160 	.word	0x20000160
 8001434:	08009914 	.word	0x08009914
 8001438:	200000e0 	.word	0x200000e0
 800143c:	080098ec 	.word	0x080098ec
 8001440:	20000130 	.word	0x20000130

08001444 <Exit_Success>:
void Exit_Success(void) // if receive raspberry pi array data in OASS
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	if (rasp_rx_number_plate[0] == 'O' && rasp_rx_number_plate[3] == 'S')
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <Exit_Success+0x6c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b4f      	cmp	r3, #79	; 0x4f
 800144e:	d12c      	bne.n	80014aa <Exit_Success+0x66>
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <Exit_Success+0x6c>)
 8001452:	78db      	ldrb	r3, [r3, #3]
 8001454:	2b53      	cmp	r3, #83	; 0x53
 8001456:	d128      	bne.n	80014aa <Exit_Success+0x66>
	{
		osDelay(1500);
 8001458:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800145c:	f005 f963 	bl	8006726 <osDelay>
		sprintf(buff_price, price);
 8001460:	4914      	ldr	r1, [pc, #80]	; (80014b4 <Exit_Success+0x70>)
 8001462:	4815      	ldr	r0, [pc, #84]	; (80014b8 <Exit_Success+0x74>)
 8001464:	f007 f85a 	bl	800851c <siprintf>
		LCD_put_cursor(0, 0);
 8001468:	2100      	movs	r1, #0
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fcb6 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff_price);
 8001470:	4811      	ldr	r0, [pc, #68]	; (80014b8 <Exit_Success+0x74>)
 8001472:	f7ff fd35 	bl	8000ee0 <LCD_send_str>

		sprintf(buff_out, "         ");
 8001476:	4911      	ldr	r1, [pc, #68]	; (80014bc <Exit_Success+0x78>)
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <Exit_Success+0x7c>)
 800147a:	f007 f84f 	bl	800851c <siprintf>
		LCD_put_cursor(0, 7);
 800147e:	2107      	movs	r1, #7
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff fcab 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff_out);
 8001486:	480e      	ldr	r0, [pc, #56]	; (80014c0 <Exit_Success+0x7c>)
 8001488:	f7ff fd2a 	bl	8000ee0 <LCD_send_str>

		sprintf(buff_carNumber, car_number);
 800148c:	490d      	ldr	r1, [pc, #52]	; (80014c4 <Exit_Success+0x80>)
 800148e:	480e      	ldr	r0, [pc, #56]	; (80014c8 <Exit_Success+0x84>)
 8001490:	f007 f844 	bl	800851c <siprintf>
		LCD_put_cursor(1, 0);
 8001494:	2100      	movs	r1, #0
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff fca0 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff_carNumber);
 800149c:	480a      	ldr	r0, [pc, #40]	; (80014c8 <Exit_Success+0x84>)
 800149e:	f7ff fd1f 	bl	8000ee0 <LCD_send_str>
		osDelay(1500);
 80014a2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014a6:	f005 f93e 	bl	8006726 <osDelay>
	}
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000160 	.word	0x20000160
 80014b4:	20000184 	.word	0x20000184
 80014b8:	20000108 	.word	0x20000108
 80014bc:	08009928 	.word	0x08009928
 80014c0:	200000cc 	.word	0x200000cc
 80014c4:	20000178 	.word	0x20000178
 80014c8:	2000011c 	.word	0x2000011c

080014cc <Exit_Fail>:
void Exit_Fail(void) // if receive raspberry pi array data in OAIL
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	if (rasp_rx_number_plate[0] == 'O' && rasp_rx_number_plate[3] == 'L')
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <Exit_Fail+0x54>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b4f      	cmp	r3, #79	; 0x4f
 80014d6:	d121      	bne.n	800151c <Exit_Fail+0x50>
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <Exit_Fail+0x54>)
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	2b4c      	cmp	r3, #76	; 0x4c
 80014de:	d11d      	bne.n	800151c <Exit_Fail+0x50>
	{
		osDelay(1500);
 80014e0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014e4:	f005 f91f 	bl	8006726 <osDelay>
		sprintf(buff_out_ban, "you cant exit   ");
 80014e8:	490e      	ldr	r1, [pc, #56]	; (8001524 <Exit_Fail+0x58>)
 80014ea:	480f      	ldr	r0, [pc, #60]	; (8001528 <Exit_Fail+0x5c>)
 80014ec:	f007 f816 	bl	800851c <siprintf>
		LCD_put_cursor(0, 0);
 80014f0:	2100      	movs	r1, #0
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff fc72 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff_out_ban);
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <Exit_Fail+0x5c>)
 80014fa:	f7ff fcf1 	bl	8000ee0 <LCD_send_str>

		sprintf(buff_space, "                ");
 80014fe:	490b      	ldr	r1, [pc, #44]	; (800152c <Exit_Fail+0x60>)
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <Exit_Fail+0x64>)
 8001502:	f007 f80b 	bl	800851c <siprintf>
		LCD_put_cursor(1, 0);
 8001506:	2100      	movs	r1, #0
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff fc67 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff_space);
 800150e:	4808      	ldr	r0, [pc, #32]	; (8001530 <Exit_Fail+0x64>)
 8001510:	f7ff fce6 	bl	8000ee0 <LCD_send_str>
		osDelay(1500);
 8001514:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001518:	f005 f905 	bl	8006726 <osDelay>
	}
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000160 	.word	0x20000160
 8001524:	08009934 	.word	0x08009934
 8001528:	200000f4 	.word	0x200000f4
 800152c:	080098ec 	.word	0x080098ec
 8001530:	20000130 	.word	0x20000130

08001534 <BLE_Entrance_Success>:

void BLE_Entrance_Success(void) // Send a Success Entrance Message to the Manager
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
	if (strstr(rasp_rx_number_plate, "IASS") != NULL) // parking in car
 800153a:	491f      	ldr	r1, [pc, #124]	; (80015b8 <BLE_Entrance_Success+0x84>)
 800153c:	481f      	ldr	r0, [pc, #124]	; (80015bc <BLE_Entrance_Success+0x88>)
 800153e:	f007 f843 	bl	80085c8 <strstr>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d033      	beq.n	80015b0 <BLE_Entrance_Success+0x7c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);	// green led on
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154e:	481c      	ldr	r0, [pc, #112]	; (80015c0 <BLE_Entrance_Success+0x8c>)
 8001550:	f001 fc72 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); // red led off
 8001554:	2200      	movs	r2, #0
 8001556:	2120      	movs	r1, #32
 8001558:	481a      	ldr	r0, [pc, #104]	; (80015c4 <BLE_Entrance_Success+0x90>)
 800155a:	f001 fc6d 	bl	8002e38 <HAL_GPIO_WritePin>
		osDelay(100);
 800155e:	2064      	movs	r0, #100	; 0x64
 8001560:	f005 f8e1 	bl	8006726 <osDelay>
		HAL_UART_Transmit_IT(&huart1, Pass_in, sizeof(Pass_in));
 8001564:	2208      	movs	r2, #8
 8001566:	4918      	ldr	r1, [pc, #96]	; (80015c8 <BLE_Entrance_Success+0x94>)
 8001568:	4818      	ldr	r0, [pc, #96]	; (80015cc <BLE_Entrance_Success+0x98>)
 800156a:	f004 f917 	bl	800579c <HAL_UART_Transmit_IT>
		osDelay(1500);
 800156e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001572:	f005 f8d8 	bl	8006726 <osDelay>
		HAL_UART_Transmit_IT(&huart1, car_number, sizeof(car_number));
 8001576:	2209      	movs	r2, #9
 8001578:	4915      	ldr	r1, [pc, #84]	; (80015d0 <BLE_Entrance_Success+0x9c>)
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <BLE_Entrance_Success+0x98>)
 800157c:	f004 f90e 	bl	800579c <HAL_UART_Transmit_IT>
		osDelay(1900);
 8001580:	f240 706c 	movw	r0, #1900	; 0x76c
 8001584:	f005 f8cf 	bl	8006726 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET); // green led off
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158e:	480c      	ldr	r0, [pc, #48]	; (80015c0 <BLE_Entrance_Success+0x8c>)
 8001590:	f001 fc52 	bl	8002e38 <HAL_GPIO_WritePin>
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	e007      	b.n	80015aa <BLE_Entrance_Success+0x76>
		{
			rasp_rx_number_plate[i] = '\0';
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <BLE_Entrance_Success+0x88>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3301      	adds	r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b15      	cmp	r3, #21
 80015ae:	d9f4      	bls.n	800159a <BLE_Entrance_Success+0x66>
		}
	}
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	080098c8 	.word	0x080098c8
 80015bc:	20000160 	.word	0x20000160
 80015c0:	40020800 	.word	0x40020800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000584 	.word	0x20000584
 80015d0:	20000178 	.word	0x20000178

080015d4 <BLE_Entrance_Fail>:
void BLE_Entrance_Fail(void) // Send a Fail Entrance Message to the Manager
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	if (strstr(rasp_rx_number_plate, "IAIL") != NULL )
 80015da:	4919      	ldr	r1, [pc, #100]	; (8001640 <BLE_Entrance_Fail+0x6c>)
 80015dc:	4819      	ldr	r0, [pc, #100]	; (8001644 <BLE_Entrance_Fail+0x70>)
 80015de:	f006 fff3 	bl	80085c8 <strstr>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d026      	beq.n	8001636 <BLE_Entrance_Fail+0x62>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET); // red led on
 80015e8:	2201      	movs	r2, #1
 80015ea:	2120      	movs	r1, #32
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <BLE_Entrance_Fail+0x74>)
 80015ee:	f001 fc23 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET); // green led off
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	4814      	ldr	r0, [pc, #80]	; (800164c <BLE_Entrance_Fail+0x78>)
 80015fa:	f001 fc1d 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_IT(&huart1, Fail, sizeof(Fail));
 80015fe:	2205      	movs	r2, #5
 8001600:	4913      	ldr	r1, [pc, #76]	; (8001650 <BLE_Entrance_Fail+0x7c>)
 8001602:	4814      	ldr	r0, [pc, #80]	; (8001654 <BLE_Entrance_Fail+0x80>)
 8001604:	f004 f8ca 	bl	800579c <HAL_UART_Transmit_IT>
		osDelay(3000);
 8001608:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800160c:	f005 f88b 	bl	8006726 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); // red led off
 8001610:	2200      	movs	r2, #0
 8001612:	2120      	movs	r1, #32
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <BLE_Entrance_Fail+0x74>)
 8001616:	f001 fc0f 	bl	8002e38 <HAL_GPIO_WritePin>
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	e007      	b.n	8001630 <BLE_Entrance_Fail+0x5c>
		{
			rasp_rx_number_plate[i] = '\0';
 8001620:	4a08      	ldr	r2, [pc, #32]	; (8001644 <BLE_Entrance_Fail+0x70>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3301      	adds	r3, #1
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b15      	cmp	r3, #21
 8001634:	d9f4      	bls.n	8001620 <BLE_Entrance_Fail+0x4c>
		}
	}
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	08009948 	.word	0x08009948
 8001644:	20000160 	.word	0x20000160
 8001648:	40020000 	.word	0x40020000
 800164c:	40020800 	.word	0x40020800
 8001650:	20000014 	.word	0x20000014
 8001654:	20000584 	.word	0x20000584

08001658 <BLE_Exit_Success>:
void BLE_Exit_Success(void) // Send a Success Exit Message to the Manager
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	if ((strstr(rasp_rx_number_plate, "OASS") != NULL)) // parking out car
 800165e:	4924      	ldr	r1, [pc, #144]	; (80016f0 <BLE_Exit_Success+0x98>)
 8001660:	4824      	ldr	r0, [pc, #144]	; (80016f4 <BLE_Exit_Success+0x9c>)
 8001662:	f006 ffb1 	bl	80085c8 <strstr>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d03c      	beq.n	80016e6 <BLE_Exit_Success+0x8e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET); // green led on
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	4821      	ldr	r0, [pc, #132]	; (80016f8 <BLE_Exit_Success+0xa0>)
 8001674:	f001 fbe0 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); // red led off
 8001678:	2200      	movs	r2, #0
 800167a:	2120      	movs	r1, #32
 800167c:	481f      	ldr	r0, [pc, #124]	; (80016fc <BLE_Exit_Success+0xa4>)
 800167e:	f001 fbdb 	bl	8002e38 <HAL_GPIO_WritePin>
		osDelay(100);
 8001682:	2064      	movs	r0, #100	; 0x64
 8001684:	f005 f84f 	bl	8006726 <osDelay>
		HAL_UART_Transmit_IT(&huart1, Pass_out, sizeof(Pass_out));
 8001688:	2209      	movs	r2, #9
 800168a:	491d      	ldr	r1, [pc, #116]	; (8001700 <BLE_Exit_Success+0xa8>)
 800168c:	481d      	ldr	r0, [pc, #116]	; (8001704 <BLE_Exit_Success+0xac>)
 800168e:	f004 f885 	bl	800579c <HAL_UART_Transmit_IT>
		osDelay(1500);
 8001692:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001696:	f005 f846 	bl	8006726 <osDelay>
		HAL_UART_Transmit_IT(&huart1, car_number, sizeof(car_number));
 800169a:	2209      	movs	r2, #9
 800169c:	491a      	ldr	r1, [pc, #104]	; (8001708 <BLE_Exit_Success+0xb0>)
 800169e:	4819      	ldr	r0, [pc, #100]	; (8001704 <BLE_Exit_Success+0xac>)
 80016a0:	f004 f87c 	bl	800579c <HAL_UART_Transmit_IT>
		osDelay(1900);
 80016a4:	f240 706c 	movw	r0, #1900	; 0x76c
 80016a8:	f005 f83d 	bl	8006726 <osDelay>
		HAL_UART_Transmit_IT(&huart1, price, sizeof(price));
 80016ac:	2209      	movs	r2, #9
 80016ae:	4917      	ldr	r1, [pc, #92]	; (800170c <BLE_Exit_Success+0xb4>)
 80016b0:	4814      	ldr	r0, [pc, #80]	; (8001704 <BLE_Exit_Success+0xac>)
 80016b2:	f004 f873 	bl	800579c <HAL_UART_Transmit_IT>
		osDelay(900);
 80016b6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80016ba:	f005 f834 	bl	8006726 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET); // green led off
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <BLE_Exit_Success+0xa0>)
 80016c6:	f001 fbb7 	bl	8002e38 <HAL_GPIO_WritePin>
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	e007      	b.n	80016e0 <BLE_Exit_Success+0x88>
		{
			rasp_rx_number_plate[i] = '\0';
 80016d0:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <BLE_Exit_Success+0x9c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3301      	adds	r3, #1
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b15      	cmp	r3, #21
 80016e4:	d9f4      	bls.n	80016d0 <BLE_Exit_Success+0x78>
		}
	}
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	080098d0 	.word	0x080098d0
 80016f4:	20000160 	.word	0x20000160
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020000 	.word	0x40020000
 8001700:	20000008 	.word	0x20000008
 8001704:	20000584 	.word	0x20000584
 8001708:	20000178 	.word	0x20000178
 800170c:	20000184 	.word	0x20000184

08001710 <BLE_Exit_Fail>:
void BLE_Exit_Fail(void) // Send a Fail Exit Message to the Manager
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
	if (strstr(rasp_rx_number_plate, "OAIL") != NULL)
 8001716:	4919      	ldr	r1, [pc, #100]	; (800177c <BLE_Exit_Fail+0x6c>)
 8001718:	4819      	ldr	r0, [pc, #100]	; (8001780 <BLE_Exit_Fail+0x70>)
 800171a:	f006 ff55 	bl	80085c8 <strstr>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d026      	beq.n	8001772 <BLE_Exit_Fail+0x62>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET); // red led on
 8001724:	2201      	movs	r2, #1
 8001726:	2120      	movs	r1, #32
 8001728:	4816      	ldr	r0, [pc, #88]	; (8001784 <BLE_Exit_Fail+0x74>)
 800172a:	f001 fb85 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET); // green led off
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001734:	4814      	ldr	r0, [pc, #80]	; (8001788 <BLE_Exit_Fail+0x78>)
 8001736:	f001 fb7f 	bl	8002e38 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_IT(&huart1, Fail, sizeof(Fail));
 800173a:	2205      	movs	r2, #5
 800173c:	4913      	ldr	r1, [pc, #76]	; (800178c <BLE_Exit_Fail+0x7c>)
 800173e:	4814      	ldr	r0, [pc, #80]	; (8001790 <BLE_Exit_Fail+0x80>)
 8001740:	f004 f82c 	bl	800579c <HAL_UART_Transmit_IT>
		osDelay(3000);
 8001744:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001748:	f004 ffed 	bl	8006726 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); // red led off
 800174c:	2200      	movs	r2, #0
 800174e:	2120      	movs	r1, #32
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <BLE_Exit_Fail+0x74>)
 8001752:	f001 fb71 	bl	8002e38 <HAL_GPIO_WritePin>
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	e007      	b.n	800176c <BLE_Exit_Fail+0x5c>
		{
			rasp_rx_number_plate[i] = '\0';
 800175c:	4a08      	ldr	r2, [pc, #32]	; (8001780 <BLE_Exit_Fail+0x70>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3301      	adds	r3, #1
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b15      	cmp	r3, #21
 8001770:	d9f4      	bls.n	800175c <BLE_Exit_Fail+0x4c>
		}
	}
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	08009950 	.word	0x08009950
 8001780:	20000160 	.word	0x20000160
 8001784:	40020000 	.word	0x40020000
 8001788:	40020800 	.word	0x40020800
 800178c:	20000014 	.word	0x20000014
 8001790:	20000584 	.word	0x20000584

08001794 <Detect_Left>:

void Detect_Left(void) // Entrance Car Detection
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	if (Distance_In < 15 && curState_Left == DETECT)
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <Detect_Left+0x8c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b0e      	cmp	r3, #14
 800179e:	d81c      	bhi.n	80017da <Detect_Left+0x46>
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <Detect_Left+0x90>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d118      	bne.n	80017da <Detect_Left+0x46>
	{
		rasp_tx_dist1_Data[0] = 'I';
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <Detect_Left+0x94>)
 80017aa:	2249      	movs	r2, #73	; 0x49
 80017ac:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart6, rasp_tx_dist1_Data, sizeof(rasp_tx_dist1_Data));
 80017ae:	2201      	movs	r2, #1
 80017b0:	491d      	ldr	r1, [pc, #116]	; (8001828 <Detect_Left+0x94>)
 80017b2:	481e      	ldr	r0, [pc, #120]	; (800182c <Detect_Left+0x98>)
 80017b4:	f003 fff2 	bl	800579c <HAL_UART_Transmit_IT>
		osDelay(2000);
 80017b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017bc:	f004 ffb3 	bl	8006726 <osDelay>
		HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
 80017c0:	2216      	movs	r2, #22
 80017c2:	491b      	ldr	r1, [pc, #108]	; (8001830 <Detect_Left+0x9c>)
 80017c4:	4819      	ldr	r0, [pc, #100]	; (800182c <Detect_Left+0x98>)
 80017c6:	f004 f81f 	bl	8005808 <HAL_UART_Receive_IT>
		osDelay(1500);
 80017ca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80017ce:	f004 ffaa 	bl	8006726 <osDelay>

		curState_Left = KEEP;
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <Detect_Left+0x90>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	e020      	b.n	800181c <Detect_Left+0x88>

	}
	else if (Distance_In < 15 && curState_Left == KEEP) // get remaining array
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <Detect_Left+0x8c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b0e      	cmp	r3, #14
 80017e0:	d80d      	bhi.n	80017fe <Detect_Left+0x6a>
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <Detect_Left+0x90>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d109      	bne.n	80017fe <Detect_Left+0x6a>
	{
		HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
 80017ea:	2216      	movs	r2, #22
 80017ec:	4910      	ldr	r1, [pc, #64]	; (8001830 <Detect_Left+0x9c>)
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <Detect_Left+0x98>)
 80017f0:	f004 f80a 	bl	8005808 <HAL_UART_Receive_IT>
		osDelay(1000);
 80017f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f8:	f004 ff95 	bl	8006726 <osDelay>
 80017fc:	e00e      	b.n	800181c <Detect_Left+0x88>
	}
	else if (Distance_In > 15 && curState_Left == KEEP) // Change State when car passed
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <Detect_Left+0x8c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b0f      	cmp	r3, #15
 8001804:	d90a      	bls.n	800181c <Detect_Left+0x88>
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <Detect_Left+0x90>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d106      	bne.n	800181c <Detect_Left+0x88>
	{
		curState_Left = DETECT;
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <Detect_Left+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8001814:	2064      	movs	r0, #100	; 0x64
 8001816:	f004 ff86 	bl	8006726 <osDelay>
	}
}
 800181a:	e7ff      	b.n	800181c <Detect_Left+0x88>
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200000a5 	.word	0x200000a5
 8001824:	20000199 	.word	0x20000199
 8001828:	20000158 	.word	0x20000158
 800182c:	200005cc 	.word	0x200005cc
 8001830:	20000160 	.word	0x20000160

08001834 <Detect_Right>:
void Detect_Right(void) // Exit Car Detection
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	if (Distance_Out < 15 && curState_Right == DETECT)
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <Detect_Right+0x8c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b0e      	cmp	r3, #14
 800183e:	d81c      	bhi.n	800187a <Detect_Right+0x46>
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <Detect_Right+0x90>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d118      	bne.n	800187a <Detect_Right+0x46>
	{
		rasp_tx_dist2_Data[0] = 'O';
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <Detect_Right+0x94>)
 800184a:	224f      	movs	r2, #79	; 0x4f
 800184c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart6, rasp_tx_dist2_Data, sizeof(rasp_tx_dist2_Data));
 800184e:	2201      	movs	r2, #1
 8001850:	491d      	ldr	r1, [pc, #116]	; (80018c8 <Detect_Right+0x94>)
 8001852:	481e      	ldr	r0, [pc, #120]	; (80018cc <Detect_Right+0x98>)
 8001854:	f003 ffa2 	bl	800579c <HAL_UART_Transmit_IT>
		osDelay(2000);
 8001858:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800185c:	f004 ff63 	bl	8006726 <osDelay>
		HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
 8001860:	2216      	movs	r2, #22
 8001862:	491b      	ldr	r1, [pc, #108]	; (80018d0 <Detect_Right+0x9c>)
 8001864:	4819      	ldr	r0, [pc, #100]	; (80018cc <Detect_Right+0x98>)
 8001866:	f003 ffcf 	bl	8005808 <HAL_UART_Receive_IT>
		osDelay(1500);
 800186a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800186e:	f004 ff5a 	bl	8006726 <osDelay>

		curState_Right = KEEP;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <Detect_Right+0x90>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e020      	b.n	80018bc <Detect_Right+0x88>

	}
	else if (Distance_Out < 15 && curState_Right == KEEP) // get remaining array
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <Detect_Right+0x8c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b0e      	cmp	r3, #14
 8001880:	d80d      	bhi.n	800189e <Detect_Right+0x6a>
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <Detect_Right+0x90>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d109      	bne.n	800189e <Detect_Right+0x6a>
	{
		HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
 800188a:	2216      	movs	r2, #22
 800188c:	4910      	ldr	r1, [pc, #64]	; (80018d0 <Detect_Right+0x9c>)
 800188e:	480f      	ldr	r0, [pc, #60]	; (80018cc <Detect_Right+0x98>)
 8001890:	f003 ffba 	bl	8005808 <HAL_UART_Receive_IT>
		osDelay(1000);
 8001894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001898:	f004 ff45 	bl	8006726 <osDelay>
 800189c:	e00e      	b.n	80018bc <Detect_Right+0x88>
	}
	else if (Distance_Out > 15 && curState_Right == KEEP) // Change State when car passed
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <Detect_Right+0x8c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b0f      	cmp	r3, #15
 80018a4:	d90a      	bls.n	80018bc <Detect_Right+0x88>
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <Detect_Right+0x90>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <Detect_Right+0x88>
	{
		curState_Right = DETECT;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <Detect_Right+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80018b4:	2064      	movs	r0, #100	; 0x64
 80018b6:	f004 ff36 	bl	8006726 <osDelay>
	}
}
 80018ba:	e7ff      	b.n	80018bc <Detect_Right+0x88>
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200000b5 	.word	0x200000b5
 80018c4:	2000019a 	.word	0x2000019a
 80018c8:	2000015c 	.word	0x2000015c
 80018cc:	200005cc 	.word	0x200005cc
 80018d0:	20000160 	.word	0x20000160

080018d4 <Parsing_Car_number>:
void Parsing_Car_number(void) // [Entrance] Received Array car number plate parsing
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
	if (rasp_rx_number_plate[0] == 'I' && rasp_rx_number_plate[3] == 'S')
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <Parsing_Car_number+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b49      	cmp	r3, #73	; 0x49
 80018e0:	d114      	bne.n	800190c <Parsing_Car_number+0x38>
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <Parsing_Car_number+0x44>)
 80018e4:	78db      	ldrb	r3, [r3, #3]
 80018e6:	2b53      	cmp	r3, #83	; 0x53
 80018e8:	d110      	bne.n	800190c <Parsing_Car_number+0x38>
	{
		for (int i = 5; i < 13; i++)
 80018ea:	2305      	movs	r3, #5
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	e00a      	b.n	8001906 <Parsing_Car_number+0x32>
		{
			car_number[i - 5] = rasp_rx_number_plate[i]; // car number parsing
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b05      	subs	r3, #5
 80018f4:	4908      	ldr	r1, [pc, #32]	; (8001918 <Parsing_Car_number+0x44>)
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	440a      	add	r2, r1
 80018fa:	7811      	ldrb	r1, [r2, #0]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <Parsing_Car_number+0x48>)
 80018fe:	54d1      	strb	r1, [r2, r3]
		for (int i = 5; i < 13; i++)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3301      	adds	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	ddf1      	ble.n	80018f0 <Parsing_Car_number+0x1c>
		}
	}
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	20000160 	.word	0x20000160
 800191c:	20000178 	.word	0x20000178

08001920 <Parsing_Price>:
void Parsing_Price(void) // [Exit] Received Array car number plate & parking fee parsing
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
	if (rasp_rx_number_plate[0] == 'O' && rasp_rx_number_plate[3] == 'S')
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <Parsing_Price+0x68>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b4f      	cmp	r3, #79	; 0x4f
 800192c:	d125      	bne.n	800197a <Parsing_Price+0x5a>
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <Parsing_Price+0x68>)
 8001930:	78db      	ldrb	r3, [r3, #3]
 8001932:	2b53      	cmp	r3, #83	; 0x53
 8001934:	d121      	bne.n	800197a <Parsing_Price+0x5a>
	{
		for (int i = 5; i < 13; i++)
 8001936:	2305      	movs	r3, #5
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	e00a      	b.n	8001952 <Parsing_Price+0x32>
		{
			car_number[i - 5] = rasp_rx_number_plate[i]; // car number parsing
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b05      	subs	r3, #5
 8001940:	4911      	ldr	r1, [pc, #68]	; (8001988 <Parsing_Price+0x68>)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	440a      	add	r2, r1
 8001946:	7811      	ldrb	r1, [r2, #0]
 8001948:	4a10      	ldr	r2, [pc, #64]	; (800198c <Parsing_Price+0x6c>)
 800194a:	54d1      	strb	r1, [r2, r3]
		for (int i = 5; i < 13; i++)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3301      	adds	r3, #1
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0c      	cmp	r3, #12
 8001956:	ddf1      	ble.n	800193c <Parsing_Price+0x1c>
		}
		for (int i = 14; i < 23; i++)
 8001958:	230e      	movs	r3, #14
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	e00a      	b.n	8001974 <Parsing_Price+0x54>
		{
			price[i - 14] = rasp_rx_number_plate[i];
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3b0e      	subs	r3, #14
 8001962:	4909      	ldr	r1, [pc, #36]	; (8001988 <Parsing_Price+0x68>)
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	440a      	add	r2, r1
 8001968:	7811      	ldrb	r1, [r2, #0]
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <Parsing_Price+0x70>)
 800196c:	54d1      	strb	r1, [r2, r3]
		for (int i = 14; i < 23; i++)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2b16      	cmp	r3, #22
 8001978:	ddf1      	ble.n	800195e <Parsing_Price+0x3e>
		}
	}
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000160 	.word	0x20000160
 800198c:	20000178 	.word	0x20000178
 8001990:	20000184 	.word	0x20000184

08001994 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
//	if(huart->Instance==USART1) // Checking Uart Debug
//	{
//		HAL_UART_Receive_IT(&huart1, txData, sizeof(txData));
//		HAL_UART_Transmit_IT(&huart1, txData, sizeof(txData));
//	}
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80019b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <vApplicationGetIdleTaskMemory+0x30>)
 80019be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200001b4 	.word	0x200001b4
 80019d8:	20000254 	.word	0x20000254

080019dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80019dc:	b5b0      	push	{r4, r5, r7, lr}
 80019de:	b0a6      	sub	sp, #152	; 0x98
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  initialize();
 80019e2:	f7ff fa93 	bl	8000f0c <initialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of hBinarySem */
  osSemaphoreDef(hBinarySem);
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  hBinarySemHandle = osSemaphoreCreate(osSemaphore(hBinarySem), 1);
 80019f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80019f6:	2101      	movs	r1, #1
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 fea8 	bl	800674e <osSemaphoreCreate>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a31      	ldr	r2, [pc, #196]	; (8001ac8 <MX_FREERTOS_Init+0xec>)
 8001a02:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of hSemTask */
  osThreadDef(hSemTask, UltraSonicTask, osPriorityNormal, 0, 256);
 8001a04:	4b31      	ldr	r3, [pc, #196]	; (8001acc <MX_FREERTOS_Init+0xf0>)
 8001a06:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001a0a:	461d      	mov	r5, r3
 8001a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTaskHandle = osThreadCreate(osThread(hSemTask), NULL);
 8001a18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f004 fe35 	bl	800668e <osThreadCreate>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4a2a      	ldr	r2, [pc, #168]	; (8001ad0 <MX_FREERTOS_Init+0xf4>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask2 */
  osThreadDef(hSemTask2, ServoMotorTask, osPriorityNormal, 0, 256);
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <MX_FREERTOS_Init+0xf8>)
 8001a2c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001a30:	461d      	mov	r5, r3
 8001a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask2Handle = osThreadCreate(osThread(hSemTask2), NULL);
 8001a3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 fe22 	bl	800668e <osThreadCreate>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <MX_FREERTOS_Init+0xfc>)
 8001a4e:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask3 */
  osThreadDef(hSemTask3, LcdTask, osPriorityNormal, 0, 256);
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <MX_FREERTOS_Init+0x100>)
 8001a52:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001a56:	461d      	mov	r5, r3
 8001a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask3Handle = osThreadCreate(osThread(hSemTask3), NULL);
 8001a64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 fe0f 	bl	800668e <osThreadCreate>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <MX_FREERTOS_Init+0x104>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask4 */
  osThreadDef(hSemTask4, ManagerTask, osPriorityNormal, 0, 256);
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_FREERTOS_Init+0x108>)
 8001a78:	f107 0420 	add.w	r4, r7, #32
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask4Handle = osThreadCreate(osThread(hSemTask4), NULL);
 8001a8a:	f107 0320 	add.w	r3, r7, #32
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f004 fdfc 	bl	800668e <osThreadCreate>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <MX_FREERTOS_Init+0x10c>)
 8001a9a:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask5 */
  osThreadDef(hSemTask5, RaspTask, osPriorityNormal, 0, 256);
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <MX_FREERTOS_Init+0x110>)
 8001a9e:	1d3c      	adds	r4, r7, #4
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask5Handle = osThreadCreate(osThread(hSemTask5), NULL);
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f004 fdeb 	bl	800668e <osThreadCreate>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <MX_FREERTOS_Init+0x114>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001abe:	bf00      	nop
 8001ac0:	3798      	adds	r7, #152	; 0x98
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200001b0 	.word	0x200001b0
 8001acc:	08009964 	.word	0x08009964
 8001ad0:	2000019c 	.word	0x2000019c
 8001ad4:	0800998c 	.word	0x0800998c
 8001ad8:	200001a0 	.word	0x200001a0
 8001adc:	080099b4 	.word	0x080099b4
 8001ae0:	200001a4 	.word	0x200001a4
 8001ae4:	080099dc 	.word	0x080099dc
 8001ae8:	200001a8 	.word	0x200001a8
 8001aec:	08009a04 	.word	0x08009a04
 8001af0:	200001ac 	.word	0x200001ac

08001af4 <UltraSonicTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UltraSonicTask */
void UltraSonicTask(void const * argument)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltraSonicTask */
  /* Infinite loop */
  for(;;)
  {
	  /* ***********Ultra Sonic Check Task*********** */
	  HCSR04_Read_Left();
 8001afc:	f7ff fb76 	bl	80011ec <HCSR04_Read_Left>
	  osDelay(100);
 8001b00:	2064      	movs	r0, #100	; 0x64
 8001b02:	f004 fe10 	bl	8006726 <osDelay>
	  HCSR04_Read_Right();
 8001b06:	f7ff fb91 	bl	800122c <HCSR04_Read_Right>
	  osDelay(100);
 8001b0a:	2064      	movs	r0, #100	; 0x64
 8001b0c:	f004 fe0b 	bl	8006726 <osDelay>
	  HCSR04_Read_Left();
 8001b10:	e7f4      	b.n	8001afc <UltraSonicTask+0x8>

08001b12 <ServoMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ServoMotorTask */
void ServoMotorTask(void const * argument)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ServoMotorTask */
  /* Infinite loop */
  for(;;)
  {
	Entrace_Car();
 8001b1a:	f7ff fba5 	bl	8001268 <Entrace_Car>
	osDelay(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f004 fe01 	bl	8006726 <osDelay>
	Exit_Car();
 8001b24:	f7ff fbc6 	bl	80012b4 <Exit_Car>
	osDelay(1);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f004 fdfc 	bl	8006726 <osDelay>
	Entrace_Car();
 8001b2e:	e7f4      	b.n	8001b1a <ServoMotorTask+0x8>

08001b30 <LcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LcdTask */
void LcdTask(void const * argument)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /* ***********LCD Display Output Task*********** */
		/* ***********LCD Display Output Task*********** */
    Default_LCD();
 8001b38:	f7ff fbe6 	bl	8001308 <Default_LCD>
    osDelay(1);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f004 fdf2 	bl	8006726 <osDelay>
    Entrance_Success();
 8001b42:	f7ff fc17 	bl	8001374 <Entrance_Success>
    osDelay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f004 fded 	bl	8006726 <osDelay>
    Entrance_Fail();
 8001b4c:	f7ff fc46 	bl	80013dc <Entrance_Fail>
    osDelay(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f004 fde8 	bl	8006726 <osDelay>
    Exit_Success();
 8001b56:	f7ff fc75 	bl	8001444 <Exit_Success>
    osDelay(1);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f004 fde3 	bl	8006726 <osDelay>
    Exit_Fail();
 8001b60:	f7ff fcb4 	bl	80014cc <Exit_Fail>
    osDelay(1);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f004 fdde 	bl	8006726 <osDelay>
    Default_LCD();
 8001b6a:	e7e5      	b.n	8001b38 <LcdTask+0x8>

08001b6c <ManagerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ManagerTask */
void ManagerTask(void const * argument)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ManagerTask */
  /* Infinite loop */
  for(;;)
  {
    BLE_Entrance_Success();
 8001b74:	f7ff fcde 	bl	8001534 <BLE_Entrance_Success>
    osDelay(1);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f004 fdd4 	bl	8006726 <osDelay>
    BLE_Entrance_Fail();
 8001b7e:	f7ff fd29 	bl	80015d4 <BLE_Entrance_Fail>
    osDelay(1);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f004 fdcf 	bl	8006726 <osDelay>
    BLE_Exit_Success();
 8001b88:	f7ff fd66 	bl	8001658 <BLE_Exit_Success>
    osDelay(1);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f004 fdca 	bl	8006726 <osDelay>
    BLE_Exit_Fail();
 8001b92:	f7ff fdbd 	bl	8001710 <BLE_Exit_Fail>
    osDelay(1);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f004 fdc5 	bl	8006726 <osDelay>
    BLE_Entrance_Success();
 8001b9c:	e7ea      	b.n	8001b74 <ManagerTask+0x8>
	...

08001ba0 <RaspTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RaspTask */
void RaspTask(void const * argument)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RaspTask */
  /* Infinite loop */
  for(;;)
  {
	  /* ***********Sending Data to Rasp Task*********** */
	Detect_Left();
 8001ba8:	f7ff fdf4 	bl	8001794 <Detect_Left>
	osDelay(1);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f004 fdba 	bl	8006726 <osDelay>
	Detect_Right();
 8001bb2:	f7ff fe3f 	bl	8001834 <Detect_Right>
	osDelay(1);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f004 fdb5 	bl	8006726 <osDelay>

	Parsing_Car_number();
 8001bbc:	f7ff fe8a 	bl	80018d4 <Parsing_Car_number>
	osDelay(1);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f004 fdb0 	bl	8006726 <osDelay>
	Parsing_Price();
 8001bc6:	f7ff feab 	bl	8001920 <Parsing_Price>
	osDelay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f004 fdab 	bl	8006726 <osDelay>

	sscanf(rasp_rx_number_plate, "OASS %*8c%9[^\n]", charge_price_Data);
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <RaspTask+0x48>)
 8001bd2:	4906      	ldr	r1, [pc, #24]	; (8001bec <RaspTask+0x4c>)
 8001bd4:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <RaspTask+0x50>)
 8001bd6:	f006 fcc1 	bl	800855c <siscanf>
	// Debug Parsing Parking fee

	rasp_tx_dist1_Data[0] = '\0';	// Left Distance Array Normalize
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <RaspTask+0x54>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
	rasp_tx_dist2_Data[0] = '\0';	// Right DistanceArray Normalize
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <RaspTask+0x58>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
	Detect_Left();
 8001be6:	e7df      	b.n	8001ba8 <RaspTask+0x8>
 8001be8:	20000190 	.word	0x20000190
 8001bec:	08009a20 	.word	0x08009a20
 8001bf0:	20000160 	.word	0x20000160
 8001bf4:	20000158 	.word	0x20000158
 8001bf8:	2000015c 	.word	0x2000015c

08001bfc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a33      	ldr	r2, [pc, #204]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a2c      	ldr	r2, [pc, #176]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a25      	ldr	r2, [pc, #148]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <MX_GPIO_Init+0xec>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001c6c:	481f      	ldr	r0, [pc, #124]	; (8001cec <MX_GPIO_Init+0xf0>)
 8001c6e:	f001 f8e3 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c78:	481d      	ldr	r0, [pc, #116]	; (8001cf0 <MX_GPIO_Init+0xf4>)
 8001c7a:	f001 f8dd 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2120      	movs	r1, #32
 8001c82:	481c      	ldr	r0, [pc, #112]	; (8001cf4 <MX_GPIO_Init+0xf8>)
 8001c84:	f001 f8d8 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8001c88:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4812      	ldr	r0, [pc, #72]	; (8001cec <MX_GPIO_Init+0xf0>)
 8001ca2:	f000 ff45 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <MX_GPIO_Init+0xf4>)
 8001cc0:	f000 ff36 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <MX_GPIO_Init+0xf8>)
 8001cdc:	f000 ff28 	bl	8002b30 <HAL_GPIO_Init>

}
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <MX_I2C1_Init+0x54>)
 8001d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <MX_I2C1_Init+0x58>)
 8001d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d34:	4804      	ldr	r0, [pc, #16]	; (8001d48 <MX_I2C1_Init+0x50>)
 8001d36:	f001 f899 	bl	8002e6c <HAL_I2C_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d40:	f000 f8e2 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000454 	.word	0x20000454
 8001d4c:	40005400 	.word	0x40005400
 8001d50:	000186a0 	.word	0x000186a0

08001d54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <HAL_I2C_MspInit+0x84>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12b      	bne.n	8001dce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d92:	23c0      	movs	r3, #192	; 0xc0
 8001d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d96:	2312      	movs	r3, #18
 8001d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da2:	2304      	movs	r3, #4
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <HAL_I2C_MspInit+0x8c>)
 8001dae:	f000 febf 	bl	8002b30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400

08001de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de8:	f000 fcc8 	bl	800277c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dec:	f000 f812 	bl	8001e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df0:	f7ff ff04 	bl	8001bfc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001df4:	f000 f9bc 	bl	8002170 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001df8:	f000 fa34 	bl	8002264 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001dfc:	f7ff ff7c 	bl	8001cf8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001e00:	f000 fb90 	bl	8002524 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001e04:	f000 fbb8 	bl	8002578 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001e08:	f7ff fde8 	bl	80019dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e0c:	f004 fc38 	bl	8006680 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <main+0x2c>
	...

08001e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b094      	sub	sp, #80	; 0x50
 8001e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1a:	f107 0320 	add.w	r3, r7, #32
 8001e1e:	2230      	movs	r2, #48	; 0x30
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f006 fbc8 	bl	80085b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <SystemClock_Config+0xc8>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4a26      	ldr	r2, [pc, #152]	; (8001edc <SystemClock_Config+0xc8>)
 8001e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <SystemClock_Config+0xc8>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <SystemClock_Config+0xcc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <SystemClock_Config+0xcc>)
 8001e5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <SystemClock_Config+0xcc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e70:	2302      	movs	r3, #2
 8001e72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e78:	2310      	movs	r3, #16
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e80:	2300      	movs	r3, #0
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e84:	2308      	movs	r3, #8
 8001e86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e88:	2364      	movs	r3, #100	; 0x64
 8001e8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e90:	2304      	movs	r3, #4
 8001e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e94:	f107 0320 	add.w	r3, r7, #32
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 fc85 	bl	80037a8 <HAL_RCC_OscConfig>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ea4:	f000 f830 	bl	8001f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eac:	2302      	movs	r3, #2
 8001eae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 fee7 	bl	8003c98 <HAL_RCC_ClockConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ed0:	f000 f81a 	bl	8001f08 <Error_Handler>
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3750      	adds	r7, #80	; 0x50
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40007000 	.word	0x40007000

08001ee4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ef6:	f000 fc63 	bl	80027c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40000c00 	.word	0x40000c00

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <Error_Handler+0x8>
	...

08001f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_MspInit+0x54>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_MspInit+0x54>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_MspInit+0x54>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_MspInit+0x54>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <HAL_MspInit+0x54>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_MspInit+0x54>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	210f      	movs	r1, #15
 8001f56:	f06f 0001 	mvn.w	r0, #1
 8001f5a:	f000 fd2d 	bl	80029b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	4b33      	ldr	r3, [pc, #204]	; (8002050 <HAL_InitTick+0xe4>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	4a32      	ldr	r2, [pc, #200]	; (8002050 <HAL_InitTick+0xe4>)
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_InitTick+0xe4>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f98:	f107 0210 	add.w	r2, r7, #16
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 f858 	bl	8004058 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fb2:	f002 f829 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8001fb6:	6378      	str	r0, [r7, #52]	; 0x34
 8001fb8:	e004      	b.n	8001fc4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fba:	f002 f825 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc6:	4a23      	ldr	r2, [pc, #140]	; (8002054 <HAL_InitTick+0xe8>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	0c9b      	lsrs	r3, r3, #18
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001fd2:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_InitTick+0xec>)
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <HAL_InitTick+0xf0>)
 8001fd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <HAL_InitTick+0xec>)
 8001fda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fde:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <HAL_InitTick+0xec>)
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_InitTick+0xec>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_InitTick+0xec>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_InitTick+0xec>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001ff8:	4817      	ldr	r0, [pc, #92]	; (8002058 <HAL_InitTick+0xec>)
 8001ffa:	f002 f85f 	bl	80040bc <HAL_TIM_Base_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002004:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002008:	2b00      	cmp	r3, #0
 800200a:	d11b      	bne.n	8002044 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800200c:	4812      	ldr	r0, [pc, #72]	; (8002058 <HAL_InitTick+0xec>)
 800200e:	f002 f8a5 	bl	800415c <HAL_TIM_Base_Start_IT>
 8002012:	4603      	mov	r3, r0
 8002014:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002018:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800201c:	2b00      	cmp	r3, #0
 800201e:	d111      	bne.n	8002044 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002020:	2032      	movs	r0, #50	; 0x32
 8002022:	f000 fce5 	bl	80029f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b0f      	cmp	r3, #15
 800202a:	d808      	bhi.n	800203e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800202c:	2200      	movs	r2, #0
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	2032      	movs	r0, #50	; 0x32
 8002032:	f000 fcc1 	bl	80029b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_InitTick+0xf4>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e002      	b.n	8002044 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002044:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002048:	4618      	mov	r0, r3
 800204a:	3738      	adds	r7, #56	; 0x38
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	431bde83 	.word	0x431bde83
 8002058:	200004a8 	.word	0x200004a8
 800205c:	40000c00 	.word	0x40000c00
 8002060:	20000020 	.word	0x20000020

08002064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002068:	e7fe      	b.n	8002068 <NMI_Handler+0x4>

0800206a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <MemManage_Handler+0x4>

08002076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <UsageFault_Handler+0x4>

08002082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <TIM2_IRQHandler+0x10>)
 8002096:	f002 fb41 	bl	800471c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200004f4 	.word	0x200004f4

080020a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <USART1_IRQHandler+0x10>)
 80020aa:	f003 fbd3 	bl	8005854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000584 	.word	0x20000584

080020b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <TIM5_IRQHandler+0x10>)
 80020be:	f002 fb2d 	bl	800471c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200004a8 	.word	0x200004a8

080020cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <USART6_IRQHandler+0x10>)
 80020d2:	f003 fbbf 	bl	8005854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200005cc 	.word	0x200005cc

080020e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <_sbrk+0x5c>)
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <_sbrk+0x60>)
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <_sbrk+0x64>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <_sbrk+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d207      	bcs.n	8002120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002110:	f006 fac6 	bl	80086a0 <__errno>
 8002114:	4603      	mov	r3, r0
 8002116:	220c      	movs	r2, #12
 8002118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	e009      	b.n	8002134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <_sbrk+0x64>)
 8002130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20020000 	.word	0x20020000
 8002140:	00000400 	.word	0x00000400
 8002144:	200004f0 	.word	0x200004f0
 8002148:	200044b8 	.word	0x200044b8

0800214c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <SystemInit+0x20>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <SystemInit+0x20>)
 8002158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800215c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002176:	f107 0318 	add.w	r3, r7, #24
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800218e:	463b      	mov	r3, r7
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <MX_TIM2_Init+0xf0>)
 800219c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <MX_TIM2_Init+0xf0>)
 80021a4:	2263      	movs	r2, #99	; 0x63
 80021a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <MX_TIM2_Init+0xf0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80021ae:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <MX_TIM2_Init+0xf0>)
 80021b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <MX_TIM2_Init+0xf0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <MX_TIM2_Init+0xf0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021c2:	4827      	ldr	r0, [pc, #156]	; (8002260 <MX_TIM2_Init+0xf0>)
 80021c4:	f001 ff7a 	bl	80040bc <HAL_TIM_Base_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80021ce:	f7ff fe9b 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021d8:	f107 0318 	add.w	r3, r7, #24
 80021dc:	4619      	mov	r1, r3
 80021de:	4820      	ldr	r0, [pc, #128]	; (8002260 <MX_TIM2_Init+0xf0>)
 80021e0:	f002 fcea 	bl	8004bb8 <HAL_TIM_ConfigClockSource>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80021ea:	f7ff fe8d 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80021ee:	481c      	ldr	r0, [pc, #112]	; (8002260 <MX_TIM2_Init+0xf0>)
 80021f0:	f002 f920 	bl	8004434 <HAL_TIM_IC_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021fa:	f7ff fe85 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	4619      	mov	r1, r3
 800220c:	4814      	ldr	r0, [pc, #80]	; (8002260 <MX_TIM2_Init+0xf0>)
 800220e:	f003 f9f3 	bl	80055f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002218:	f7ff fe76 	bl	8001f08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800221c:	2300      	movs	r3, #0
 800221e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002220:	2301      	movs	r3, #1
 8002222:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800222c:	463b      	mov	r3, r7
 800222e:	2200      	movs	r2, #0
 8002230:	4619      	mov	r1, r3
 8002232:	480b      	ldr	r0, [pc, #44]	; (8002260 <MX_TIM2_Init+0xf0>)
 8002234:	f002 fb62 	bl	80048fc <HAL_TIM_IC_ConfigChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800223e:	f7ff fe63 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002242:	463b      	mov	r3, r7
 8002244:	2208      	movs	r2, #8
 8002246:	4619      	mov	r1, r3
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <MX_TIM2_Init+0xf0>)
 800224a:	f002 fb57 	bl	80048fc <HAL_TIM_IC_ConfigChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002254:	f7ff fe58 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	3728      	adds	r7, #40	; 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200004f4 	.word	0x200004f4

08002264 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08e      	sub	sp, #56	; 0x38
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002278:	f107 0320 	add.w	r3, r7, #32
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
 8002290:	615a      	str	r2, [r3, #20]
 8002292:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002294:	4b32      	ldr	r3, [pc, #200]	; (8002360 <MX_TIM3_Init+0xfc>)
 8002296:	4a33      	ldr	r2, [pc, #204]	; (8002364 <MX_TIM3_Init+0x100>)
 8002298:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000-1;
 800229a:	4b31      	ldr	r3, [pc, #196]	; (8002360 <MX_TIM3_Init+0xfc>)
 800229c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80022a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a2:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <MX_TIM3_Init+0xfc>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <MX_TIM3_Init+0xfc>)
 80022aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <MX_TIM3_Init+0xfc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <MX_TIM3_Init+0xfc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022bc:	4828      	ldr	r0, [pc, #160]	; (8002360 <MX_TIM3_Init+0xfc>)
 80022be:	f001 fefd 	bl	80040bc <HAL_TIM_Base_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80022c8:	f7ff fe1e 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d6:	4619      	mov	r1, r3
 80022d8:	4821      	ldr	r0, [pc, #132]	; (8002360 <MX_TIM3_Init+0xfc>)
 80022da:	f002 fc6d 	bl	8004bb8 <HAL_TIM_ConfigClockSource>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80022e4:	f7ff fe10 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022e8:	481d      	ldr	r0, [pc, #116]	; (8002360 <MX_TIM3_Init+0xfc>)
 80022ea:	f001 ff99 	bl	8004220 <HAL_TIM_PWM_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80022f4:	f7ff fe08 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002300:	f107 0320 	add.w	r3, r7, #32
 8002304:	4619      	mov	r1, r3
 8002306:	4816      	ldr	r0, [pc, #88]	; (8002360 <MX_TIM3_Init+0xfc>)
 8002308:	f003 f976 	bl	80055f8 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002312:	f7ff fdf9 	bl	8001f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002316:	2360      	movs	r3, #96	; 0x60
 8002318:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	2200      	movs	r2, #0
 800232a:	4619      	mov	r1, r3
 800232c:	480c      	ldr	r0, [pc, #48]	; (8002360 <MX_TIM3_Init+0xfc>)
 800232e:	f002 fb81 	bl	8004a34 <HAL_TIM_PWM_ConfigChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002338:	f7ff fde6 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2204      	movs	r2, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4807      	ldr	r0, [pc, #28]	; (8002360 <MX_TIM3_Init+0xfc>)
 8002344:	f002 fb76 	bl	8004a34 <HAL_TIM_PWM_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800234e:	f7ff fddb 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002352:	4803      	ldr	r0, [pc, #12]	; (8002360 <MX_TIM3_Init+0xfc>)
 8002354:	f000 f88c 	bl	8002470 <HAL_TIM_MspPostInit>

}
 8002358:	bf00      	nop
 800235a:	3738      	adds	r7, #56	; 0x38
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	2000053c 	.word	0x2000053c
 8002364:	40000400 	.word	0x40000400

08002368 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	; 0x30
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002388:	d153      	bne.n	8002432 <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a33      	ldr	r2, [pc, #204]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a2c      	ldr	r2, [pc, #176]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a25      	ldr	r2, [pc, #148]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023ee:	2301      	movs	r3, #1
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	4619      	mov	r1, r3
 80023f8:	481a      	ldr	r0, [pc, #104]	; (8002464 <HAL_TIM_Base_MspInit+0xfc>)
 80023fa:	f000 fb99 	bl	8002b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002410:	2301      	movs	r3, #1
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	4619      	mov	r1, r3
 800241a:	4813      	ldr	r0, [pc, #76]	; (8002468 <HAL_TIM_Base_MspInit+0x100>)
 800241c:	f000 fb88 	bl	8002b30 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2105      	movs	r1, #5
 8002424:	201c      	movs	r0, #28
 8002426:	f000 fac7 	bl	80029b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800242a:	201c      	movs	r0, #28
 800242c:	f000 fae0 	bl	80029f0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002430:	e012      	b.n	8002458 <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM3)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a0d      	ldr	r2, [pc, #52]	; (800246c <HAL_TIM_Base_MspInit+0x104>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d10d      	bne.n	8002458 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <HAL_TIM_Base_MspInit+0xf8>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	bf00      	nop
 800245a:	3730      	adds	r7, #48	; 0x30
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	40020000 	.word	0x40020000
 8002468:	40020400 	.word	0x40020400
 800246c:	40000400 	.word	0x40000400

08002470 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a21      	ldr	r2, [pc, #132]	; (8002514 <HAL_TIM_MspPostInit+0xa4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d13b      	bne.n	800250a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_TIM_MspPostInit+0xa8>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_TIM_MspPostInit+0xa8>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_TIM_MspPostInit+0xa8>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_TIM_MspPostInit+0xa8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_TIM_MspPostInit+0xa8>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_TIM_MspPostInit+0xa8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024da:	2302      	movs	r3, #2
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <HAL_TIM_MspPostInit+0xac>)
 80024e6:	f000 fb23 	bl	8002b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024ea:	2340      	movs	r3, #64	; 0x40
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024fa:	2302      	movs	r3, #2
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4806      	ldr	r0, [pc, #24]	; (8002520 <HAL_TIM_MspPostInit+0xb0>)
 8002506:	f000 fb13 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	; 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40000400 	.word	0x40000400
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020800 	.word	0x40020800

08002524 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800252a:	4a12      	ldr	r2, [pc, #72]	; (8002574 <MX_USART1_UART_Init+0x50>)
 800252c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002530:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_USART1_UART_Init+0x4c>)
 800255c:	f003 f8ce 	bl	80056fc <HAL_UART_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002566:	f7ff fccf 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000584 	.word	0x20000584
 8002574:	40011000 	.word	0x40011000

08002578 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <MX_USART6_UART_Init+0x4c>)
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <MX_USART6_UART_Init+0x50>)
 8002580:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <MX_USART6_UART_Init+0x4c>)
 8002584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002588:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <MX_USART6_UART_Init+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <MX_USART6_UART_Init+0x4c>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <MX_USART6_UART_Init+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <MX_USART6_UART_Init+0x4c>)
 800259e:	220c      	movs	r2, #12
 80025a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <MX_USART6_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <MX_USART6_UART_Init+0x4c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_USART6_UART_Init+0x4c>)
 80025b0:	f003 f8a4 	bl	80056fc <HAL_UART_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80025ba:	f7ff fca5 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200005cc 	.word	0x200005cc
 80025c8:	40011400 	.word	0x40011400

080025cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 031c 	add.w	r3, r7, #28
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <HAL_UART_MspInit+0x148>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d135      	bne.n	800265a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	4b49      	ldr	r3, [pc, #292]	; (8002718 <HAL_UART_MspInit+0x14c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4a48      	ldr	r2, [pc, #288]	; (8002718 <HAL_UART_MspInit+0x14c>)
 80025f8:	f043 0310 	orr.w	r3, r3, #16
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_UART_MspInit+0x14c>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	4b42      	ldr	r3, [pc, #264]	; (8002718 <HAL_UART_MspInit+0x14c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a41      	ldr	r2, [pc, #260]	; (8002718 <HAL_UART_MspInit+0x14c>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_UART_MspInit+0x14c>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002626:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002638:	2307      	movs	r3, #7
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	4619      	mov	r1, r3
 8002642:	4836      	ldr	r0, [pc, #216]	; (800271c <HAL_UART_MspInit+0x150>)
 8002644:	f000 fa74 	bl	8002b30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2105      	movs	r1, #5
 800264c:	2025      	movs	r0, #37	; 0x25
 800264e:	f000 f9b3 	bl	80029b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002652:	2025      	movs	r0, #37	; 0x25
 8002654:	f000 f9cc 	bl	80029f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002658:	e057      	b.n	800270a <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART6)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a30      	ldr	r2, [pc, #192]	; (8002720 <HAL_UART_MspInit+0x154>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d152      	bne.n	800270a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_UART_MspInit+0x14c>)
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <HAL_UART_MspInit+0x14c>)
 800266e:	f043 0320 	orr.w	r3, r3, #32
 8002672:	6453      	str	r3, [r2, #68]	; 0x44
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <HAL_UART_MspInit+0x14c>)
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_UART_MspInit+0x14c>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	4a23      	ldr	r2, [pc, #140]	; (8002718 <HAL_UART_MspInit+0x14c>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6313      	str	r3, [r2, #48]	; 0x30
 8002690:	4b21      	ldr	r3, [pc, #132]	; (8002718 <HAL_UART_MspInit+0x14c>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_UART_MspInit+0x14c>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_UART_MspInit+0x14c>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6313      	str	r3, [r2, #48]	; 0x30
 80026ac:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <HAL_UART_MspInit+0x14c>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026c8:	2308      	movs	r3, #8
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4619      	mov	r1, r3
 80026d2:	4814      	ldr	r0, [pc, #80]	; (8002724 <HAL_UART_MspInit+0x158>)
 80026d4:	f000 fa2c 	bl	8002b30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026ea:	2308      	movs	r3, #8
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4619      	mov	r1, r3
 80026f4:	4809      	ldr	r0, [pc, #36]	; (800271c <HAL_UART_MspInit+0x150>)
 80026f6:	f000 fa1b 	bl	8002b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2105      	movs	r1, #5
 80026fe:	2047      	movs	r0, #71	; 0x47
 8002700:	f000 f95a 	bl	80029b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002704:	2047      	movs	r0, #71	; 0x47
 8002706:	f000 f973 	bl	80029f0 <HAL_NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3730      	adds	r7, #48	; 0x30
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40011000 	.word	0x40011000
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000
 8002720:	40011400 	.word	0x40011400
 8002724:	40020800 	.word	0x40020800

08002728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8002728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002760 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800272c:	f7ff fd0e 	bl	800214c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002730:	480c      	ldr	r0, [pc, #48]	; (8002764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002732:	490d      	ldr	r1, [pc, #52]	; (8002768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002734:	4a0d      	ldr	r2, [pc, #52]	; (800276c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002738:	e002      	b.n	8002740 <LoopCopyDataInit>

0800273a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800273c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273e:	3304      	adds	r3, #4

08002740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002744:	d3f9      	bcc.n	800273a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002748:	4c0a      	ldr	r4, [pc, #40]	; (8002774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800274c:	e001      	b.n	8002752 <LoopFillZerobss>

0800274e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002750:	3204      	adds	r2, #4

08002752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002754:	d3fb      	bcc.n	800274e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002756:	f005 ffa9 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800275a:	f7ff fb43 	bl	8001de4 <main>
  bx  lr    
 800275e:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8002760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002768:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800276c:	08009bbc 	.word	0x08009bbc
  ldr r2, =_sbss
 8002770:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002774:	200044b4 	.word	0x200044b4

08002778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC_IRQHandler>
	...

0800277c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <HAL_Init+0x40>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_Init+0x40>)
 8002792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a07      	ldr	r2, [pc, #28]	; (80027bc <HAL_Init+0x40>)
 800279e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a4:	2003      	movs	r0, #3
 80027a6:	f000 f8fc 	bl	80029a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027aa:	200f      	movs	r0, #15
 80027ac:	f7ff fbde 	bl	8001f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b0:	f7ff fbb0 	bl	8001f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023c00 	.word	0x40023c00

080027c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x20>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x24>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_IncTick+0x24>)
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000024 	.word	0x20000024
 80027e4:	20000614 	.word	0x20000614

080027e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return uwTick;
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <HAL_GetTick+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000614 	.word	0x20000614

08002800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff ffee 	bl	80027e8 <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d005      	beq.n	8002826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_Delay+0x44>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002826:	bf00      	nop
 8002828:	f7ff ffde 	bl	80027e8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	429a      	cmp	r2, r3
 8002836:	d8f7      	bhi.n	8002828 <HAL_Delay+0x28>
  {
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000024 	.word	0x20000024

08002848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002864:	4013      	ands	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	f003 0307 	and.w	r3, r3, #7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	db0b      	blt.n	80028d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4907      	ldr	r1, [pc, #28]	; (80028e4 <__NVIC_EnableIRQ+0x38>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2001      	movs	r0, #1
 80028ce:	fa00 f202 	lsl.w	r2, r0, r2
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e100 	.word	0xe000e100

080028e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	db0a      	blt.n	8002912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	490c      	ldr	r1, [pc, #48]	; (8002934 <__NVIC_SetPriority+0x4c>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	440b      	add	r3, r1
 800290c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002910:	e00a      	b.n	8002928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4908      	ldr	r1, [pc, #32]	; (8002938 <__NVIC_SetPriority+0x50>)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3b04      	subs	r3, #4
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	440b      	add	r3, r1
 8002926:	761a      	strb	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f1c3 0307 	rsb	r3, r3, #7
 8002956:	2b04      	cmp	r3, #4
 8002958:	bf28      	it	cs
 800295a:	2304      	movcs	r3, #4
 800295c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3304      	adds	r3, #4
 8002962:	2b06      	cmp	r3, #6
 8002964:	d902      	bls.n	800296c <NVIC_EncodePriority+0x30>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3b03      	subs	r3, #3
 800296a:	e000      	b.n	800296e <NVIC_EncodePriority+0x32>
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	f04f 32ff 	mov.w	r2, #4294967295
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	401a      	ands	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002984:	f04f 31ff 	mov.w	r1, #4294967295
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43d9      	mvns	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	4313      	orrs	r3, r2
         );
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ff4c 	bl	8002848 <__NVIC_SetPriorityGrouping>
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ca:	f7ff ff61 	bl	8002890 <__NVIC_GetPriorityGrouping>
 80029ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	6978      	ldr	r0, [r7, #20]
 80029d6:	f7ff ffb1 	bl	800293c <NVIC_EncodePriority>
 80029da:	4602      	mov	r2, r0
 80029dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff80 	bl	80028e8 <__NVIC_SetPriority>
}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff54 	bl	80028ac <__NVIC_EnableIRQ>
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a1a:	f7ff fee5 	bl	80027e8 <HAL_GetTick>
 8002a1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d008      	beq.n	8002a3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e052      	b.n	8002ae4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0216 	bic.w	r2, r2, #22
 8002a4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <HAL_DMA_Abort+0x62>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0208 	bic.w	r2, r2, #8
 8002a7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a8e:	e013      	b.n	8002ab8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a90:	f7ff feaa 	bl	80027e8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b05      	cmp	r3, #5
 8002a9c:	d90c      	bls.n	8002ab8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e015      	b.n	8002ae4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e4      	bne.n	8002a90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	223f      	movs	r2, #63	; 0x3f
 8002acc:	409a      	lsls	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d004      	beq.n	8002b0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e00c      	b.n	8002b24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2205      	movs	r2, #5
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0201 	bic.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e159      	b.n	8002e00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f040 8148 	bne.w	8002dfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d005      	beq.n	8002b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d130      	bne.n	8002be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb8:	2201      	movs	r2, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 0201 	and.w	r2, r3, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d017      	beq.n	8002c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d123      	bne.n	8002c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0203 	and.w	r2, r3, #3
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a2 	beq.w	8002dfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <HAL_GPIO_Init+0x2e8>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4a56      	ldr	r2, [pc, #344]	; (8002e18 <HAL_GPIO_Init+0x2e8>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc6:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <HAL_GPIO_Init+0x2e8>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cd2:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_GPIO_Init+0x2ec>)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	220f      	movs	r2, #15
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a49      	ldr	r2, [pc, #292]	; (8002e20 <HAL_GPIO_Init+0x2f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d019      	beq.n	8002d32 <HAL_GPIO_Init+0x202>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <HAL_GPIO_Init+0x2f4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_GPIO_Init+0x1fe>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a47      	ldr	r2, [pc, #284]	; (8002e28 <HAL_GPIO_Init+0x2f8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00d      	beq.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a46      	ldr	r2, [pc, #280]	; (8002e2c <HAL_GPIO_Init+0x2fc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d007      	beq.n	8002d26 <HAL_GPIO_Init+0x1f6>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a45      	ldr	r2, [pc, #276]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_GPIO_Init+0x1f2>
 8002d1e:	2304      	movs	r3, #4
 8002d20:	e008      	b.n	8002d34 <HAL_GPIO_Init+0x204>
 8002d22:	2307      	movs	r3, #7
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x204>
 8002d26:	2303      	movs	r3, #3
 8002d28:	e004      	b.n	8002d34 <HAL_GPIO_Init+0x204>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_Init+0x204>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_GPIO_Init+0x204>
 8002d32:	2300      	movs	r3, #0
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	f002 0203 	and.w	r2, r2, #3
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	4093      	lsls	r3, r2
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d44:	4935      	ldr	r1, [pc, #212]	; (8002e1c <HAL_GPIO_Init+0x2ec>)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d76:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da0:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002da6:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dca:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df4:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b0f      	cmp	r3, #15
 8002e04:	f67f aea2 	bls.w	8002b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40013800 	.word	0x40013800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	40020800 	.word	0x40020800
 8002e2c:	40020c00 	.word	0x40020c00
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40013c00 	.word	0x40013c00

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
 8002e44:	4613      	mov	r3, r2
 8002e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e54:	e003      	b.n	8002e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	041a      	lsls	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	619a      	str	r2, [r3, #24]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e12b      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe ff5e 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f001 f89a 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a81      	ldr	r2, [pc, #516]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d807      	bhi.n	8002ef0 <HAL_I2C_Init+0x84>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a80      	ldr	r2, [pc, #512]	; (80030e4 <HAL_I2C_Init+0x278>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	bf94      	ite	ls
 8002ee8:	2301      	movls	r3, #1
 8002eea:	2300      	movhi	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e006      	b.n	8002efe <HAL_I2C_Init+0x92>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a7d      	ldr	r2, [pc, #500]	; (80030e8 <HAL_I2C_Init+0x27c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	bf94      	ite	ls
 8002ef8:	2301      	movls	r3, #1
 8002efa:	2300      	movhi	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0e7      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a78      	ldr	r2, [pc, #480]	; (80030ec <HAL_I2C_Init+0x280>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a6a      	ldr	r2, [pc, #424]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d802      	bhi.n	8002f40 <HAL_I2C_Init+0xd4>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	e009      	b.n	8002f54 <HAL_I2C_Init+0xe8>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	4a69      	ldr	r2, [pc, #420]	; (80030f0 <HAL_I2C_Init+0x284>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	3301      	adds	r3, #1
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	495c      	ldr	r1, [pc, #368]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002f70:	428b      	cmp	r3, r1
 8002f72:	d819      	bhi.n	8002fa8 <HAL_I2C_Init+0x13c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e59      	subs	r1, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f88:	400b      	ands	r3, r1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_I2C_Init+0x138>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e59      	subs	r1, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa2:	e051      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e04f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <HAL_I2C_Init+0x168>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e012      	b.n	8002ffa <HAL_I2C_Init+0x18e>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x196>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e022      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10e      	bne.n	8003028 <HAL_I2C_Init+0x1bc>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1e58      	subs	r0, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	440b      	add	r3, r1
 8003018:	fbb0 f3f3 	udiv	r3, r0, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	0099      	lsls	r1, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6809      	ldr	r1, [r1, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6911      	ldr	r1, [r2, #16]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	430b      	orrs	r3, r1
 800308a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	000186a0 	.word	0x000186a0
 80030e4:	001e847f 	.word	0x001e847f
 80030e8:	003d08ff 	.word	0x003d08ff
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	10624dd3 	.word	0x10624dd3

080030f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	461a      	mov	r2, r3
 8003100:	460b      	mov	r3, r1
 8003102:	817b      	strh	r3, [r7, #10]
 8003104:	4613      	mov	r3, r2
 8003106:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff fb6e 	bl	80027e8 <HAL_GetTick>
 800310c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b20      	cmp	r3, #32
 8003118:	f040 80e0 	bne.w	80032dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2319      	movs	r3, #25
 8003122:	2201      	movs	r2, #1
 8003124:	4970      	ldr	r1, [pc, #448]	; (80032e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f964 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
 8003134:	e0d3      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_I2C_Master_Transmit+0x50>
 8003140:	2302      	movs	r3, #2
 8003142:	e0cc      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d007      	beq.n	800316a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003178:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2221      	movs	r2, #33	; 0x21
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2210      	movs	r2, #16
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	893a      	ldrh	r2, [r7, #8]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a50      	ldr	r2, [pc, #320]	; (80032ec <HAL_I2C_Master_Transmit+0x1f8>)
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f89c 	bl	80032f0 <I2C_MasterRequestWrite>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e08d      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031d8:	e066      	b.n	80032a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	6a39      	ldr	r1, [r7, #32]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fa22 	bl	8003628 <I2C_WaitOnTXEFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d107      	bne.n	8003202 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003200:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06b      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b04      	cmp	r3, #4
 8003242:	d11b      	bne.n	800327c <HAL_I2C_Master_Transmit+0x188>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	d017      	beq.n	800327c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	6a39      	ldr	r1, [r7, #32]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fa19 	bl	80036b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	2b04      	cmp	r3, #4
 8003292:	d107      	bne.n	80032a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e01a      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d194      	bne.n	80031da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	00100002 	.word	0x00100002
 80032ec:	ffff0000 	.word	0xffff0000

080032f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d006      	beq.n	800331a <I2C_MasterRequestWrite+0x2a>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d003      	beq.n	800331a <I2C_MasterRequestWrite+0x2a>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003318:	d108      	bne.n	800332c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e00b      	b.n	8003344 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	2b12      	cmp	r3, #18
 8003332:	d107      	bne.n	8003344 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f84f 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336a:	d103      	bne.n	8003374 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e035      	b.n	80033e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003380:	d108      	bne.n	8003394 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	e01b      	b.n	80033cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003394:	897b      	ldrh	r3, [r7, #10]
 8003396:	11db      	asrs	r3, r3, #7
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f003 0306 	and.w	r3, r3, #6
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f063 030f 	orn	r3, r3, #15
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <I2C_MasterRequestWrite+0xfc>)
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f898 	bl	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e010      	b.n	80033e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <I2C_MasterRequestWrite+0x100>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f888 	bl	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	00010008 	.word	0x00010008
 80033f0:	00010002 	.word	0x00010002

080033f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003404:	e048      	b.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d044      	beq.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7ff f9eb 	bl	80027e8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d139      	bne.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d10d      	bne.n	800344a <I2C_WaitOnFlagUntilTimeout+0x56>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	43da      	mvns	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4013      	ands	r3, r2
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	e00c      	b.n	8003464 <I2C_WaitOnFlagUntilTimeout+0x70>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	43da      	mvns	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4013      	ands	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	429a      	cmp	r2, r3
 8003468:	d116      	bne.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e023      	b.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	0c1b      	lsrs	r3, r3, #16
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10d      	bne.n	80034be <I2C_WaitOnFlagUntilTimeout+0xca>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	43da      	mvns	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4013      	ands	r3, r2
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	e00c      	b.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	43da      	mvns	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d093      	beq.n	8003406 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f6:	e071      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d123      	bne.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003520:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0204 	orr.w	r2, r3, #4
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e067      	b.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	d041      	beq.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003558:	f7ff f946 	bl	80027e8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d302      	bcc.n	800356e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d136      	bne.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10c      	bne.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	43da      	mvns	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4013      	ands	r3, r2
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	bf14      	ite	ne
 800358a:	2301      	movne	r3, #1
 800358c:	2300      	moveq	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e00b      	b.n	80035aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e021      	b.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10c      	bne.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	43da      	mvns	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e00b      	b.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	f47f af6d 	bne.w	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003634:	e034      	b.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f886 	bl	8003748 <I2C_IsAcknowledgeFailed>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e034      	b.n	80036b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d028      	beq.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7ff f8cb 	bl	80027e8 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11d      	bne.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d016      	beq.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e007      	b.n	80036b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d1c3      	bne.n	8003636 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c4:	e034      	b.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f83e 	bl	8003748 <I2C_IsAcknowledgeFailed>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e034      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d028      	beq.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7ff f883 	bl	80027e8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11d      	bne.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d016      	beq.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e007      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d1c3      	bne.n	80036c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375e:	d11b      	bne.n	8003798 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003768:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0204 	orr.w	r2, r3, #4
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e267      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d075      	beq.n	80038b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c6:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d00c      	beq.n	80037ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d2:	4b85      	ldr	r3, [pc, #532]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d112      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037de:	4b82      	ldr	r3, [pc, #520]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4b7e      	ldr	r3, [pc, #504]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05b      	beq.n	80038b0 <HAL_RCC_OscConfig+0x108>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d157      	bne.n	80038b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e242      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d106      	bne.n	800381c <HAL_RCC_OscConfig+0x74>
 800380e:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a75      	ldr	r2, [pc, #468]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e01d      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x98>
 8003826:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6f      	ldr	r2, [pc, #444]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6c      	ldr	r2, [pc, #432]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 8003840:	4b69      	ldr	r3, [pc, #420]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a68      	ldr	r2, [pc, #416]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b66      	ldr	r3, [pc, #408]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe ffc2 	bl	80027e8 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe ffbe 	bl	80027e8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e207      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0xc0>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fe ffae 	bl	80027e8 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003890:	f7fe ffaa 	bl	80027e8 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1f3      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	4b51      	ldr	r3, [pc, #324]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0xe8>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d063      	beq.n	8003986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038be:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d11c      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d6:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e1c7      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4937      	ldr	r1, [pc, #220]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	e03a      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_OscConfig+0x244>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fe ff63 	bl	80027e8 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003926:	f7fe ff5f 	bl	80027e8 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1a8      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4925      	ldr	r1, [pc, #148]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
 8003958:	e015      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <HAL_RCC_OscConfig+0x244>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe ff42 	bl	80027e8 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003968:	f7fe ff3e 	bl	80027e8 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e187      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d036      	beq.n	8003a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_RCC_OscConfig+0x248>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fe ff22 	bl	80027e8 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fe ff1e 	bl	80027e8 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e167      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x200>
 80039c6:	e01b      	b.n	8003a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_OscConfig+0x248>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fe ff0b 	bl	80027e8 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	e00e      	b.n	80039f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fe ff07 	bl	80027e8 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d907      	bls.n	80039f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e150      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
 80039e8:	40023800 	.word	0x40023800
 80039ec:	42470000 	.word	0x42470000
 80039f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ea      	bne.n	80039d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8097 	beq.w	8003b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b81      	ldr	r3, [pc, #516]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10f      	bne.n	8003a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	4b7d      	ldr	r3, [pc, #500]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2e:	4b7a      	ldr	r3, [pc, #488]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3e:	4b77      	ldr	r3, [pc, #476]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d118      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4a:	4b74      	ldr	r3, [pc, #464]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a73      	ldr	r2, [pc, #460]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a56:	f7fe fec7 	bl	80027e8 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5e:	f7fe fec3 	bl	80027e8 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e10c      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d106      	bne.n	8003a92 <HAL_RCC_OscConfig+0x2ea>
 8003a84:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a63      	ldr	r2, [pc, #396]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a90:	e01c      	b.n	8003acc <HAL_RCC_OscConfig+0x324>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x30c>
 8003a9a:	4b5f      	ldr	r3, [pc, #380]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a5e      	ldr	r2, [pc, #376]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	f043 0304 	orr.w	r3, r3, #4
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa6:	4b5c      	ldr	r3, [pc, #368]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a5b      	ldr	r2, [pc, #364]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0x324>
 8003ab4:	4b58      	ldr	r3, [pc, #352]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a57      	ldr	r2, [pc, #348]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac0:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a54      	ldr	r2, [pc, #336]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	f023 0304 	bic.w	r3, r3, #4
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fe88 	bl	80027e8 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fe fe84 	bl	80027e8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e0cb      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ee      	beq.n	8003adc <HAL_RCC_OscConfig+0x334>
 8003afe:	e014      	b.n	8003b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b00:	f7fe fe72 	bl	80027e8 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe fe6e 	bl	80027e8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0b5      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ee      	bne.n	8003b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80a1 	beq.w	8003c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d05c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d141      	bne.n	8003bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fe fe42 	bl	80027e8 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fe fe3e 	bl	80027e8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e087      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	491b      	ldr	r1, [pc, #108]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb6:	f7fe fe17 	bl	80027e8 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbe:	f7fe fe13 	bl	80027e8 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e05c      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x416>
 8003bdc:	e054      	b.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe fe00 	bl	80027e8 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fe fdfc 	bl	80027e8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e045      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x444>
 8003c0a:	e03d      	b.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d107      	bne.n	8003c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e038      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x4ec>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d028      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d121      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d11a      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d111      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0cc      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b68      	ldr	r3, [pc, #416]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b8      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cec:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	494d      	ldr	r1, [pc, #308]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d044      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e07f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e067      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4934      	ldr	r1, [pc, #208]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d88:	f7fe fd2e 	bl	80027e8 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fe fd2a 	bl	80027e8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e04f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d20c      	bcs.n	8003de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e032      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4916      	ldr	r1, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	490e      	ldr	r1, [pc, #56]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e1e:	f000 f821 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 8003e22:	4602      	mov	r2, r0
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	490a      	ldr	r1, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	5ccb      	ldrb	r3, [r1, r3]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f894 	bl	8001f6c <HAL_InitTick>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023c00 	.word	0x40023c00
 8003e54:	40023800 	.word	0x40023800
 8003e58:	08009a44 	.word	0x08009a44
 8003e5c:	2000001c 	.word	0x2000001c
 8003e60:	20000020 	.word	0x20000020

08003e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e68:	b090      	sub	sp, #64	; 0x40
 8003e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e70:	2300      	movs	r3, #0
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e74:	2300      	movs	r3, #0
 8003e76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e7c:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d00d      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	f200 80a1 	bhi.w	8003fd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x34>
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e96:	e09b      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e98:	4b53      	ldr	r3, [pc, #332]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e9c:	e09b      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e9e:	4b53      	ldr	r3, [pc, #332]	; (8003fec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ea0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ea2:	e098      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea4:	4b4f      	ldr	r3, [pc, #316]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eae:	4b4d      	ldr	r3, [pc, #308]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d028      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eba:	4b4a      	ldr	r3, [pc, #296]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	099b      	lsrs	r3, r3, #6
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	623b      	str	r3, [r7, #32]
 8003ec4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4b47      	ldr	r3, [pc, #284]	; (8003fec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ed0:	fb03 f201 	mul.w	r2, r3, r1
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	fb00 f303 	mul.w	r3, r0, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	4a43      	ldr	r2, [pc, #268]	; (8003fec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ede:	fba0 1202 	umull	r1, r2, r0, r2
 8003ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee4:	460a      	mov	r2, r1
 8003ee6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eea:	4413      	add	r3, r2
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	61fa      	str	r2, [r7, #28]
 8003ef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003efa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003efe:	f7fc fdb5 	bl	8000a6c <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4613      	mov	r3, r2
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f0a:	e053      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0c:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	2200      	movs	r2, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	617a      	str	r2, [r7, #20]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f1e:	f04f 0b00 	mov.w	fp, #0
 8003f22:	4652      	mov	r2, sl
 8003f24:	465b      	mov	r3, fp
 8003f26:	f04f 0000 	mov.w	r0, #0
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	0159      	lsls	r1, r3, #5
 8003f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f34:	0150      	lsls	r0, r2, #5
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f3e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f56:	ebb2 0408 	subs.w	r4, r2, r8
 8003f5a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	00eb      	lsls	r3, r5, #3
 8003f68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f6c:	00e2      	lsls	r2, r4, #3
 8003f6e:	4614      	mov	r4, r2
 8003f70:	461d      	mov	r5, r3
 8003f72:	eb14 030a 	adds.w	r3, r4, sl
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	eb45 030b 	adc.w	r3, r5, fp
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	028b      	lsls	r3, r1, #10
 8003f8e:	4621      	mov	r1, r4
 8003f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f94:	4621      	mov	r1, r4
 8003f96:	028a      	lsls	r2, r1, #10
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	60fa      	str	r2, [r7, #12]
 8003fa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fa8:	f7fc fd60 	bl	8000a6c <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fce:	e002      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3740      	adds	r7, #64	; 0x40
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	00f42400 	.word	0x00f42400
 8003fec:	017d7840 	.word	0x017d7840

08003ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000001c 	.word	0x2000001c

08004008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800400c:	f7ff fff0 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	0a9b      	lsrs	r3, r3, #10
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4903      	ldr	r1, [pc, #12]	; (800402c <HAL_RCC_GetPCLK1Freq+0x24>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40023800 	.word	0x40023800
 800402c:	08009a54 	.word	0x08009a54

08004030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004034:	f7ff ffdc 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	0b5b      	lsrs	r3, r3, #13
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	4903      	ldr	r1, [pc, #12]	; (8004054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004046:	5ccb      	ldrb	r3, [r1, r3]
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40023800 	.word	0x40023800
 8004054:	08009a54 	.word	0x08009a54

08004058 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	220f      	movs	r2, #15
 8004066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004068:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <HAL_RCC_GetClockConfig+0x5c>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0203 	and.w	r2, r3, #3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <HAL_RCC_GetClockConfig+0x5c>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_RCC_GetClockConfig+0x5c>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	08db      	lsrs	r3, r3, #3
 8004092:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <HAL_RCC_GetClockConfig+0x60>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0207 	and.w	r2, r3, #7
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	601a      	str	r2, [r3, #0]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40023c00 	.word	0x40023c00

080040bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e041      	b.n	8004152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fe f940 	bl	8002368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4610      	mov	r0, r2
 80040fc:	f000 fe86 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d001      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e044      	b.n	80041fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1e      	ldr	r2, [pc, #120]	; (800420c <HAL_TIM_Base_Start_IT+0xb0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x6c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419e:	d013      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x6c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <HAL_TIM_Base_Start_IT+0xb4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x6c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_TIM_Base_Start_IT+0xb8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d009      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x6c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_TIM_Base_Start_IT+0xbc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x6c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <HAL_TIM_Base_Start_IT+0xc0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d111      	bne.n	80041ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d010      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ea:	e007      	b.n	80041fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40014000 	.word	0x40014000

08004220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e041      	b.n	80042b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f839 	bl	80042be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f000 fdd4 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <HAL_TIM_PWM_Start+0x24>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	bf14      	ite	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	2300      	moveq	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	e022      	b.n	800433e <HAL_TIM_PWM_Start+0x6a>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d109      	bne.n	8004312 <HAL_TIM_PWM_Start+0x3e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	bf14      	ite	ne
 800430a:	2301      	movne	r3, #1
 800430c:	2300      	moveq	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	e015      	b.n	800433e <HAL_TIM_PWM_Start+0x6a>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d109      	bne.n	800432c <HAL_TIM_PWM_Start+0x58>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	bf14      	ite	ne
 8004324:	2301      	movne	r3, #1
 8004326:	2300      	moveq	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	e008      	b.n	800433e <HAL_TIM_PWM_Start+0x6a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e068      	b.n	8004418 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Start+0x82>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004354:	e013      	b.n	800437e <HAL_TIM_PWM_Start+0xaa>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0x92>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004364:	e00b      	b.n	800437e <HAL_TIM_PWM_Start+0xaa>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_Start+0xa2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004374:	e003      	b.n	800437e <HAL_TIM_PWM_Start+0xaa>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	6839      	ldr	r1, [r7, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f001 f910 	bl	80055ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a23      	ldr	r2, [pc, #140]	; (8004420 <HAL_TIM_PWM_Start+0x14c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d107      	bne.n	80043a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <HAL_TIM_PWM_Start+0x14c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <HAL_TIM_PWM_Start+0x10e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d013      	beq.n	80043e2 <HAL_TIM_PWM_Start+0x10e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_TIM_PWM_Start+0x150>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_TIM_PWM_Start+0x10e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a17      	ldr	r2, [pc, #92]	; (8004428 <HAL_TIM_PWM_Start+0x154>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_TIM_PWM_Start+0x10e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a16      	ldr	r2, [pc, #88]	; (800442c <HAL_TIM_PWM_Start+0x158>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_TIM_PWM_Start+0x10e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a14      	ldr	r2, [pc, #80]	; (8004430 <HAL_TIM_PWM_Start+0x15c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d111      	bne.n	8004406 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b06      	cmp	r3, #6
 80043f2:	d010      	beq.n	8004416 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004404:	e007      	b.n	8004416 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40010000 	.word	0x40010000
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40014000 	.word	0x40014000

08004434 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e041      	b.n	80044ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f839 	bl	80044d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f000 fcca 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_IC_Start_IT+0x1e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e013      	b.n	800452e <HAL_TIM_IC_Start_IT+0x46>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d104      	bne.n	8004516 <HAL_TIM_IC_Start_IT+0x2e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004512:	b2db      	uxtb	r3, r3
 8004514:	e00b      	b.n	800452e <HAL_TIM_IC_Start_IT+0x46>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d104      	bne.n	8004526 <HAL_TIM_IC_Start_IT+0x3e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004522:	b2db      	uxtb	r3, r3
 8004524:	e003      	b.n	800452e <HAL_TIM_IC_Start_IT+0x46>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800452c:	b2db      	uxtb	r3, r3
 800452e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <HAL_TIM_IC_Start_IT+0x58>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e013      	b.n	8004568 <HAL_TIM_IC_Start_IT+0x80>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b04      	cmp	r3, #4
 8004544:	d104      	bne.n	8004550 <HAL_TIM_IC_Start_IT+0x68>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800454c:	b2db      	uxtb	r3, r3
 800454e:	e00b      	b.n	8004568 <HAL_TIM_IC_Start_IT+0x80>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b08      	cmp	r3, #8
 8004554:	d104      	bne.n	8004560 <HAL_TIM_IC_Start_IT+0x78>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e003      	b.n	8004568 <HAL_TIM_IC_Start_IT+0x80>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004566:	b2db      	uxtb	r3, r3
 8004568:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800456a:	7bbb      	ldrb	r3, [r7, #14]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d102      	bne.n	8004576 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004570:	7b7b      	ldrb	r3, [r7, #13]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d001      	beq.n	800457a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0c2      	b.n	8004700 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <HAL_TIM_IC_Start_IT+0xa2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004588:	e013      	b.n	80045b2 <HAL_TIM_IC_Start_IT+0xca>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b04      	cmp	r3, #4
 800458e:	d104      	bne.n	800459a <HAL_TIM_IC_Start_IT+0xb2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004598:	e00b      	b.n	80045b2 <HAL_TIM_IC_Start_IT+0xca>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d104      	bne.n	80045aa <HAL_TIM_IC_Start_IT+0xc2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a8:	e003      	b.n	80045b2 <HAL_TIM_IC_Start_IT+0xca>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <HAL_TIM_IC_Start_IT+0xda>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c0:	e013      	b.n	80045ea <HAL_TIM_IC_Start_IT+0x102>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_IC_Start_IT+0xea>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045d0:	e00b      	b.n	80045ea <HAL_TIM_IC_Start_IT+0x102>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d104      	bne.n	80045e2 <HAL_TIM_IC_Start_IT+0xfa>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e0:	e003      	b.n	80045ea <HAL_TIM_IC_Start_IT+0x102>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	d841      	bhi.n	8004674 <HAL_TIM_IC_Start_IT+0x18c>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <HAL_TIM_IC_Start_IT+0x110>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800462d 	.word	0x0800462d
 80045fc:	08004675 	.word	0x08004675
 8004600:	08004675 	.word	0x08004675
 8004604:	08004675 	.word	0x08004675
 8004608:	0800463f 	.word	0x0800463f
 800460c:	08004675 	.word	0x08004675
 8004610:	08004675 	.word	0x08004675
 8004614:	08004675 	.word	0x08004675
 8004618:	08004651 	.word	0x08004651
 800461c:	08004675 	.word	0x08004675
 8004620:	08004675 	.word	0x08004675
 8004624:	08004675 	.word	0x08004675
 8004628:	08004663 	.word	0x08004663
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0202 	orr.w	r2, r2, #2
 800463a:	60da      	str	r2, [r3, #12]
      break;
 800463c:	e01d      	b.n	800467a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0204 	orr.w	r2, r2, #4
 800464c:	60da      	str	r2, [r3, #12]
      break;
 800464e:	e014      	b.n	800467a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0208 	orr.w	r2, r2, #8
 800465e:	60da      	str	r2, [r3, #12]
      break;
 8004660:	e00b      	b.n	800467a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0210 	orr.w	r2, r2, #16
 8004670:	60da      	str	r2, [r3, #12]
      break;
 8004672:	e002      	b.n	800467a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      break;
 8004678:	bf00      	nop
  }

  if (status == HAL_OK)
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d13e      	bne.n	80046fe <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2201      	movs	r2, #1
 8004686:	6839      	ldr	r1, [r7, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 ff8f 	bl	80055ac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1d      	ldr	r2, [pc, #116]	; (8004708 <HAL_TIM_IC_Start_IT+0x220>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <HAL_TIM_IC_Start_IT+0x1e2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a0:	d013      	beq.n	80046ca <HAL_TIM_IC_Start_IT+0x1e2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a19      	ldr	r2, [pc, #100]	; (800470c <HAL_TIM_IC_Start_IT+0x224>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <HAL_TIM_IC_Start_IT+0x1e2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a17      	ldr	r2, [pc, #92]	; (8004710 <HAL_TIM_IC_Start_IT+0x228>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_TIM_IC_Start_IT+0x1e2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a16      	ldr	r2, [pc, #88]	; (8004714 <HAL_TIM_IC_Start_IT+0x22c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_TIM_IC_Start_IT+0x1e2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a14      	ldr	r2, [pc, #80]	; (8004718 <HAL_TIM_IC_Start_IT+0x230>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d111      	bne.n	80046ee <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b06      	cmp	r3, #6
 80046da:	d010      	beq.n	80046fe <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ec:	e007      	b.n	80046fe <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0201 	orr.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40010000 	.word	0x40010000
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800
 8004714:	40000c00 	.word	0x40000c00
 8004718:	40014000 	.word	0x40014000

0800471c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d020      	beq.n	8004780 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01b      	beq.n	8004780 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0202 	mvn.w	r2, #2
 8004750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc fc0e 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 800476c:	e005      	b.n	800477a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fb2e 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fb35 	bl	8004de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d020      	beq.n	80047cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01b      	beq.n	80047cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0204 	mvn.w	r2, #4
 800479c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fbe8 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fb08 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fb0f 	bl	8004de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d020      	beq.n	8004818 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01b      	beq.n	8004818 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0208 	mvn.w	r2, #8
 80047e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2204      	movs	r2, #4
 80047ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc fbc2 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 8004804:	e005      	b.n	8004812 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fae2 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fae9 	bl	8004de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	d020      	beq.n	8004864 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01b      	beq.n	8004864 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0210 	mvn.w	r2, #16
 8004834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2208      	movs	r2, #8
 800483a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc fb9c 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 8004850:	e005      	b.n	800485e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fabc 	bl	8004dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fac3 	bl	8004de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00c      	beq.n	8004888 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0201 	mvn.w	r2, #1
 8004880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fd fb2e 	bl	8001ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 ff1e 	bl	80056e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00c      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa94 	bl	8004df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00c      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0220 	mvn.w	r2, #32
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fef0 	bl	80056d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004916:	2302      	movs	r3, #2
 8004918:	e088      	b.n	8004a2c <HAL_TIM_IC_ConfigChannel+0x130>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d11b      	bne.n	8004960 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004938:	f000 fc80 	bl	800523c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 020c 	bic.w	r2, r2, #12
 800494a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6999      	ldr	r1, [r3, #24]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	619a      	str	r2, [r3, #24]
 800495e:	e060      	b.n	8004a22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b04      	cmp	r3, #4
 8004964:	d11c      	bne.n	80049a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004976:	f000 fcf8 	bl	800536a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004988:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6999      	ldr	r1, [r3, #24]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	021a      	lsls	r2, r3, #8
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	619a      	str	r2, [r3, #24]
 800499e:	e040      	b.n	8004a22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d11b      	bne.n	80049de <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80049b6:	f000 fd45 	bl	8005444 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 020c 	bic.w	r2, r2, #12
 80049c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69d9      	ldr	r1, [r3, #28]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	61da      	str	r2, [r3, #28]
 80049dc:	e021      	b.n	8004a22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b0c      	cmp	r3, #12
 80049e2:	d11c      	bne.n	8004a1e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80049f4:	f000 fd62 	bl	80054bc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a06:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69d9      	ldr	r1, [r3, #28]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	021a      	lsls	r2, r3, #8
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	61da      	str	r2, [r3, #28]
 8004a1c:	e001      	b.n	8004a22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e0ae      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b0c      	cmp	r3, #12
 8004a5e:	f200 809f 	bhi.w	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a9d 	.word	0x08004a9d
 8004a6c:	08004ba1 	.word	0x08004ba1
 8004a70:	08004ba1 	.word	0x08004ba1
 8004a74:	08004ba1 	.word	0x08004ba1
 8004a78:	08004add 	.word	0x08004add
 8004a7c:	08004ba1 	.word	0x08004ba1
 8004a80:	08004ba1 	.word	0x08004ba1
 8004a84:	08004ba1 	.word	0x08004ba1
 8004a88:	08004b1f 	.word	0x08004b1f
 8004a8c:	08004ba1 	.word	0x08004ba1
 8004a90:	08004ba1 	.word	0x08004ba1
 8004a94:	08004ba1 	.word	0x08004ba1
 8004a98:	08004b5f 	.word	0x08004b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fa3e 	bl	8004f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0208 	orr.w	r2, r2, #8
 8004ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0204 	bic.w	r2, r2, #4
 8004ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6999      	ldr	r1, [r3, #24]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	619a      	str	r2, [r3, #24]
      break;
 8004ada:	e064      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa84 	bl	8004ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6999      	ldr	r1, [r3, #24]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	021a      	lsls	r2, r3, #8
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	619a      	str	r2, [r3, #24]
      break;
 8004b1c:	e043      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 facf 	bl	80050c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0208 	orr.w	r2, r2, #8
 8004b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0204 	bic.w	r2, r2, #4
 8004b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69d9      	ldr	r1, [r3, #28]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	61da      	str	r2, [r3, #28]
      break;
 8004b5c:	e023      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fb19 	bl	800519c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69d9      	ldr	r1, [r3, #28]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	021a      	lsls	r2, r3, #8
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	61da      	str	r2, [r3, #28]
      break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e0b4      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x186>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0c:	d03e      	beq.n	8004c8c <HAL_TIM_ConfigClockSource+0xd4>
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c12:	f200 8087 	bhi.w	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1a:	f000 8086 	beq.w	8004d2a <HAL_TIM_ConfigClockSource+0x172>
 8004c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c22:	d87f      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b70      	cmp	r3, #112	; 0x70
 8004c26:	d01a      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xa6>
 8004c28:	2b70      	cmp	r3, #112	; 0x70
 8004c2a:	d87b      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b60      	cmp	r3, #96	; 0x60
 8004c2e:	d050      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c30:	2b60      	cmp	r3, #96	; 0x60
 8004c32:	d877      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b50      	cmp	r3, #80	; 0x50
 8004c36:	d03c      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c38:	2b50      	cmp	r3, #80	; 0x50
 8004c3a:	d873      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d058      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x13a>
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d86f      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b30      	cmp	r3, #48	; 0x30
 8004c46:	d064      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	2b30      	cmp	r3, #48	; 0x30
 8004c4a:	d86b      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d060      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d867      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05c      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d05a      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x15a>
 8004c5c:	e062      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c6e:	f000 fc7d 	bl	800556c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	609a      	str	r2, [r3, #8]
      break;
 8004c8a:	e04f      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c9c:	f000 fc66 	bl	800556c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cae:	609a      	str	r2, [r3, #8]
      break;
 8004cb0:	e03c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 fb24 	bl	800530c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2150      	movs	r1, #80	; 0x50
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fc33 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004cd0:	e02c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f000 fb80 	bl	80053e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2160      	movs	r1, #96	; 0x60
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fc23 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004cf0:	e01c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 fb04 	bl	800530c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2140      	movs	r1, #64	; 0x40
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fc13 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004d10:	e00c      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f000 fc0a 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8004d22:	e003      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
      break;
 8004d28:	e000      	b.n	8004d2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b0c      	cmp	r3, #12
 8004d5a:	d831      	bhi.n	8004dc0 <HAL_TIM_ReadCapturedValue+0x78>
 8004d5c:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d99 	.word	0x08004d99
 8004d68:	08004dc1 	.word	0x08004dc1
 8004d6c:	08004dc1 	.word	0x08004dc1
 8004d70:	08004dc1 	.word	0x08004dc1
 8004d74:	08004da3 	.word	0x08004da3
 8004d78:	08004dc1 	.word	0x08004dc1
 8004d7c:	08004dc1 	.word	0x08004dc1
 8004d80:	08004dc1 	.word	0x08004dc1
 8004d84:	08004dad 	.word	0x08004dad
 8004d88:	08004dc1 	.word	0x08004dc1
 8004d8c:	08004dc1 	.word	0x08004dc1
 8004d90:	08004dc1 	.word	0x08004dc1
 8004d94:	08004db7 	.word	0x08004db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	60fb      	str	r3, [r7, #12]

      break;
 8004da0:	e00f      	b.n	8004dc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	60fb      	str	r3, [r7, #12]

      break;
 8004daa:	e00a      	b.n	8004dc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	60fb      	str	r3, [r7, #12]

      break;
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	60fb      	str	r3, [r7, #12]

      break;
 8004dbe:	e000      	b.n	8004dc2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004dc0:	bf00      	nop
  }

  return tmpreg;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3a      	ldr	r2, [pc, #232]	; (8004f08 <TIM_Base_SetConfig+0xfc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00f      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2a:	d00b      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a37      	ldr	r2, [pc, #220]	; (8004f0c <TIM_Base_SetConfig+0x100>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a36      	ldr	r2, [pc, #216]	; (8004f10 <TIM_Base_SetConfig+0x104>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a35      	ldr	r2, [pc, #212]	; (8004f14 <TIM_Base_SetConfig+0x108>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d108      	bne.n	8004e56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	; (8004f08 <TIM_Base_SetConfig+0xfc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01b      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e64:	d017      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a28      	ldr	r2, [pc, #160]	; (8004f0c <TIM_Base_SetConfig+0x100>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a27      	ldr	r2, [pc, #156]	; (8004f10 <TIM_Base_SetConfig+0x104>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00f      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a26      	ldr	r2, [pc, #152]	; (8004f14 <TIM_Base_SetConfig+0x108>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <TIM_Base_SetConfig+0x10c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a24      	ldr	r2, [pc, #144]	; (8004f1c <TIM_Base_SetConfig+0x110>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_Base_SetConfig+0x8a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <TIM_Base_SetConfig+0x114>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <TIM_Base_SetConfig+0xfc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d103      	bne.n	8004edc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d105      	bne.n	8004efa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	611a      	str	r2, [r3, #16]
  }
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800
 8004f14:	40000c00 	.word	0x40000c00
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800

08004f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f023 0201 	bic.w	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f023 0302 	bic.w	r3, r3, #2
 8004f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <TIM_OC1_SetConfig+0xc8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10c      	bne.n	8004f9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0308 	bic.w	r3, r3, #8
 8004f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 0304 	bic.w	r3, r3, #4
 8004f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a13      	ldr	r2, [pc, #76]	; (8004fec <TIM_OC1_SetConfig+0xc8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d111      	bne.n	8004fc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	621a      	str	r2, [r3, #32]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40010000 	.word	0x40010000

08004ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f023 0210 	bic.w	r2, r3, #16
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0320 	bic.w	r3, r3, #32
 800503a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <TIM_OC2_SetConfig+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d10d      	bne.n	800506c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <TIM_OC2_SetConfig+0xd4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d113      	bne.n	800509c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800507a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000

080050c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <TIM_OC3_SetConfig+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10d      	bne.n	8005142 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800512c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a14      	ldr	r2, [pc, #80]	; (8005198 <TIM_OC3_SetConfig+0xd0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d113      	bne.n	8005172 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	621a      	str	r2, [r3, #32]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	40010000 	.word	0x40010000

0800519c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	031b      	lsls	r3, r3, #12
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a10      	ldr	r2, [pc, #64]	; (8005238 <TIM_OC4_SetConfig+0x9c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d109      	bne.n	8005210 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	019b      	lsls	r3, r3, #6
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000

0800523c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f023 0201 	bic.w	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4a24      	ldr	r2, [pc, #144]	; (80052f8 <TIM_TI1_SetConfig+0xbc>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <TIM_TI1_SetConfig+0x56>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005270:	d00f      	beq.n	8005292 <TIM_TI1_SetConfig+0x56>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4a21      	ldr	r2, [pc, #132]	; (80052fc <TIM_TI1_SetConfig+0xc0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00b      	beq.n	8005292 <TIM_TI1_SetConfig+0x56>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a20      	ldr	r2, [pc, #128]	; (8005300 <TIM_TI1_SetConfig+0xc4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <TIM_TI1_SetConfig+0x56>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <TIM_TI1_SetConfig+0xc8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_TI1_SetConfig+0x56>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <TIM_TI1_SetConfig+0xcc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d101      	bne.n	8005296 <TIM_TI1_SetConfig+0x5a>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <TIM_TI1_SetConfig+0x5c>
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d008      	beq.n	80052ae <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e003      	b.n	80052b6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f023 030a 	bic.w	r3, r3, #10
 80052d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f003 030a 	and.w	r3, r3, #10
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40014000 	.word	0x40014000

0800530c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f023 0201 	bic.w	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 030a 	bic.w	r3, r3, #10
 8005348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800536a:	b480      	push	{r7}
 800536c:	b087      	sub	sp, #28
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
 8005376:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0210 	bic.w	r2, r3, #16
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	621a      	str	r2, [r3, #32]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0210 	bic.w	r2, r3, #16
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800540e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	031b      	lsls	r3, r3, #12
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005420:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	621a      	str	r2, [r3, #32]
}
 8005438:	bf00      	nop
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f023 0303 	bic.w	r3, r3, #3
 8005470:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005480:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	b2db      	uxtb	r3, r3
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005494:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	621a      	str	r2, [r3, #32]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	031b      	lsls	r3, r3, #12
 8005500:	b29b      	uxth	r3, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800550e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	031b      	lsls	r3, r3, #12
 8005514:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	f043 0307 	orr.w	r3, r3, #7
 8005558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	609a      	str	r2, [r3, #8]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	021a      	lsls	r2, r3, #8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	431a      	orrs	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4313      	orrs	r3, r2
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	609a      	str	r2, [r3, #8]
}
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	2201      	movs	r2, #1
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1a      	ldr	r2, [r3, #32]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	401a      	ands	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1a      	ldr	r2, [r3, #32]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	fa01 f303 	lsl.w	r3, r1, r3
 80055e4:	431a      	orrs	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800560c:	2302      	movs	r3, #2
 800560e:	e050      	b.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d018      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565c:	d013      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00e      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a15      	ldr	r2, [pc, #84]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d10c      	bne.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800568c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	4313      	orrs	r3, r2
 8005696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40000400 	.word	0x40000400
 80056c8:	40000800 	.word	0x40000800
 80056cc:	40000c00 	.word	0x40000c00
 80056d0:	40014000 	.word	0x40014000

080056d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e042      	b.n	8005794 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc ff52 	bl	80025cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fd11 	bl	8006168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	4613      	mov	r3, r2
 80057a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d121      	bne.n	80057fa <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_UART_Transmit_IT+0x26>
 80057bc:	88fb      	ldrh	r3, [r7, #6]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e01a      	b.n	80057fc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2221      	movs	r2, #33	; 0x21
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057f4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e000      	b.n	80057fc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80057fa:	2302      	movs	r3, #2
  }
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b20      	cmp	r3, #32
 8005820:	d112      	bne.n	8005848 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <HAL_UART_Receive_IT+0x26>
 8005828:	88fb      	ldrh	r3, [r7, #6]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e00b      	b.n	800584a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	461a      	mov	r2, r3
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 faba 	bl	8005db8 <UART_Start_Receive_IT>
 8005844:	4603      	mov	r3, r0
 8005846:	e000      	b.n	800584a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b0ba      	sub	sp, #232	; 0xe8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800587a:	2300      	movs	r3, #0
 800587c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005880:	2300      	movs	r3, #0
 8005882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10f      	bne.n	80058ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <HAL_UART_IRQHandler+0x66>
 80058a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fb99 	bl	8005fea <UART_Receive_IT>
      return;
 80058b8:	e25b      	b.n	8005d72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 80de 	beq.w	8005a80 <HAL_UART_IRQHandler+0x22c>
 80058c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80d1 	beq.w	8005a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_UART_IRQHandler+0xae>
 80058ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fa:	f043 0201 	orr.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <HAL_UART_IRQHandler+0xd2>
 800590e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	f043 0202 	orr.w	r2, r3, #2
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00b      	beq.n	800594a <HAL_UART_IRQHandler+0xf6>
 8005932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	f043 0204 	orr.w	r2, r3, #4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800594a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d011      	beq.n	800597a <HAL_UART_IRQHandler+0x126>
 8005956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	f043 0208 	orr.w	r2, r3, #8
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 81f2 	beq.w	8005d68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_UART_IRQHandler+0x14e>
 8005990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fb24 	bl	8005fea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	bf0c      	ite	eq
 80059b0:	2301      	moveq	r3, #1
 80059b2:	2300      	movne	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <HAL_UART_IRQHandler+0x17a>
 80059c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d04f      	beq.n	8005a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa2c 	bl	8005e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d141      	bne.n	8005a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3314      	adds	r3, #20
 80059e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1d9      	bne.n	80059e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d013      	beq.n	8005a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	4a7e      	ldr	r2, [pc, #504]	; (8005c34 <HAL_UART_IRQHandler+0x3e0>)
 8005a3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fd f852 	bl	8002aec <HAL_DMA_Abort_IT>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d016      	beq.n	8005a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5c:	e00e      	b.n	8005a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f994 	bl	8005d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a64:	e00a      	b.n	8005a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f990 	bl	8005d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6c:	e006      	b.n	8005a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f98c 	bl	8005d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005a7a:	e175      	b.n	8005d68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	bf00      	nop
    return;
 8005a7e:	e173      	b.n	8005d68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	f040 814f 	bne.w	8005d28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 8148 	beq.w	8005d28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8141 	beq.w	8005d28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b40      	cmp	r3, #64	; 0x40
 8005ac8:	f040 80b6 	bne.w	8005c38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8145 	beq.w	8005d6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aea:	429a      	cmp	r2, r3
 8005aec:	f080 813e 	bcs.w	8005d6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005af6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b02:	f000 8088 	beq.w	8005c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1d9      	bne.n	8005b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3314      	adds	r3, #20
 8005b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3314      	adds	r3, #20
 8005b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e1      	bne.n	8005b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3314      	adds	r3, #20
 8005b94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3314      	adds	r3, #20
 8005bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e3      	bne.n	8005b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be6:	f023 0310 	bic.w	r3, r3, #16
 8005bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e3      	bne.n	8005bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fc fefb 	bl	8002a0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f8b7 	bl	8005da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c32:	e09b      	b.n	8005d6c <HAL_UART_IRQHandler+0x518>
 8005c34:	08005ef3 	.word	0x08005ef3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 808e 	beq.w	8005d70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8089 	beq.w	8005d70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	330c      	adds	r3, #12
 8005c64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c82:	647a      	str	r2, [r7, #68]	; 0x44
 8005c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e3      	bne.n	8005c5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3314      	adds	r3, #20
 8005cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cba:	633a      	str	r2, [r7, #48]	; 0x30
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e3      	bne.n	8005c96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0310 	bic.w	r3, r3, #16
 8005cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	330c      	adds	r3, #12
 8005cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d00:	61fa      	str	r2, [r7, #28]
 8005d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e3      	bne.n	8005cdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f83d 	bl	8005da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d26:	e023      	b.n	8005d70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <HAL_UART_IRQHandler+0x4f4>
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f8ea 	bl	8005f1a <UART_Transmit_IT>
    return;
 8005d46:	e014      	b.n	8005d72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <HAL_UART_IRQHandler+0x51e>
 8005d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f92a 	bl	8005fba <UART_EndTransmit_IT>
    return;
 8005d66:	e004      	b.n	8005d72 <HAL_UART_IRQHandler+0x51e>
    return;
 8005d68:	bf00      	nop
 8005d6a:	e002      	b.n	8005d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d6c:	bf00      	nop
 8005d6e:	e000      	b.n	8005d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d70:	bf00      	nop
  }
}
 8005d72:	37e8      	adds	r7, #232	; 0xe8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	88fa      	ldrh	r2, [r7, #6]
 8005dd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2222      	movs	r2, #34	; 0x22
 8005de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dfc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0220 	orr.w	r2, r2, #32
 8005e1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b095      	sub	sp, #84	; 0x54
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e54:	643a      	str	r2, [r7, #64]	; 0x40
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e5      	bne.n	8005e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f023 0301 	bic.w	r3, r3, #1
 8005e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3314      	adds	r3, #20
 8005e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e5      	bne.n	8005e68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d119      	bne.n	8005ed8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f023 0310 	bic.w	r3, r3, #16
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec4:	61ba      	str	r2, [r7, #24]
 8005ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e5      	bne.n	8005ea4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ee6:	bf00      	nop
 8005ee8:	3754      	adds	r7, #84	; 0x54
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff ff3d 	bl	8005d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b21      	cmp	r3, #33	; 0x21
 8005f2c:	d13e      	bne.n	8005fac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f36:	d114      	bne.n	8005f62 <UART_Transmit_IT+0x48>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d110      	bne.n	8005f62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	1c9a      	adds	r2, r3, #2
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]
 8005f60:	e008      	b.n	8005f74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	1c59      	adds	r1, r3, #1
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6211      	str	r1, [r2, #32]
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4619      	mov	r1, r3
 8005f82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10f      	bne.n	8005fa8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e000      	b.n	8005fae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fac:	2302      	movs	r3, #2
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fecc 	bl	8005d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b08c      	sub	sp, #48	; 0x30
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b22      	cmp	r3, #34	; 0x22
 8005ffc:	f040 80ae 	bne.w	800615c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006008:	d117      	bne.n	800603a <UART_Receive_IT+0x50>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d113      	bne.n	800603a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	b29b      	uxth	r3, r3
 8006024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006028:	b29a      	uxth	r2, r3
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	1c9a      	adds	r2, r3, #2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
 8006038:	e026      	b.n	8006088 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006040:	2300      	movs	r3, #0
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604c:	d007      	beq.n	800605e <UART_Receive_IT+0x74>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <UART_Receive_IT+0x82>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	b2da      	uxtb	r2, r3
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e008      	b.n	800607e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006078:	b2da      	uxtb	r2, r3
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29b      	uxth	r3, r3
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4619      	mov	r1, r3
 8006096:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006098:	2b00      	cmp	r3, #0
 800609a:	d15d      	bne.n	8006158 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0220 	bic.w	r2, r2, #32
 80060aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0201 	bic.w	r2, r2, #1
 80060ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d135      	bne.n	800614e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	613b      	str	r3, [r7, #16]
   return(result);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f023 0310 	bic.w	r3, r3, #16
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	330c      	adds	r3, #12
 8006106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006108:	623a      	str	r2, [r7, #32]
 800610a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	69f9      	ldr	r1, [r7, #28]
 800610e:	6a3a      	ldr	r2, [r7, #32]
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	61bb      	str	r3, [r7, #24]
   return(result);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e5      	bne.n	80060e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b10      	cmp	r3, #16
 8006128:	d10a      	bne.n	8006140 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7ff fe2a 	bl	8005da0 <HAL_UARTEx_RxEventCallback>
 800614c:	e002      	b.n	8006154 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fb fc20 	bl	8001994 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	e002      	b.n	800615e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800615c:	2302      	movs	r3, #2
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	3730      	adds	r7, #48	; 0x30
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800616c:	b0c0      	sub	sp, #256	; 0x100
 800616e:	af00      	add	r7, sp, #0
 8006170:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006184:	68d9      	ldr	r1, [r3, #12]
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	ea40 0301 	orr.w	r3, r0, r1
 8006190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	431a      	orrs	r2, r3
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061c0:	f021 010c 	bic.w	r1, r1, #12
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061ce:	430b      	orrs	r3, r1
 80061d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e2:	6999      	ldr	r1, [r3, #24]
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	ea40 0301 	orr.w	r3, r0, r1
 80061ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4b8f      	ldr	r3, [pc, #572]	; (8006434 <UART_SetConfig+0x2cc>)
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d005      	beq.n	8006208 <UART_SetConfig+0xa0>
 80061fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b8d      	ldr	r3, [pc, #564]	; (8006438 <UART_SetConfig+0x2d0>)
 8006204:	429a      	cmp	r2, r3
 8006206:	d104      	bne.n	8006212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006208:	f7fd ff12 	bl	8004030 <HAL_RCC_GetPCLK2Freq>
 800620c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006210:	e003      	b.n	800621a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006212:	f7fd fef9 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8006216:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800621a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006224:	f040 810c 	bne.w	8006440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800622c:	2200      	movs	r2, #0
 800622e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006232:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800623a:	4622      	mov	r2, r4
 800623c:	462b      	mov	r3, r5
 800623e:	1891      	adds	r1, r2, r2
 8006240:	65b9      	str	r1, [r7, #88]	; 0x58
 8006242:	415b      	adcs	r3, r3
 8006244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800624a:	4621      	mov	r1, r4
 800624c:	eb12 0801 	adds.w	r8, r2, r1
 8006250:	4629      	mov	r1, r5
 8006252:	eb43 0901 	adc.w	r9, r3, r1
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800626a:	4690      	mov	r8, r2
 800626c:	4699      	mov	r9, r3
 800626e:	4623      	mov	r3, r4
 8006270:	eb18 0303 	adds.w	r3, r8, r3
 8006274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006278:	462b      	mov	r3, r5
 800627a:	eb49 0303 	adc.w	r3, r9, r3
 800627e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800628e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006296:	460b      	mov	r3, r1
 8006298:	18db      	adds	r3, r3, r3
 800629a:	653b      	str	r3, [r7, #80]	; 0x50
 800629c:	4613      	mov	r3, r2
 800629e:	eb42 0303 	adc.w	r3, r2, r3
 80062a2:	657b      	str	r3, [r7, #84]	; 0x54
 80062a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062ac:	f7fa fbde 	bl	8000a6c <__aeabi_uldivmod>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4b61      	ldr	r3, [pc, #388]	; (800643c <UART_SetConfig+0x2d4>)
 80062b6:	fba3 2302 	umull	r2, r3, r3, r2
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	011c      	lsls	r4, r3, #4
 80062be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062d0:	4642      	mov	r2, r8
 80062d2:	464b      	mov	r3, r9
 80062d4:	1891      	adds	r1, r2, r2
 80062d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80062d8:	415b      	adcs	r3, r3
 80062da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062e0:	4641      	mov	r1, r8
 80062e2:	eb12 0a01 	adds.w	sl, r2, r1
 80062e6:	4649      	mov	r1, r9
 80062e8:	eb43 0b01 	adc.w	fp, r3, r1
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006300:	4692      	mov	sl, r2
 8006302:	469b      	mov	fp, r3
 8006304:	4643      	mov	r3, r8
 8006306:	eb1a 0303 	adds.w	r3, sl, r3
 800630a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800630e:	464b      	mov	r3, r9
 8006310:	eb4b 0303 	adc.w	r3, fp, r3
 8006314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006324:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800632c:	460b      	mov	r3, r1
 800632e:	18db      	adds	r3, r3, r3
 8006330:	643b      	str	r3, [r7, #64]	; 0x40
 8006332:	4613      	mov	r3, r2
 8006334:	eb42 0303 	adc.w	r3, r2, r3
 8006338:	647b      	str	r3, [r7, #68]	; 0x44
 800633a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800633e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006342:	f7fa fb93 	bl	8000a6c <__aeabi_uldivmod>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4611      	mov	r1, r2
 800634c:	4b3b      	ldr	r3, [pc, #236]	; (800643c <UART_SetConfig+0x2d4>)
 800634e:	fba3 2301 	umull	r2, r3, r3, r1
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	2264      	movs	r2, #100	; 0x64
 8006356:	fb02 f303 	mul.w	r3, r2, r3
 800635a:	1acb      	subs	r3, r1, r3
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006362:	4b36      	ldr	r3, [pc, #216]	; (800643c <UART_SetConfig+0x2d4>)
 8006364:	fba3 2302 	umull	r2, r3, r3, r2
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006370:	441c      	add	r4, r3
 8006372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006376:	2200      	movs	r2, #0
 8006378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800637c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006384:	4642      	mov	r2, r8
 8006386:	464b      	mov	r3, r9
 8006388:	1891      	adds	r1, r2, r2
 800638a:	63b9      	str	r1, [r7, #56]	; 0x38
 800638c:	415b      	adcs	r3, r3
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006394:	4641      	mov	r1, r8
 8006396:	1851      	adds	r1, r2, r1
 8006398:	6339      	str	r1, [r7, #48]	; 0x30
 800639a:	4649      	mov	r1, r9
 800639c:	414b      	adcs	r3, r1
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063ac:	4659      	mov	r1, fp
 80063ae:	00cb      	lsls	r3, r1, #3
 80063b0:	4651      	mov	r1, sl
 80063b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063b6:	4651      	mov	r1, sl
 80063b8:	00ca      	lsls	r2, r1, #3
 80063ba:	4610      	mov	r0, r2
 80063bc:	4619      	mov	r1, r3
 80063be:	4603      	mov	r3, r0
 80063c0:	4642      	mov	r2, r8
 80063c2:	189b      	adds	r3, r3, r2
 80063c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063c8:	464b      	mov	r3, r9
 80063ca:	460a      	mov	r2, r1
 80063cc:	eb42 0303 	adc.w	r3, r2, r3
 80063d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063e8:	460b      	mov	r3, r1
 80063ea:	18db      	adds	r3, r3, r3
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ee:	4613      	mov	r3, r2
 80063f0:	eb42 0303 	adc.w	r3, r2, r3
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063fe:	f7fa fb35 	bl	8000a6c <__aeabi_uldivmod>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <UART_SetConfig+0x2d4>)
 8006408:	fba3 1302 	umull	r1, r3, r3, r2
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	2164      	movs	r1, #100	; 0x64
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	3332      	adds	r3, #50	; 0x32
 800641a:	4a08      	ldr	r2, [pc, #32]	; (800643c <UART_SetConfig+0x2d4>)
 800641c:	fba2 2303 	umull	r2, r3, r2, r3
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	f003 0207 	and.w	r2, r3, #7
 8006426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4422      	add	r2, r4
 800642e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006430:	e106      	b.n	8006640 <UART_SetConfig+0x4d8>
 8006432:	bf00      	nop
 8006434:	40011000 	.word	0x40011000
 8006438:	40011400 	.word	0x40011400
 800643c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006444:	2200      	movs	r2, #0
 8006446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800644a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800644e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006452:	4642      	mov	r2, r8
 8006454:	464b      	mov	r3, r9
 8006456:	1891      	adds	r1, r2, r2
 8006458:	6239      	str	r1, [r7, #32]
 800645a:	415b      	adcs	r3, r3
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
 800645e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006462:	4641      	mov	r1, r8
 8006464:	1854      	adds	r4, r2, r1
 8006466:	4649      	mov	r1, r9
 8006468:	eb43 0501 	adc.w	r5, r3, r1
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	00eb      	lsls	r3, r5, #3
 8006476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800647a:	00e2      	lsls	r2, r4, #3
 800647c:	4614      	mov	r4, r2
 800647e:	461d      	mov	r5, r3
 8006480:	4643      	mov	r3, r8
 8006482:	18e3      	adds	r3, r4, r3
 8006484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006488:	464b      	mov	r3, r9
 800648a:	eb45 0303 	adc.w	r3, r5, r3
 800648e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800649e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064ae:	4629      	mov	r1, r5
 80064b0:	008b      	lsls	r3, r1, #2
 80064b2:	4621      	mov	r1, r4
 80064b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064b8:	4621      	mov	r1, r4
 80064ba:	008a      	lsls	r2, r1, #2
 80064bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064c0:	f7fa fad4 	bl	8000a6c <__aeabi_uldivmod>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4b60      	ldr	r3, [pc, #384]	; (800664c <UART_SetConfig+0x4e4>)
 80064ca:	fba3 2302 	umull	r2, r3, r3, r2
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	011c      	lsls	r4, r3, #4
 80064d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80064e4:	4642      	mov	r2, r8
 80064e6:	464b      	mov	r3, r9
 80064e8:	1891      	adds	r1, r2, r2
 80064ea:	61b9      	str	r1, [r7, #24]
 80064ec:	415b      	adcs	r3, r3
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064f4:	4641      	mov	r1, r8
 80064f6:	1851      	adds	r1, r2, r1
 80064f8:	6139      	str	r1, [r7, #16]
 80064fa:	4649      	mov	r1, r9
 80064fc:	414b      	adcs	r3, r1
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	f04f 0200 	mov.w	r2, #0
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800650c:	4659      	mov	r1, fp
 800650e:	00cb      	lsls	r3, r1, #3
 8006510:	4651      	mov	r1, sl
 8006512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006516:	4651      	mov	r1, sl
 8006518:	00ca      	lsls	r2, r1, #3
 800651a:	4610      	mov	r0, r2
 800651c:	4619      	mov	r1, r3
 800651e:	4603      	mov	r3, r0
 8006520:	4642      	mov	r2, r8
 8006522:	189b      	adds	r3, r3, r2
 8006524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006528:	464b      	mov	r3, r9
 800652a:	460a      	mov	r2, r1
 800652c:	eb42 0303 	adc.w	r3, r2, r3
 8006530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	67bb      	str	r3, [r7, #120]	; 0x78
 800653e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800654c:	4649      	mov	r1, r9
 800654e:	008b      	lsls	r3, r1, #2
 8006550:	4641      	mov	r1, r8
 8006552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006556:	4641      	mov	r1, r8
 8006558:	008a      	lsls	r2, r1, #2
 800655a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800655e:	f7fa fa85 	bl	8000a6c <__aeabi_uldivmod>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4611      	mov	r1, r2
 8006568:	4b38      	ldr	r3, [pc, #224]	; (800664c <UART_SetConfig+0x4e4>)
 800656a:	fba3 2301 	umull	r2, r3, r3, r1
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	2264      	movs	r2, #100	; 0x64
 8006572:	fb02 f303 	mul.w	r3, r2, r3
 8006576:	1acb      	subs	r3, r1, r3
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	3332      	adds	r3, #50	; 0x32
 800657c:	4a33      	ldr	r2, [pc, #204]	; (800664c <UART_SetConfig+0x4e4>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006588:	441c      	add	r4, r3
 800658a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800658e:	2200      	movs	r2, #0
 8006590:	673b      	str	r3, [r7, #112]	; 0x70
 8006592:	677a      	str	r2, [r7, #116]	; 0x74
 8006594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006598:	4642      	mov	r2, r8
 800659a:	464b      	mov	r3, r9
 800659c:	1891      	adds	r1, r2, r2
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	415b      	adcs	r3, r3
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065a8:	4641      	mov	r1, r8
 80065aa:	1851      	adds	r1, r2, r1
 80065ac:	6039      	str	r1, [r7, #0]
 80065ae:	4649      	mov	r1, r9
 80065b0:	414b      	adcs	r3, r1
 80065b2:	607b      	str	r3, [r7, #4]
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065c0:	4659      	mov	r1, fp
 80065c2:	00cb      	lsls	r3, r1, #3
 80065c4:	4651      	mov	r1, sl
 80065c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ca:	4651      	mov	r1, sl
 80065cc:	00ca      	lsls	r2, r1, #3
 80065ce:	4610      	mov	r0, r2
 80065d0:	4619      	mov	r1, r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	4642      	mov	r2, r8
 80065d6:	189b      	adds	r3, r3, r2
 80065d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80065da:	464b      	mov	r3, r9
 80065dc:	460a      	mov	r2, r1
 80065de:	eb42 0303 	adc.w	r3, r2, r3
 80065e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	663b      	str	r3, [r7, #96]	; 0x60
 80065ee:	667a      	str	r2, [r7, #100]	; 0x64
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065fc:	4649      	mov	r1, r9
 80065fe:	008b      	lsls	r3, r1, #2
 8006600:	4641      	mov	r1, r8
 8006602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006606:	4641      	mov	r1, r8
 8006608:	008a      	lsls	r2, r1, #2
 800660a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800660e:	f7fa fa2d 	bl	8000a6c <__aeabi_uldivmod>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4b0d      	ldr	r3, [pc, #52]	; (800664c <UART_SetConfig+0x4e4>)
 8006618:	fba3 1302 	umull	r1, r3, r3, r2
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	2164      	movs	r1, #100	; 0x64
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	3332      	adds	r3, #50	; 0x32
 800662a:	4a08      	ldr	r2, [pc, #32]	; (800664c <UART_SetConfig+0x4e4>)
 800662c:	fba2 2303 	umull	r2, r3, r2, r3
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	f003 020f 	and.w	r2, r3, #15
 8006636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4422      	add	r2, r4
 800663e:	609a      	str	r2, [r3, #8]
}
 8006640:	bf00      	nop
 8006642:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006646:	46bd      	mov	sp, r7
 8006648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800664c:	51eb851f 	.word	0x51eb851f

08006650 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800665e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006662:	2b84      	cmp	r3, #132	; 0x84
 8006664:	d005      	beq.n	8006672 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006666:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	3303      	adds	r3, #3
 8006670:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006672:	68fb      	ldr	r3, [r7, #12]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006684:	f000 fe34 	bl	80072f0 <vTaskStartScheduler>
  
  return osOK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	bd80      	pop	{r7, pc}

0800668e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800668e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006690:	b089      	sub	sp, #36	; 0x24
 8006692:	af04      	add	r7, sp, #16
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d020      	beq.n	80066e2 <osThreadCreate+0x54>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01c      	beq.n	80066e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685c      	ldr	r4, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691e      	ldr	r6, [r3, #16]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff ffc8 	bl	8006650 <makeFreeRtosPriority>
 80066c0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ca:	9202      	str	r2, [sp, #8]
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	9100      	str	r1, [sp, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	4632      	mov	r2, r6
 80066d4:	4629      	mov	r1, r5
 80066d6:	4620      	mov	r0, r4
 80066d8:	f000 fc2c 	bl	8006f34 <xTaskCreateStatic>
 80066dc:	4603      	mov	r3, r0
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	e01c      	b.n	800671c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685c      	ldr	r4, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ee:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff ffaa 	bl	8006650 <makeFreeRtosPriority>
 80066fc:	4602      	mov	r2, r0
 80066fe:	f107 030c 	add.w	r3, r7, #12
 8006702:	9301      	str	r3, [sp, #4]
 8006704:	9200      	str	r2, [sp, #0]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	4632      	mov	r2, r6
 800670a:	4629      	mov	r1, r5
 800670c:	4620      	mov	r0, r4
 800670e:	f000 fc6e 	bl	8006fee <xTaskCreate>
 8006712:	4603      	mov	r3, r0
 8006714:	2b01      	cmp	r3, #1
 8006716:	d001      	beq.n	800671c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006718:	2300      	movs	r3, #0
 800671a:	e000      	b.n	800671e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800671c:	68fb      	ldr	r3, [r7, #12]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006726 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <osDelay+0x16>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	e000      	b.n	800673e <osDelay+0x18>
 800673c:	2301      	movs	r3, #1
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fda2 	bl	8007288 <vTaskDelay>
  
  return osOK;
 8006744:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800674e:	b580      	push	{r7, lr}
 8006750:	b086      	sub	sp, #24
 8006752:	af02      	add	r7, sp, #8
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00f      	beq.n	8006780 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d10a      	bne.n	800677c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2203      	movs	r2, #3
 800676c:	9200      	str	r2, [sp, #0]
 800676e:	2200      	movs	r2, #0
 8006770:	2100      	movs	r1, #0
 8006772:	2001      	movs	r0, #1
 8006774:	f000 f93a 	bl	80069ec <xQueueGenericCreateStatic>
 8006778:	4603      	mov	r3, r0
 800677a:	e016      	b.n	80067aa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800677c:	2300      	movs	r3, #0
 800677e:	e014      	b.n	80067aa <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d110      	bne.n	80067a8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006786:	2203      	movs	r2, #3
 8006788:	2100      	movs	r1, #0
 800678a:	2001      	movs	r0, #1
 800678c:	f000 f9a6 	bl	8006adc <xQueueGenericCreate>
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <osSemaphoreCreate+0x56>
 8006798:	2300      	movs	r3, #0
 800679a:	2200      	movs	r2, #0
 800679c:	2100      	movs	r1, #0
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f9f6 	bl	8006b90 <xQueueGenericSend>
      return sema;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	e000      	b.n	80067aa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80067a8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f103 0208 	add.w	r2, r3, #8
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f103 0208 	add.w	r2, r3, #8
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f103 0208 	add.w	r2, r3, #8
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686a:	d103      	bne.n	8006874 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e00c      	b.n	800688e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3308      	adds	r3, #8
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e002      	b.n	8006882 <vListInsert+0x2e>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	429a      	cmp	r2, r3
 800688c:	d2f6      	bcs.n	800687c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	601a      	str	r2, [r3, #0]
}
 80068ba:	bf00      	nop
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6892      	ldr	r2, [r2, #8]
 80068dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6852      	ldr	r2, [r2, #4]
 80068e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d103      	bne.n	80068fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	1e5a      	subs	r2, r3, #1
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
	...

0800691c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006946:	f001 fb1d 	bl	8007f84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006956:	fb01 f303 	mul.w	r3, r1, r3
 800695a:	441a      	add	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006976:	3b01      	subs	r3, #1
 8006978:	68f9      	ldr	r1, [r7, #12]
 800697a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	441a      	add	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	22ff      	movs	r2, #255	; 0xff
 800698a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	22ff      	movs	r2, #255	; 0xff
 8006992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d114      	bne.n	80069c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d01a      	beq.n	80069da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3310      	adds	r3, #16
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fef3 	bl	8007794 <xTaskRemoveFromEventList>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d012      	beq.n	80069da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069b4:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <xQueueGenericReset+0xcc>)
 80069b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	e009      	b.n	80069da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3310      	adds	r3, #16
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fef1 	bl	80067b2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3324      	adds	r3, #36	; 0x24
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff feec 	bl	80067b2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069da:	f001 fb03 	bl	8007fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069de:	2301      	movs	r3, #1
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08e      	sub	sp, #56	; 0x38
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10a      	bne.n	8006a16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <xQueueGenericCreateStatic+0x52>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <xQueueGenericCreateStatic+0x56>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <xQueueGenericCreateStatic+0x58>
 8006a42:	2300      	movs	r3, #0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	623b      	str	r3, [r7, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	e7fe      	b.n	8006a5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d102      	bne.n	8006a6a <xQueueGenericCreateStatic+0x7e>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <xQueueGenericCreateStatic+0x82>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <xQueueGenericCreateStatic+0x84>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10a      	bne.n	8006a8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	61fb      	str	r3, [r7, #28]
}
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a8a:	2348      	movs	r3, #72	; 0x48
 8006a8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b48      	cmp	r3, #72	; 0x48
 8006a92:	d00a      	beq.n	8006aaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	61bb      	str	r3, [r7, #24]
}
 8006aa6:	bf00      	nop
 8006aa8:	e7fe      	b.n	8006aa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006aaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006abe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f83f 	bl	8006b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3730      	adds	r7, #48	; 0x30
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	613b      	str	r3, [r7, #16]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	3348      	adds	r3, #72	; 0x48
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fb17 	bl	8008148 <pvPortMalloc>
 8006b1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d011      	beq.n	8006b46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	3348      	adds	r3, #72	; 0x48
 8006b2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b34:	79fa      	ldrb	r2, [r7, #7]
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f805 	bl	8006b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b46:	69bb      	ldr	r3, [r7, #24]
	}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3720      	adds	r7, #32
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d103      	bne.n	8006b6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e002      	b.n	8006b72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b7e:	2101      	movs	r1, #1
 8006b80:	69b8      	ldr	r0, [r7, #24]
 8006b82:	f7ff fecb 	bl	800691c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b86:	bf00      	nop
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08e      	sub	sp, #56	; 0x38
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <xQueueGenericSend+0x32>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d103      	bne.n	8006bd0 <xQueueGenericSend+0x40>
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <xQueueGenericSend+0x44>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <xQueueGenericSend+0x46>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <xQueueGenericSend+0x60>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d103      	bne.n	8006bfe <xQueueGenericSend+0x6e>
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <xQueueGenericSend+0x72>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e000      	b.n	8006c04 <xQueueGenericSend+0x74>
 8006c02:	2300      	movs	r3, #0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <xQueueGenericSend+0x8e>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	623b      	str	r3, [r7, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c1e:	f000 ff79 	bl	8007b14 <xTaskGetSchedulerState>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <xQueueGenericSend+0x9e>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <xQueueGenericSend+0xa2>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <xQueueGenericSend+0xa4>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <xQueueGenericSend+0xbe>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	61fb      	str	r3, [r7, #28]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c4e:	f001 f999 	bl	8007f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d302      	bcc.n	8006c64 <xQueueGenericSend+0xd4>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d129      	bne.n	8006cb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c6a:	f000 f88f 	bl	8006d8c <prvCopyDataToQueue>
 8006c6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d010      	beq.n	8006c9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	3324      	adds	r3, #36	; 0x24
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fd89 	bl	8007794 <xTaskRemoveFromEventList>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d013      	beq.n	8006cb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c88:	4b3f      	ldr	r3, [pc, #252]	; (8006d88 <xQueueGenericSend+0x1f8>)
 8006c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	e00a      	b.n	8006cb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d007      	beq.n	8006cb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ca0:	4b39      	ldr	r3, [pc, #228]	; (8006d88 <xQueueGenericSend+0x1f8>)
 8006ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006cb0:	f001 f998 	bl	8007fe4 <vPortExitCritical>
				return pdPASS;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e063      	b.n	8006d80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d103      	bne.n	8006cc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cbe:	f001 f991 	bl	8007fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e05c      	b.n	8006d80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ccc:	f107 0314 	add.w	r3, r7, #20
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fdc1 	bl	8007858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cda:	f001 f983 	bl	8007fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cde:	f000 fb71 	bl	80073c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ce2:	f001 f94f 	bl	8007f84 <vPortEnterCritical>
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cec:	b25b      	sxtb	r3, r3
 8006cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf2:	d103      	bne.n	8006cfc <xQueueGenericSend+0x16c>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d02:	b25b      	sxtb	r3, r3
 8006d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d08:	d103      	bne.n	8006d12 <xQueueGenericSend+0x182>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d12:	f001 f967 	bl	8007fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d16:	1d3a      	adds	r2, r7, #4
 8006d18:	f107 0314 	add.w	r3, r7, #20
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fdb0 	bl	8007884 <xTaskCheckForTimeOut>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d124      	bne.n	8006d74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d2c:	f000 f8ea 	bl	8006f04 <prvIsQueueFull>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d018      	beq.n	8006d68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	3310      	adds	r3, #16
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fd04 	bl	800774c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d46:	f000 f88b 	bl	8006e60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d4a:	f000 fb49 	bl	80073e0 <xTaskResumeAll>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f47f af7c 	bne.w	8006c4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d56:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <xQueueGenericSend+0x1f8>)
 8006d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	e772      	b.n	8006c4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d6a:	f000 f879 	bl	8006e60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d6e:	f000 fb37 	bl	80073e0 <xTaskResumeAll>
 8006d72:	e76c      	b.n	8006c4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d76:	f000 f873 	bl	8006e60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d7a:	f000 fb31 	bl	80073e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3738      	adds	r7, #56	; 0x38
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10d      	bne.n	8006dc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d14d      	bne.n	8006e4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 feca 	bl	8007b50 <xTaskPriorityDisinherit>
 8006dbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	609a      	str	r2, [r3, #8]
 8006dc4:	e043      	b.n	8006e4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d119      	bne.n	8006e00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6858      	ldr	r0, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	f001 fc8e 	bl	80086f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	441a      	add	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d32b      	bcc.n	8006e4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	605a      	str	r2, [r3, #4]
 8006dfe:	e026      	b.n	8006e4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68d8      	ldr	r0, [r3, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	461a      	mov	r2, r3
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	f001 fc74 	bl	80086f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	425b      	negs	r3, r3
 8006e1a:	441a      	add	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d207      	bcs.n	8006e3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	425b      	negs	r3, r3
 8006e36:	441a      	add	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d105      	bne.n	8006e4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e56:	697b      	ldr	r3, [r7, #20]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e68:	f001 f88c 	bl	8007f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e74:	e011      	b.n	8006e9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d012      	beq.n	8006ea4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3324      	adds	r3, #36	; 0x24
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fc86 	bl	8007794 <xTaskRemoveFromEventList>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e8e:	f000 fd5b 	bl	8007948 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	dce9      	bgt.n	8006e76 <prvUnlockQueue+0x16>
 8006ea2:	e000      	b.n	8006ea6 <prvUnlockQueue+0x46>
					break;
 8006ea4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	22ff      	movs	r2, #255	; 0xff
 8006eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006eae:	f001 f899 	bl	8007fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006eb2:	f001 f867 	bl	8007f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ebc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ebe:	e011      	b.n	8006ee4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d012      	beq.n	8006eee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3310      	adds	r3, #16
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fc61 	bl	8007794 <xTaskRemoveFromEventList>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ed8:	f000 fd36 	bl	8007948 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	dce9      	bgt.n	8006ec0 <prvUnlockQueue+0x60>
 8006eec:	e000      	b.n	8006ef0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006eee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	22ff      	movs	r2, #255	; 0xff
 8006ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ef8:	f001 f874 	bl	8007fe4 <vPortExitCritical>
}
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f0c:	f001 f83a 	bl	8007f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d102      	bne.n	8006f22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	e001      	b.n	8006f26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f26:	f001 f85d 	bl	8007fe4 <vPortExitCritical>

	return xReturn;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08e      	sub	sp, #56	; 0x38
 8006f38:	af04      	add	r7, sp, #16
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	623b      	str	r3, [r7, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <xTaskCreateStatic+0x46>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	61fb      	str	r3, [r7, #28]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f7a:	23a0      	movs	r3, #160	; 0xa0
 8006f7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2ba0      	cmp	r3, #160	; 0xa0
 8006f82:	d00a      	beq.n	8006f9a <xTaskCreateStatic+0x66>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	61bb      	str	r3, [r7, #24]
}
 8006f96:	bf00      	nop
 8006f98:	e7fe      	b.n	8006f98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01e      	beq.n	8006fe0 <xTaskCreateStatic+0xac>
 8006fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01b      	beq.n	8006fe0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9303      	str	r3, [sp, #12]
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	9302      	str	r3, [sp, #8]
 8006fc2:	f107 0314 	add.w	r3, r7, #20
 8006fc6:	9301      	str	r3, [sp, #4]
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 f850 	bl	8007078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fda:	f000 f8eb 	bl	80071b4 <prvAddNewTaskToReadyList>
 8006fde:	e001      	b.n	8006fe4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fe4:	697b      	ldr	r3, [r7, #20]
	}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3728      	adds	r7, #40	; 0x28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b08c      	sub	sp, #48	; 0x30
 8006ff2:	af04      	add	r7, sp, #16
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	603b      	str	r3, [r7, #0]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ffe:	88fb      	ldrh	r3, [r7, #6]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4618      	mov	r0, r3
 8007004:	f001 f8a0 	bl	8008148 <pvPortMalloc>
 8007008:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00e      	beq.n	800702e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007010:	20a0      	movs	r0, #160	; 0xa0
 8007012:	f001 f899 	bl	8008148 <pvPortMalloc>
 8007016:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	631a      	str	r2, [r3, #48]	; 0x30
 8007024:	e005      	b.n	8007032 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007026:	6978      	ldr	r0, [r7, #20]
 8007028:	f001 f95a 	bl	80082e0 <vPortFree>
 800702c:	e001      	b.n	8007032 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d017      	beq.n	8007068 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007040:	88fa      	ldrh	r2, [r7, #6]
 8007042:	2300      	movs	r3, #0
 8007044:	9303      	str	r3, [sp, #12]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	9302      	str	r3, [sp, #8]
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f80e 	bl	8007078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800705c:	69f8      	ldr	r0, [r7, #28]
 800705e:	f000 f8a9 	bl	80071b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007062:	2301      	movs	r3, #1
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	e002      	b.n	800706e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007068:	f04f 33ff 	mov.w	r3, #4294967295
 800706c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800706e:	69bb      	ldr	r3, [r7, #24]
	}
 8007070:	4618      	mov	r0, r3
 8007072:	3720      	adds	r7, #32
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007090:	3b01      	subs	r3, #1
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	f023 0307 	bic.w	r3, r3, #7
 800709e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	617b      	str	r3, [r7, #20]
}
 80070bc:	bf00      	nop
 80070be:	e7fe      	b.n	80070be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01f      	beq.n	8007106 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070c6:	2300      	movs	r3, #0
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	e012      	b.n	80070f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	4413      	add	r3, r2
 80070d2:	7819      	ldrb	r1, [r3, #0]
 80070d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	3334      	adds	r3, #52	; 0x34
 80070dc:	460a      	mov	r2, r1
 80070de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4413      	add	r3, r2
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d006      	beq.n	80070fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	3301      	adds	r3, #1
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2b0f      	cmp	r3, #15
 80070f6:	d9e9      	bls.n	80070cc <prvInitialiseNewTask+0x54>
 80070f8:	e000      	b.n	80070fc <prvInitialiseNewTask+0x84>
			{
				break;
 80070fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007104:	e003      	b.n	800710e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	2b06      	cmp	r3, #6
 8007112:	d901      	bls.n	8007118 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007114:	2306      	movs	r3, #6
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800711c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007122:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	2200      	movs	r2, #0
 8007128:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	3304      	adds	r3, #4
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff fb5f 	bl	80067f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	3318      	adds	r3, #24
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fb5a 	bl	80067f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007142:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	f1c3 0207 	rsb	r2, r3, #7
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007152:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	2200      	movs	r2, #0
 8007160:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	334c      	adds	r3, #76	; 0x4c
 8007168:	224c      	movs	r2, #76	; 0x4c
 800716a:	2100      	movs	r1, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f001 fa23 	bl	80085b8 <memset>
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <prvInitialiseNewTask+0x130>)
 8007176:	651a      	str	r2, [r3, #80]	; 0x50
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	4a0c      	ldr	r2, [pc, #48]	; (80071ac <prvInitialiseNewTask+0x134>)
 800717c:	655a      	str	r2, [r3, #84]	; 0x54
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	4a0b      	ldr	r2, [pc, #44]	; (80071b0 <prvInitialiseNewTask+0x138>)
 8007182:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	68f9      	ldr	r1, [r7, #12]
 8007188:	69b8      	ldr	r0, [r7, #24]
 800718a:	f000 fdcd 	bl	8007d28 <pxPortInitialiseStack>
 800718e:	4602      	mov	r2, r0
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071a0:	bf00      	nop
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	2000436c 	.word	0x2000436c
 80071ac:	200043d4 	.word	0x200043d4
 80071b0:	2000443c 	.word	0x2000443c

080071b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071bc:	f000 fee2 	bl	8007f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071c0:	4b2a      	ldr	r3, [pc, #168]	; (800726c <prvAddNewTaskToReadyList+0xb8>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	4a29      	ldr	r2, [pc, #164]	; (800726c <prvAddNewTaskToReadyList+0xb8>)
 80071c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071ca:	4b29      	ldr	r3, [pc, #164]	; (8007270 <prvAddNewTaskToReadyList+0xbc>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071d2:	4a27      	ldr	r2, [pc, #156]	; (8007270 <prvAddNewTaskToReadyList+0xbc>)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071d8:	4b24      	ldr	r3, [pc, #144]	; (800726c <prvAddNewTaskToReadyList+0xb8>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d110      	bne.n	8007202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071e0:	f000 fbd6 	bl	8007990 <prvInitialiseTaskLists>
 80071e4:	e00d      	b.n	8007202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071e6:	4b23      	ldr	r3, [pc, #140]	; (8007274 <prvAddNewTaskToReadyList+0xc0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071ee:	4b20      	ldr	r3, [pc, #128]	; (8007270 <prvAddNewTaskToReadyList+0xbc>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d802      	bhi.n	8007202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071fc:	4a1c      	ldr	r2, [pc, #112]	; (8007270 <prvAddNewTaskToReadyList+0xbc>)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007202:	4b1d      	ldr	r3, [pc, #116]	; (8007278 <prvAddNewTaskToReadyList+0xc4>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <prvAddNewTaskToReadyList+0xc4>)
 800720a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	2201      	movs	r2, #1
 8007212:	409a      	lsls	r2, r3
 8007214:	4b19      	ldr	r3, [pc, #100]	; (800727c <prvAddNewTaskToReadyList+0xc8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4313      	orrs	r3, r2
 800721a:	4a18      	ldr	r2, [pc, #96]	; (800727c <prvAddNewTaskToReadyList+0xc8>)
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4a15      	ldr	r2, [pc, #84]	; (8007280 <prvAddNewTaskToReadyList+0xcc>)
 800722c:	441a      	add	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3304      	adds	r3, #4
 8007232:	4619      	mov	r1, r3
 8007234:	4610      	mov	r0, r2
 8007236:	f7ff fae9 	bl	800680c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800723a:	f000 fed3 	bl	8007fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800723e:	4b0d      	ldr	r3, [pc, #52]	; (8007274 <prvAddNewTaskToReadyList+0xc0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00e      	beq.n	8007264 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <prvAddNewTaskToReadyList+0xbc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	429a      	cmp	r2, r3
 8007252:	d207      	bcs.n	8007264 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007254:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <prvAddNewTaskToReadyList+0xd0>)
 8007256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000718 	.word	0x20000718
 8007270:	20000618 	.word	0x20000618
 8007274:	20000724 	.word	0x20000724
 8007278:	20000734 	.word	0x20000734
 800727c:	20000720 	.word	0x20000720
 8007280:	2000061c 	.word	0x2000061c
 8007284:	e000ed04 	.word	0xe000ed04

08007288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d017      	beq.n	80072ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <vTaskDelay+0x60>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <vTaskDelay+0x30>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	60bb      	str	r3, [r7, #8]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072b8:	f000 f884 	bl	80073c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072bc:	2100      	movs	r1, #0
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fccc 	bl	8007c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072c4:	f000 f88c 	bl	80073e0 <xTaskResumeAll>
 80072c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d107      	bne.n	80072e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072d0:	4b06      	ldr	r3, [pc, #24]	; (80072ec <vTaskDelay+0x64>)
 80072d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20000740 	.word	0x20000740
 80072ec:	e000ed04 	.word	0xe000ed04

080072f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072fe:	463a      	mov	r2, r7
 8007300:	1d39      	adds	r1, r7, #4
 8007302:	f107 0308 	add.w	r3, r7, #8
 8007306:	4618      	mov	r0, r3
 8007308:	f7fa fb4e 	bl	80019a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	9202      	str	r2, [sp, #8]
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	2300      	movs	r3, #0
 800731c:	460a      	mov	r2, r1
 800731e:	4921      	ldr	r1, [pc, #132]	; (80073a4 <vTaskStartScheduler+0xb4>)
 8007320:	4821      	ldr	r0, [pc, #132]	; (80073a8 <vTaskStartScheduler+0xb8>)
 8007322:	f7ff fe07 	bl	8006f34 <xTaskCreateStatic>
 8007326:	4603      	mov	r3, r0
 8007328:	4a20      	ldr	r2, [pc, #128]	; (80073ac <vTaskStartScheduler+0xbc>)
 800732a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800732c:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <vTaskStartScheduler+0xbc>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007334:	2301      	movs	r3, #1
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e001      	b.n	800733e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d11b      	bne.n	800737c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	613b      	str	r3, [r7, #16]
}
 8007356:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007358:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <vTaskStartScheduler+0xc0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	334c      	adds	r3, #76	; 0x4c
 800735e:	4a15      	ldr	r2, [pc, #84]	; (80073b4 <vTaskStartScheduler+0xc4>)
 8007360:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007362:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <vTaskStartScheduler+0xc8>)
 8007364:	f04f 32ff 	mov.w	r2, #4294967295
 8007368:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800736a:	4b14      	ldr	r3, [pc, #80]	; (80073bc <vTaskStartScheduler+0xcc>)
 800736c:	2201      	movs	r2, #1
 800736e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007370:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <vTaskStartScheduler+0xd0>)
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007376:	f000 fd63 	bl	8007e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800737a:	e00e      	b.n	800739a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d10a      	bne.n	800739a <vTaskStartScheduler+0xaa>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	60fb      	str	r3, [r7, #12]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <vTaskStartScheduler+0xa8>
}
 800739a:	bf00      	nop
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	08009a30 	.word	0x08009a30
 80073a8:	08007961 	.word	0x08007961
 80073ac:	2000073c 	.word	0x2000073c
 80073b0:	20000618 	.word	0x20000618
 80073b4:	20000078 	.word	0x20000078
 80073b8:	20000738 	.word	0x20000738
 80073bc:	20000724 	.word	0x20000724
 80073c0:	2000071c 	.word	0x2000071c

080073c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073c8:	4b04      	ldr	r3, [pc, #16]	; (80073dc <vTaskSuspendAll+0x18>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	4a03      	ldr	r2, [pc, #12]	; (80073dc <vTaskSuspendAll+0x18>)
 80073d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073d2:	bf00      	nop
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	20000740 	.word	0x20000740

080073e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073ee:	4b41      	ldr	r3, [pc, #260]	; (80074f4 <xTaskResumeAll+0x114>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10a      	bne.n	800740c <xTaskResumeAll+0x2c>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	603b      	str	r3, [r7, #0]
}
 8007408:	bf00      	nop
 800740a:	e7fe      	b.n	800740a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800740c:	f000 fdba 	bl	8007f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007410:	4b38      	ldr	r3, [pc, #224]	; (80074f4 <xTaskResumeAll+0x114>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3b01      	subs	r3, #1
 8007416:	4a37      	ldr	r2, [pc, #220]	; (80074f4 <xTaskResumeAll+0x114>)
 8007418:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800741a:	4b36      	ldr	r3, [pc, #216]	; (80074f4 <xTaskResumeAll+0x114>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d161      	bne.n	80074e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007422:	4b35      	ldr	r3, [pc, #212]	; (80074f8 <xTaskResumeAll+0x118>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d05d      	beq.n	80074e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800742a:	e02e      	b.n	800748a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800742c:	4b33      	ldr	r3, [pc, #204]	; (80074fc <xTaskResumeAll+0x11c>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3318      	adds	r3, #24
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff fa44 	bl	80068c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3304      	adds	r3, #4
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff fa3f 	bl	80068c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	2201      	movs	r2, #1
 800744e:	409a      	lsls	r2, r3
 8007450:	4b2b      	ldr	r3, [pc, #172]	; (8007500 <xTaskResumeAll+0x120>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4313      	orrs	r3, r2
 8007456:	4a2a      	ldr	r2, [pc, #168]	; (8007500 <xTaskResumeAll+0x120>)
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4a27      	ldr	r2, [pc, #156]	; (8007504 <xTaskResumeAll+0x124>)
 8007468:	441a      	add	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3304      	adds	r3, #4
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f7ff f9cb 	bl	800680c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747a:	4b23      	ldr	r3, [pc, #140]	; (8007508 <xTaskResumeAll+0x128>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	429a      	cmp	r2, r3
 8007482:	d302      	bcc.n	800748a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007484:	4b21      	ldr	r3, [pc, #132]	; (800750c <xTaskResumeAll+0x12c>)
 8007486:	2201      	movs	r2, #1
 8007488:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800748a:	4b1c      	ldr	r3, [pc, #112]	; (80074fc <xTaskResumeAll+0x11c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1cc      	bne.n	800742c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007498:	f000 fb1c 	bl	8007ad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800749c:	4b1c      	ldr	r3, [pc, #112]	; (8007510 <xTaskResumeAll+0x130>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d010      	beq.n	80074ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074a8:	f000 f836 	bl	8007518 <xTaskIncrementTick>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80074b2:	4b16      	ldr	r3, [pc, #88]	; (800750c <xTaskResumeAll+0x12c>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f1      	bne.n	80074a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80074c4:	4b12      	ldr	r3, [pc, #72]	; (8007510 <xTaskResumeAll+0x130>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074ca:	4b10      	ldr	r3, [pc, #64]	; (800750c <xTaskResumeAll+0x12c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d009      	beq.n	80074e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074d2:	2301      	movs	r3, #1
 80074d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074d6:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <xTaskResumeAll+0x134>)
 80074d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074e6:	f000 fd7d 	bl	8007fe4 <vPortExitCritical>

	return xAlreadyYielded;
 80074ea:	68bb      	ldr	r3, [r7, #8]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000740 	.word	0x20000740
 80074f8:	20000718 	.word	0x20000718
 80074fc:	200006d8 	.word	0x200006d8
 8007500:	20000720 	.word	0x20000720
 8007504:	2000061c 	.word	0x2000061c
 8007508:	20000618 	.word	0x20000618
 800750c:	2000072c 	.word	0x2000072c
 8007510:	20000728 	.word	0x20000728
 8007514:	e000ed04 	.word	0xe000ed04

08007518 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800751e:	2300      	movs	r3, #0
 8007520:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007522:	4b4e      	ldr	r3, [pc, #312]	; (800765c <xTaskIncrementTick+0x144>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	f040 808e 	bne.w	8007648 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800752c:	4b4c      	ldr	r3, [pc, #304]	; (8007660 <xTaskIncrementTick+0x148>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3301      	adds	r3, #1
 8007532:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007534:	4a4a      	ldr	r2, [pc, #296]	; (8007660 <xTaskIncrementTick+0x148>)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d120      	bne.n	8007582 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007540:	4b48      	ldr	r3, [pc, #288]	; (8007664 <xTaskIncrementTick+0x14c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <xTaskIncrementTick+0x48>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	603b      	str	r3, [r7, #0]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <xTaskIncrementTick+0x46>
 8007560:	4b40      	ldr	r3, [pc, #256]	; (8007664 <xTaskIncrementTick+0x14c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	4b40      	ldr	r3, [pc, #256]	; (8007668 <xTaskIncrementTick+0x150>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a3e      	ldr	r2, [pc, #248]	; (8007664 <xTaskIncrementTick+0x14c>)
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	4a3e      	ldr	r2, [pc, #248]	; (8007668 <xTaskIncrementTick+0x150>)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	4b3d      	ldr	r3, [pc, #244]	; (800766c <xTaskIncrementTick+0x154>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	4a3c      	ldr	r2, [pc, #240]	; (800766c <xTaskIncrementTick+0x154>)
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	f000 faa9 	bl	8007ad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007582:	4b3b      	ldr	r3, [pc, #236]	; (8007670 <xTaskIncrementTick+0x158>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	429a      	cmp	r2, r3
 800758a:	d348      	bcc.n	800761e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800758c:	4b35      	ldr	r3, [pc, #212]	; (8007664 <xTaskIncrementTick+0x14c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d104      	bne.n	80075a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007596:	4b36      	ldr	r3, [pc, #216]	; (8007670 <xTaskIncrementTick+0x158>)
 8007598:	f04f 32ff 	mov.w	r2, #4294967295
 800759c:	601a      	str	r2, [r3, #0]
					break;
 800759e:	e03e      	b.n	800761e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a0:	4b30      	ldr	r3, [pc, #192]	; (8007664 <xTaskIncrementTick+0x14c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d203      	bcs.n	80075c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075b8:	4a2d      	ldr	r2, [pc, #180]	; (8007670 <xTaskIncrementTick+0x158>)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075be:	e02e      	b.n	800761e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff f97e 	bl	80068c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	3318      	adds	r3, #24
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff f975 	bl	80068c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	2201      	movs	r2, #1
 80075e2:	409a      	lsls	r2, r3
 80075e4:	4b23      	ldr	r3, [pc, #140]	; (8007674 <xTaskIncrementTick+0x15c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	4a22      	ldr	r2, [pc, #136]	; (8007674 <xTaskIncrementTick+0x15c>)
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f2:	4613      	mov	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4a1f      	ldr	r2, [pc, #124]	; (8007678 <xTaskIncrementTick+0x160>)
 80075fc:	441a      	add	r2, r3
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	3304      	adds	r3, #4
 8007602:	4619      	mov	r1, r3
 8007604:	4610      	mov	r0, r2
 8007606:	f7ff f901 	bl	800680c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760e:	4b1b      	ldr	r3, [pc, #108]	; (800767c <xTaskIncrementTick+0x164>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	429a      	cmp	r2, r3
 8007616:	d3b9      	bcc.n	800758c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800761c:	e7b6      	b.n	800758c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800761e:	4b17      	ldr	r3, [pc, #92]	; (800767c <xTaskIncrementTick+0x164>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007624:	4914      	ldr	r1, [pc, #80]	; (8007678 <xTaskIncrementTick+0x160>)
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d901      	bls.n	800763a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007636:	2301      	movs	r3, #1
 8007638:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800763a:	4b11      	ldr	r3, [pc, #68]	; (8007680 <xTaskIncrementTick+0x168>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007642:	2301      	movs	r3, #1
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	e004      	b.n	8007652 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007648:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <xTaskIncrementTick+0x16c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	4a0d      	ldr	r2, [pc, #52]	; (8007684 <xTaskIncrementTick+0x16c>)
 8007650:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007652:	697b      	ldr	r3, [r7, #20]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20000740 	.word	0x20000740
 8007660:	2000071c 	.word	0x2000071c
 8007664:	200006d0 	.word	0x200006d0
 8007668:	200006d4 	.word	0x200006d4
 800766c:	20000730 	.word	0x20000730
 8007670:	20000738 	.word	0x20000738
 8007674:	20000720 	.word	0x20000720
 8007678:	2000061c 	.word	0x2000061c
 800767c:	20000618 	.word	0x20000618
 8007680:	2000072c 	.word	0x2000072c
 8007684:	20000728 	.word	0x20000728

08007688 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800768e:	4b29      	ldr	r3, [pc, #164]	; (8007734 <vTaskSwitchContext+0xac>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007696:	4b28      	ldr	r3, [pc, #160]	; (8007738 <vTaskSwitchContext+0xb0>)
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800769c:	e044      	b.n	8007728 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800769e:	4b26      	ldr	r3, [pc, #152]	; (8007738 <vTaskSwitchContext+0xb0>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a4:	4b25      	ldr	r3, [pc, #148]	; (800773c <vTaskSwitchContext+0xb4>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	fab3 f383 	clz	r3, r3
 80076b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	f1c3 031f 	rsb	r3, r3, #31
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	4921      	ldr	r1, [pc, #132]	; (8007740 <vTaskSwitchContext+0xb8>)
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4613      	mov	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	440b      	add	r3, r1
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	607b      	str	r3, [r7, #4]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <vTaskSwitchContext+0x5a>
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4a14      	ldr	r2, [pc, #80]	; (8007740 <vTaskSwitchContext+0xb8>)
 80076f0:	4413      	add	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	605a      	str	r2, [r3, #4]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	3308      	adds	r3, #8
 8007706:	429a      	cmp	r2, r3
 8007708:	d104      	bne.n	8007714 <vTaskSwitchContext+0x8c>
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	605a      	str	r2, [r3, #4]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	4a0a      	ldr	r2, [pc, #40]	; (8007744 <vTaskSwitchContext+0xbc>)
 800771c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800771e:	4b09      	ldr	r3, [pc, #36]	; (8007744 <vTaskSwitchContext+0xbc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	334c      	adds	r3, #76	; 0x4c
 8007724:	4a08      	ldr	r2, [pc, #32]	; (8007748 <vTaskSwitchContext+0xc0>)
 8007726:	6013      	str	r3, [r2, #0]
}
 8007728:	bf00      	nop
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	20000740 	.word	0x20000740
 8007738:	2000072c 	.word	0x2000072c
 800773c:	20000720 	.word	0x20000720
 8007740:	2000061c 	.word	0x2000061c
 8007744:	20000618 	.word	0x20000618
 8007748:	20000078 	.word	0x20000078

0800774c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	60fb      	str	r3, [r7, #12]
}
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007772:	4b07      	ldr	r3, [pc, #28]	; (8007790 <vTaskPlaceOnEventList+0x44>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3318      	adds	r3, #24
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff f86a 	bl	8006854 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007780:	2101      	movs	r1, #1
 8007782:	6838      	ldr	r0, [r7, #0]
 8007784:	f000 fa6a 	bl	8007c5c <prvAddCurrentTaskToDelayedList>
}
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000618 	.word	0x20000618

08007794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10a      	bne.n	80077c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	60fb      	str	r3, [r7, #12]
}
 80077bc:	bf00      	nop
 80077be:	e7fe      	b.n	80077be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	3318      	adds	r3, #24
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff f87e 	bl	80068c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ca:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <xTaskRemoveFromEventList+0xac>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d11c      	bne.n	800780c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff f875 	bl	80068c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	2201      	movs	r2, #1
 80077e2:	409a      	lsls	r2, r3
 80077e4:	4b17      	ldr	r3, [pc, #92]	; (8007844 <xTaskRemoveFromEventList+0xb0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	4a16      	ldr	r2, [pc, #88]	; (8007844 <xTaskRemoveFromEventList+0xb0>)
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4a13      	ldr	r2, [pc, #76]	; (8007848 <xTaskRemoveFromEventList+0xb4>)
 80077fc:	441a      	add	r2, r3
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3304      	adds	r3, #4
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f7ff f801 	bl	800680c <vListInsertEnd>
 800780a:	e005      	b.n	8007818 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3318      	adds	r3, #24
 8007810:	4619      	mov	r1, r3
 8007812:	480e      	ldr	r0, [pc, #56]	; (800784c <xTaskRemoveFromEventList+0xb8>)
 8007814:	f7fe fffa 	bl	800680c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	4b0c      	ldr	r3, [pc, #48]	; (8007850 <xTaskRemoveFromEventList+0xbc>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	429a      	cmp	r2, r3
 8007824:	d905      	bls.n	8007832 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007826:	2301      	movs	r3, #1
 8007828:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800782a:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <xTaskRemoveFromEventList+0xc0>)
 800782c:	2201      	movs	r2, #1
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e001      	b.n	8007836 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007836:	697b      	ldr	r3, [r7, #20]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000740 	.word	0x20000740
 8007844:	20000720 	.word	0x20000720
 8007848:	2000061c 	.word	0x2000061c
 800784c:	200006d8 	.word	0x200006d8
 8007850:	20000618 	.word	0x20000618
 8007854:	2000072c 	.word	0x2000072c

08007858 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <vTaskInternalSetTimeOutState+0x24>)
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007868:	4b05      	ldr	r3, [pc, #20]	; (8007880 <vTaskInternalSetTimeOutState+0x28>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	605a      	str	r2, [r3, #4]
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	20000730 	.word	0x20000730
 8007880:	2000071c 	.word	0x2000071c

08007884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10a      	bne.n	80078aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	613b      	str	r3, [r7, #16]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	60fb      	str	r3, [r7, #12]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80078c6:	f000 fb5d 	bl	8007f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80078ca:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <xTaskCheckForTimeOut+0xbc>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e2:	d102      	bne.n	80078ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	e023      	b.n	8007932 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <xTaskCheckForTimeOut+0xc0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d007      	beq.n	8007906 <xTaskCheckForTimeOut+0x82>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d302      	bcc.n	8007906 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007900:	2301      	movs	r3, #1
 8007902:	61fb      	str	r3, [r7, #28]
 8007904:	e015      	b.n	8007932 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	429a      	cmp	r2, r3
 800790e:	d20b      	bcs.n	8007928 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	1ad2      	subs	r2, r2, r3
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff ff9b 	bl	8007858 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007922:	2300      	movs	r3, #0
 8007924:	61fb      	str	r3, [r7, #28]
 8007926:	e004      	b.n	8007932 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800792e:	2301      	movs	r3, #1
 8007930:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007932:	f000 fb57 	bl	8007fe4 <vPortExitCritical>

	return xReturn;
 8007936:	69fb      	ldr	r3, [r7, #28]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3720      	adds	r7, #32
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	2000071c 	.word	0x2000071c
 8007944:	20000730 	.word	0x20000730

08007948 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800794c:	4b03      	ldr	r3, [pc, #12]	; (800795c <vTaskMissedYield+0x14>)
 800794e:	2201      	movs	r2, #1
 8007950:	601a      	str	r2, [r3, #0]
}
 8007952:	bf00      	nop
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	2000072c 	.word	0x2000072c

08007960 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007968:	f000 f852 	bl	8007a10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800796c:	4b06      	ldr	r3, [pc, #24]	; (8007988 <prvIdleTask+0x28>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d9f9      	bls.n	8007968 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007974:	4b05      	ldr	r3, [pc, #20]	; (800798c <prvIdleTask+0x2c>)
 8007976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007984:	e7f0      	b.n	8007968 <prvIdleTask+0x8>
 8007986:	bf00      	nop
 8007988:	2000061c 	.word	0x2000061c
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007996:	2300      	movs	r3, #0
 8007998:	607b      	str	r3, [r7, #4]
 800799a:	e00c      	b.n	80079b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4a12      	ldr	r2, [pc, #72]	; (80079f0 <prvInitialiseTaskLists+0x60>)
 80079a8:	4413      	add	r3, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe ff01 	bl	80067b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3301      	adds	r3, #1
 80079b4:	607b      	str	r3, [r7, #4]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b06      	cmp	r3, #6
 80079ba:	d9ef      	bls.n	800799c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079bc:	480d      	ldr	r0, [pc, #52]	; (80079f4 <prvInitialiseTaskLists+0x64>)
 80079be:	f7fe fef8 	bl	80067b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079c2:	480d      	ldr	r0, [pc, #52]	; (80079f8 <prvInitialiseTaskLists+0x68>)
 80079c4:	f7fe fef5 	bl	80067b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079c8:	480c      	ldr	r0, [pc, #48]	; (80079fc <prvInitialiseTaskLists+0x6c>)
 80079ca:	f7fe fef2 	bl	80067b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079ce:	480c      	ldr	r0, [pc, #48]	; (8007a00 <prvInitialiseTaskLists+0x70>)
 80079d0:	f7fe feef 	bl	80067b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079d4:	480b      	ldr	r0, [pc, #44]	; (8007a04 <prvInitialiseTaskLists+0x74>)
 80079d6:	f7fe feec 	bl	80067b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <prvInitialiseTaskLists+0x78>)
 80079dc:	4a05      	ldr	r2, [pc, #20]	; (80079f4 <prvInitialiseTaskLists+0x64>)
 80079de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079e0:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <prvInitialiseTaskLists+0x7c>)
 80079e2:	4a05      	ldr	r2, [pc, #20]	; (80079f8 <prvInitialiseTaskLists+0x68>)
 80079e4:	601a      	str	r2, [r3, #0]
}
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	2000061c 	.word	0x2000061c
 80079f4:	200006a8 	.word	0x200006a8
 80079f8:	200006bc 	.word	0x200006bc
 80079fc:	200006d8 	.word	0x200006d8
 8007a00:	200006ec 	.word	0x200006ec
 8007a04:	20000704 	.word	0x20000704
 8007a08:	200006d0 	.word	0x200006d0
 8007a0c:	200006d4 	.word	0x200006d4

08007a10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a16:	e019      	b.n	8007a4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a18:	f000 fab4 	bl	8007f84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a1c:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <prvCheckTasksWaitingTermination+0x50>)
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3304      	adds	r3, #4
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe ff4c 	bl	80068c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <prvCheckTasksWaitingTermination+0x54>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	4a0b      	ldr	r2, [pc, #44]	; (8007a64 <prvCheckTasksWaitingTermination+0x54>)
 8007a36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a38:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <prvCheckTasksWaitingTermination+0x58>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4a0a      	ldr	r2, [pc, #40]	; (8007a68 <prvCheckTasksWaitingTermination+0x58>)
 8007a40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a42:	f000 facf 	bl	8007fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f810 	bl	8007a6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <prvCheckTasksWaitingTermination+0x58>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e1      	bne.n	8007a18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	200006ec 	.word	0x200006ec
 8007a64:	20000718 	.word	0x20000718
 8007a68:	20000700 	.word	0x20000700

08007a6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	334c      	adds	r3, #76	; 0x4c
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fdbb 	bl	80085f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d108      	bne.n	8007a9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fc27 	bl	80082e0 <vPortFree>
				vPortFree( pxTCB );
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fc24 	bl	80082e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a98:	e018      	b.n	8007acc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d103      	bne.n	8007aac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc1b 	bl	80082e0 <vPortFree>
	}
 8007aaa:	e00f      	b.n	8007acc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d00a      	beq.n	8007acc <prvDeleteTCB+0x60>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	60fb      	str	r3, [r7, #12]
}
 8007ac8:	bf00      	nop
 8007aca:	e7fe      	b.n	8007aca <prvDeleteTCB+0x5e>
	}
 8007acc:	bf00      	nop
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ada:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <prvResetNextTaskUnblockTime+0x38>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d104      	bne.n	8007aee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <prvResetNextTaskUnblockTime+0x3c>)
 8007ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007aec:	e008      	b.n	8007b00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aee:	4b07      	ldr	r3, [pc, #28]	; (8007b0c <prvResetNextTaskUnblockTime+0x38>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	4a04      	ldr	r2, [pc, #16]	; (8007b10 <prvResetNextTaskUnblockTime+0x3c>)
 8007afe:	6013      	str	r3, [r2, #0]
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	200006d0 	.word	0x200006d0
 8007b10:	20000738 	.word	0x20000738

08007b14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b1a:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <xTaskGetSchedulerState+0x34>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b22:	2301      	movs	r3, #1
 8007b24:	607b      	str	r3, [r7, #4]
 8007b26:	e008      	b.n	8007b3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b28:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <xTaskGetSchedulerState+0x38>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b30:	2302      	movs	r3, #2
 8007b32:	607b      	str	r3, [r7, #4]
 8007b34:	e001      	b.n	8007b3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b36:	2300      	movs	r3, #0
 8007b38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b3a:	687b      	ldr	r3, [r7, #4]
	}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	20000724 	.word	0x20000724
 8007b4c:	20000740 	.word	0x20000740

08007b50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d06e      	beq.n	8007c44 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b66:	4b3a      	ldr	r3, [pc, #232]	; (8007c50 <xTaskPriorityDisinherit+0x100>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d00a      	beq.n	8007b86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	60fb      	str	r3, [r7, #12]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	60bb      	str	r3, [r7, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba8:	1e5a      	subs	r2, r3, #1
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d044      	beq.n	8007c44 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d140      	bne.n	8007c44 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe fe7d 	bl	80068c6 <uxListRemove>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d115      	bne.n	8007bfe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd6:	491f      	ldr	r1, [pc, #124]	; (8007c54 <xTaskPriorityDisinherit+0x104>)
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <xTaskPriorityDisinherit+0xae>
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	2201      	movs	r2, #1
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43da      	mvns	r2, r3
 8007bf4:	4b18      	ldr	r3, [pc, #96]	; (8007c58 <xTaskPriorityDisinherit+0x108>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	4a17      	ldr	r2, [pc, #92]	; (8007c58 <xTaskPriorityDisinherit+0x108>)
 8007bfc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	f1c3 0207 	rsb	r2, r3, #7
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	2201      	movs	r2, #1
 8007c18:	409a      	lsls	r2, r3
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <xTaskPriorityDisinherit+0x108>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	4a0d      	ldr	r2, [pc, #52]	; (8007c58 <xTaskPriorityDisinherit+0x108>)
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4a08      	ldr	r2, [pc, #32]	; (8007c54 <xTaskPriorityDisinherit+0x104>)
 8007c32:	441a      	add	r2, r3
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	3304      	adds	r3, #4
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f7fe fde6 	bl	800680c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c40:	2301      	movs	r3, #1
 8007c42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c44:	697b      	ldr	r3, [r7, #20]
	}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000618 	.word	0x20000618
 8007c54:	2000061c 	.word	0x2000061c
 8007c58:	20000720 	.word	0x20000720

08007c5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c66:	4b29      	ldr	r3, [pc, #164]	; (8007d0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c6c:	4b28      	ldr	r3, [pc, #160]	; (8007d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fe27 	bl	80068c6 <uxListRemove>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10b      	bne.n	8007c96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c7e:	4b24      	ldr	r3, [pc, #144]	; (8007d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	2201      	movs	r2, #1
 8007c86:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8a:	43da      	mvns	r2, r3
 8007c8c:	4b21      	ldr	r3, [pc, #132]	; (8007d14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4013      	ands	r3, r2
 8007c92:	4a20      	ldr	r2, [pc, #128]	; (8007d14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9c:	d10a      	bne.n	8007cb4 <prvAddCurrentTaskToDelayedList+0x58>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ca4:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4619      	mov	r1, r3
 8007cac:	481a      	ldr	r0, [pc, #104]	; (8007d18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007cae:	f7fe fdad 	bl	800680c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cb2:	e026      	b.n	8007d02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4413      	add	r3, r2
 8007cba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cbc:	4b14      	ldr	r3, [pc, #80]	; (8007d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d209      	bcs.n	8007ce0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ccc:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f7fe fdbb 	bl	8006854 <vListInsert>
}
 8007cde:	e010      	b.n	8007d02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ce0:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	4619      	mov	r1, r3
 8007cec:	4610      	mov	r0, r2
 8007cee:	f7fe fdb1 	bl	8006854 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cf2:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d202      	bcs.n	8007d02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007cfc:	4a09      	ldr	r2, [pc, #36]	; (8007d24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6013      	str	r3, [r2, #0]
}
 8007d02:	bf00      	nop
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	2000071c 	.word	0x2000071c
 8007d10:	20000618 	.word	0x20000618
 8007d14:	20000720 	.word	0x20000720
 8007d18:	20000704 	.word	0x20000704
 8007d1c:	200006d4 	.word	0x200006d4
 8007d20:	200006d0 	.word	0x200006d0
 8007d24:	20000738 	.word	0x20000738

08007d28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3b04      	subs	r3, #4
 8007d38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3b04      	subs	r3, #4
 8007d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f023 0201 	bic.w	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3b04      	subs	r3, #4
 8007d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d58:	4a0c      	ldr	r2, [pc, #48]	; (8007d8c <pxPortInitialiseStack+0x64>)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3b14      	subs	r3, #20
 8007d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3b04      	subs	r3, #4
 8007d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f06f 0202 	mvn.w	r2, #2
 8007d76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3b20      	subs	r3, #32
 8007d7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	08007d91 	.word	0x08007d91

08007d90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <prvTaskExitError+0x54>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da2:	d00a      	beq.n	8007dba <prvTaskExitError+0x2a>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	60fb      	str	r3, [r7, #12]
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <prvTaskExitError+0x28>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	60bb      	str	r3, [r7, #8]
}
 8007dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dce:	bf00      	nop
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0fc      	beq.n	8007dd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	20000028 	.word	0x20000028
	...

08007df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <pxCurrentTCBConst2>)
 8007df2:	6819      	ldr	r1, [r3, #0]
 8007df4:	6808      	ldr	r0, [r1, #0]
 8007df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfa:	f380 8809 	msr	PSP, r0
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f04f 0000 	mov.w	r0, #0
 8007e06:	f380 8811 	msr	BASEPRI, r0
 8007e0a:	4770      	bx	lr
 8007e0c:	f3af 8000 	nop.w

08007e10 <pxCurrentTCBConst2>:
 8007e10:	20000618 	.word	0x20000618
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop

08007e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e18:	4808      	ldr	r0, [pc, #32]	; (8007e3c <prvPortStartFirstTask+0x24>)
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	6800      	ldr	r0, [r0, #0]
 8007e1e:	f380 8808 	msr	MSP, r0
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8814 	msr	CONTROL, r0
 8007e2a:	b662      	cpsie	i
 8007e2c:	b661      	cpsie	f
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	df00      	svc	0
 8007e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e3a:	bf00      	nop
 8007e3c:	e000ed08 	.word	0xe000ed08

08007e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e46:	4b46      	ldr	r3, [pc, #280]	; (8007f60 <xPortStartScheduler+0x120>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a46      	ldr	r2, [pc, #280]	; (8007f64 <xPortStartScheduler+0x124>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d10a      	bne.n	8007e66 <xPortStartScheduler+0x26>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	613b      	str	r3, [r7, #16]
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e66:	4b3e      	ldr	r3, [pc, #248]	; (8007f60 <xPortStartScheduler+0x120>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a3f      	ldr	r2, [pc, #252]	; (8007f68 <xPortStartScheduler+0x128>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d10a      	bne.n	8007e86 <xPortStartScheduler+0x46>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	60fb      	str	r3, [r7, #12]
}
 8007e82:	bf00      	nop
 8007e84:	e7fe      	b.n	8007e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e86:	4b39      	ldr	r3, [pc, #228]	; (8007f6c <xPortStartScheduler+0x12c>)
 8007e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	22ff      	movs	r2, #255	; 0xff
 8007e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	4b31      	ldr	r3, [pc, #196]	; (8007f70 <xPortStartScheduler+0x130>)
 8007eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007eae:	4b31      	ldr	r3, [pc, #196]	; (8007f74 <xPortStartScheduler+0x134>)
 8007eb0:	2207      	movs	r2, #7
 8007eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eb4:	e009      	b.n	8007eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007eb6:	4b2f      	ldr	r3, [pc, #188]	; (8007f74 <xPortStartScheduler+0x134>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	4a2d      	ldr	r2, [pc, #180]	; (8007f74 <xPortStartScheduler+0x134>)
 8007ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed2:	2b80      	cmp	r3, #128	; 0x80
 8007ed4:	d0ef      	beq.n	8007eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ed6:	4b27      	ldr	r3, [pc, #156]	; (8007f74 <xPortStartScheduler+0x134>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f1c3 0307 	rsb	r3, r3, #7
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d00a      	beq.n	8007ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	60bb      	str	r3, [r7, #8]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ef8:	4b1e      	ldr	r3, [pc, #120]	; (8007f74 <xPortStartScheduler+0x134>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	4a1d      	ldr	r2, [pc, #116]	; (8007f74 <xPortStartScheduler+0x134>)
 8007f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f02:	4b1c      	ldr	r3, [pc, #112]	; (8007f74 <xPortStartScheduler+0x134>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f0a:	4a1a      	ldr	r2, [pc, #104]	; (8007f74 <xPortStartScheduler+0x134>)
 8007f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f16:	4b18      	ldr	r3, [pc, #96]	; (8007f78 <xPortStartScheduler+0x138>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a17      	ldr	r2, [pc, #92]	; (8007f78 <xPortStartScheduler+0x138>)
 8007f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f22:	4b15      	ldr	r3, [pc, #84]	; (8007f78 <xPortStartScheduler+0x138>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a14      	ldr	r2, [pc, #80]	; (8007f78 <xPortStartScheduler+0x138>)
 8007f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f2e:	f000 f8dd 	bl	80080ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f32:	4b12      	ldr	r3, [pc, #72]	; (8007f7c <xPortStartScheduler+0x13c>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f38:	f000 f8fc 	bl	8008134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f3c:	4b10      	ldr	r3, [pc, #64]	; (8007f80 <xPortStartScheduler+0x140>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a0f      	ldr	r2, [pc, #60]	; (8007f80 <xPortStartScheduler+0x140>)
 8007f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f48:	f7ff ff66 	bl	8007e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f4c:	f7ff fb9c 	bl	8007688 <vTaskSwitchContext>
	prvTaskExitError();
 8007f50:	f7ff ff1e 	bl	8007d90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	e000ed00 	.word	0xe000ed00
 8007f64:	410fc271 	.word	0x410fc271
 8007f68:	410fc270 	.word	0x410fc270
 8007f6c:	e000e400 	.word	0xe000e400
 8007f70:	20000744 	.word	0x20000744
 8007f74:	20000748 	.word	0x20000748
 8007f78:	e000ed20 	.word	0xe000ed20
 8007f7c:	20000028 	.word	0x20000028
 8007f80:	e000ef34 	.word	0xe000ef34

08007f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	607b      	str	r3, [r7, #4]
}
 8007f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f9e:	4b0f      	ldr	r3, [pc, #60]	; (8007fdc <vPortEnterCritical+0x58>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	4a0d      	ldr	r2, [pc, #52]	; (8007fdc <vPortEnterCritical+0x58>)
 8007fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fa8:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <vPortEnterCritical+0x58>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d10f      	bne.n	8007fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <vPortEnterCritical+0x5c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	603b      	str	r3, [r7, #0]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <vPortEnterCritical+0x4a>
	}
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20000028 	.word	0x20000028
 8007fe0:	e000ed04 	.word	0xe000ed04

08007fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <vPortExitCritical+0x50>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <vPortExitCritical+0x24>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	607b      	str	r3, [r7, #4]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008008:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <vPortExitCritical+0x50>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3b01      	subs	r3, #1
 800800e:	4a09      	ldr	r2, [pc, #36]	; (8008034 <vPortExitCritical+0x50>)
 8008010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008012:	4b08      	ldr	r3, [pc, #32]	; (8008034 <vPortExitCritical+0x50>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d105      	bne.n	8008026 <vPortExitCritical+0x42>
 800801a:	2300      	movs	r3, #0
 800801c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20000028 	.word	0x20000028
	...

08008040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008040:	f3ef 8009 	mrs	r0, PSP
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	4b15      	ldr	r3, [pc, #84]	; (80080a0 <pxCurrentTCBConst>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	f01e 0f10 	tst.w	lr, #16
 8008050:	bf08      	it	eq
 8008052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805a:	6010      	str	r0, [r2, #0]
 800805c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008064:	f380 8811 	msr	BASEPRI, r0
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f7ff fb0a 	bl	8007688 <vTaskSwitchContext>
 8008074:	f04f 0000 	mov.w	r0, #0
 8008078:	f380 8811 	msr	BASEPRI, r0
 800807c:	bc09      	pop	{r0, r3}
 800807e:	6819      	ldr	r1, [r3, #0]
 8008080:	6808      	ldr	r0, [r1, #0]
 8008082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008086:	f01e 0f10 	tst.w	lr, #16
 800808a:	bf08      	it	eq
 800808c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008090:	f380 8809 	msr	PSP, r0
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	f3af 8000 	nop.w

080080a0 <pxCurrentTCBConst>:
 80080a0:	20000618 	.word	0x20000618
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop

080080a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	607b      	str	r3, [r7, #4]
}
 80080c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080c2:	f7ff fa29 	bl	8007518 <xTaskIncrementTick>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080cc:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <SysTick_Handler+0x40>)
 80080ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	2300      	movs	r3, #0
 80080d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f383 8811 	msr	BASEPRI, r3
}
 80080de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	e000ed04 	.word	0xe000ed04

080080ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <vPortSetupTimerInterrupt+0x34>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080f6:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <vPortSetupTimerInterrupt+0x38>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080fc:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <vPortSetupTimerInterrupt+0x3c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a0a      	ldr	r2, [pc, #40]	; (800812c <vPortSetupTimerInterrupt+0x40>)
 8008102:	fba2 2303 	umull	r2, r3, r2, r3
 8008106:	099b      	lsrs	r3, r3, #6
 8008108:	4a09      	ldr	r2, [pc, #36]	; (8008130 <vPortSetupTimerInterrupt+0x44>)
 800810a:	3b01      	subs	r3, #1
 800810c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800810e:	4b04      	ldr	r3, [pc, #16]	; (8008120 <vPortSetupTimerInterrupt+0x34>)
 8008110:	2207      	movs	r2, #7
 8008112:	601a      	str	r2, [r3, #0]
}
 8008114:	bf00      	nop
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	e000e010 	.word	0xe000e010
 8008124:	e000e018 	.word	0xe000e018
 8008128:	2000001c 	.word	0x2000001c
 800812c:	10624dd3 	.word	0x10624dd3
 8008130:	e000e014 	.word	0xe000e014

08008134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008144 <vPortEnableVFP+0x10>
 8008138:	6801      	ldr	r1, [r0, #0]
 800813a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800813e:	6001      	str	r1, [r0, #0]
 8008140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008142:	bf00      	nop
 8008144:	e000ed88 	.word	0xe000ed88

08008148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b08a      	sub	sp, #40	; 0x28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008150:	2300      	movs	r3, #0
 8008152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008154:	f7ff f936 	bl	80073c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008158:	4b5b      	ldr	r3, [pc, #364]	; (80082c8 <pvPortMalloc+0x180>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008160:	f000 f920 	bl	80083a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008164:	4b59      	ldr	r3, [pc, #356]	; (80082cc <pvPortMalloc+0x184>)
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4013      	ands	r3, r2
 800816c:	2b00      	cmp	r3, #0
 800816e:	f040 8093 	bne.w	8008298 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d01d      	beq.n	80081b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008178:	2208      	movs	r2, #8
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4413      	add	r3, r2
 800817e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	2b00      	cmp	r3, #0
 8008188:	d014      	beq.n	80081b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f023 0307 	bic.w	r3, r3, #7
 8008190:	3308      	adds	r3, #8
 8008192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <pvPortMalloc+0x6c>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	617b      	str	r3, [r7, #20]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d06e      	beq.n	8008298 <pvPortMalloc+0x150>
 80081ba:	4b45      	ldr	r3, [pc, #276]	; (80082d0 <pvPortMalloc+0x188>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d869      	bhi.n	8008298 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081c4:	4b43      	ldr	r3, [pc, #268]	; (80082d4 <pvPortMalloc+0x18c>)
 80081c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081c8:	4b42      	ldr	r3, [pc, #264]	; (80082d4 <pvPortMalloc+0x18c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ce:	e004      	b.n	80081da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d903      	bls.n	80081ec <pvPortMalloc+0xa4>
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1f1      	bne.n	80081d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081ec:	4b36      	ldr	r3, [pc, #216]	; (80082c8 <pvPortMalloc+0x180>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d050      	beq.n	8008298 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2208      	movs	r2, #8
 80081fc:	4413      	add	r3, r2
 80081fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	1ad2      	subs	r2, r2, r3
 8008210:	2308      	movs	r3, #8
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	429a      	cmp	r2, r3
 8008216:	d91f      	bls.n	8008258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4413      	add	r3, r2
 800821e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <pvPortMalloc+0xf8>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	613b      	str	r3, [r7, #16]
}
 800823c:	bf00      	nop
 800823e:	e7fe      	b.n	800823e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	1ad2      	subs	r2, r2, r3
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008252:	69b8      	ldr	r0, [r7, #24]
 8008254:	f000 f908 	bl	8008468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008258:	4b1d      	ldr	r3, [pc, #116]	; (80082d0 <pvPortMalloc+0x188>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	4a1b      	ldr	r2, [pc, #108]	; (80082d0 <pvPortMalloc+0x188>)
 8008264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008266:	4b1a      	ldr	r3, [pc, #104]	; (80082d0 <pvPortMalloc+0x188>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	4b1b      	ldr	r3, [pc, #108]	; (80082d8 <pvPortMalloc+0x190>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d203      	bcs.n	800827a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008272:	4b17      	ldr	r3, [pc, #92]	; (80082d0 <pvPortMalloc+0x188>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a18      	ldr	r2, [pc, #96]	; (80082d8 <pvPortMalloc+0x190>)
 8008278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	4b13      	ldr	r3, [pc, #76]	; (80082cc <pvPortMalloc+0x184>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	431a      	orrs	r2, r3
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800828e:	4b13      	ldr	r3, [pc, #76]	; (80082dc <pvPortMalloc+0x194>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3301      	adds	r3, #1
 8008294:	4a11      	ldr	r2, [pc, #68]	; (80082dc <pvPortMalloc+0x194>)
 8008296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008298:	f7ff f8a2 	bl	80073e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <pvPortMalloc+0x174>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	60fb      	str	r3, [r7, #12]
}
 80082b8:	bf00      	nop
 80082ba:	e7fe      	b.n	80082ba <pvPortMalloc+0x172>
	return pvReturn;
 80082bc:	69fb      	ldr	r3, [r7, #28]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3728      	adds	r7, #40	; 0x28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20004354 	.word	0x20004354
 80082cc:	20004368 	.word	0x20004368
 80082d0:	20004358 	.word	0x20004358
 80082d4:	2000434c 	.word	0x2000434c
 80082d8:	2000435c 	.word	0x2000435c
 80082dc:	20004360 	.word	0x20004360

080082e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d04d      	beq.n	800838e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082f2:	2308      	movs	r3, #8
 80082f4:	425b      	negs	r3, r3
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4413      	add	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	4b24      	ldr	r3, [pc, #144]	; (8008398 <vPortFree+0xb8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4013      	ands	r3, r2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <vPortFree+0x44>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	60fb      	str	r3, [r7, #12]
}
 8008320:	bf00      	nop
 8008322:	e7fe      	b.n	8008322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00a      	beq.n	8008342 <vPortFree+0x62>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	60bb      	str	r3, [r7, #8]
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	4b14      	ldr	r3, [pc, #80]	; (8008398 <vPortFree+0xb8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4013      	ands	r3, r2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d01e      	beq.n	800838e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d11a      	bne.n	800838e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	4b0e      	ldr	r3, [pc, #56]	; (8008398 <vPortFree+0xb8>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	43db      	mvns	r3, r3
 8008362:	401a      	ands	r2, r3
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008368:	f7ff f82c 	bl	80073c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	4b0a      	ldr	r3, [pc, #40]	; (800839c <vPortFree+0xbc>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4413      	add	r3, r2
 8008376:	4a09      	ldr	r2, [pc, #36]	; (800839c <vPortFree+0xbc>)
 8008378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800837a:	6938      	ldr	r0, [r7, #16]
 800837c:	f000 f874 	bl	8008468 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008380:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <vPortFree+0xc0>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3301      	adds	r3, #1
 8008386:	4a06      	ldr	r2, [pc, #24]	; (80083a0 <vPortFree+0xc0>)
 8008388:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800838a:	f7ff f829 	bl	80073e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800838e:	bf00      	nop
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20004368 	.word	0x20004368
 800839c:	20004358 	.word	0x20004358
 80083a0:	20004364 	.word	0x20004364

080083a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80083ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083b0:	4b27      	ldr	r3, [pc, #156]	; (8008450 <prvHeapInit+0xac>)
 80083b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f003 0307 	and.w	r3, r3, #7
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00c      	beq.n	80083d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3307      	adds	r3, #7
 80083c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0307 	bic.w	r3, r3, #7
 80083ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	4a1f      	ldr	r2, [pc, #124]	; (8008450 <prvHeapInit+0xac>)
 80083d4:	4413      	add	r3, r2
 80083d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083dc:	4a1d      	ldr	r2, [pc, #116]	; (8008454 <prvHeapInit+0xb0>)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083e2:	4b1c      	ldr	r3, [pc, #112]	; (8008454 <prvHeapInit+0xb0>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	4413      	add	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083f0:	2208      	movs	r2, #8
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0307 	bic.w	r3, r3, #7
 80083fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4a15      	ldr	r2, [pc, #84]	; (8008458 <prvHeapInit+0xb4>)
 8008404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <prvHeapInit+0xb4>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2200      	movs	r2, #0
 800840c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800840e:	4b12      	ldr	r3, [pc, #72]	; (8008458 <prvHeapInit+0xb4>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	1ad2      	subs	r2, r2, r3
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008424:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <prvHeapInit+0xb4>)
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	4a0a      	ldr	r2, [pc, #40]	; (800845c <prvHeapInit+0xb8>)
 8008432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	4a09      	ldr	r2, [pc, #36]	; (8008460 <prvHeapInit+0xbc>)
 800843a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800843c:	4b09      	ldr	r3, [pc, #36]	; (8008464 <prvHeapInit+0xc0>)
 800843e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008442:	601a      	str	r2, [r3, #0]
}
 8008444:	bf00      	nop
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	2000074c 	.word	0x2000074c
 8008454:	2000434c 	.word	0x2000434c
 8008458:	20004354 	.word	0x20004354
 800845c:	2000435c 	.word	0x2000435c
 8008460:	20004358 	.word	0x20004358
 8008464:	20004368 	.word	0x20004368

08008468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008470:	4b28      	ldr	r3, [pc, #160]	; (8008514 <prvInsertBlockIntoFreeList+0xac>)
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e002      	b.n	800847c <prvInsertBlockIntoFreeList+0x14>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	429a      	cmp	r2, r3
 8008484:	d8f7      	bhi.n	8008476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	4413      	add	r3, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	429a      	cmp	r2, r3
 8008496:	d108      	bne.n	80084aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	441a      	add	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	441a      	add	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d118      	bne.n	80084f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4b15      	ldr	r3, [pc, #84]	; (8008518 <prvInsertBlockIntoFreeList+0xb0>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d00d      	beq.n	80084e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	441a      	add	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	e008      	b.n	80084f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <prvInsertBlockIntoFreeList+0xb0>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	e003      	b.n	80084f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d002      	beq.n	8008506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008506:	bf00      	nop
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	2000434c 	.word	0x2000434c
 8008518:	20004354 	.word	0x20004354

0800851c <siprintf>:
 800851c:	b40e      	push	{r1, r2, r3}
 800851e:	b500      	push	{lr}
 8008520:	b09c      	sub	sp, #112	; 0x70
 8008522:	ab1d      	add	r3, sp, #116	; 0x74
 8008524:	9002      	str	r0, [sp, #8]
 8008526:	9006      	str	r0, [sp, #24]
 8008528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800852c:	4809      	ldr	r0, [pc, #36]	; (8008554 <siprintf+0x38>)
 800852e:	9107      	str	r1, [sp, #28]
 8008530:	9104      	str	r1, [sp, #16]
 8008532:	4909      	ldr	r1, [pc, #36]	; (8008558 <siprintf+0x3c>)
 8008534:	f853 2b04 	ldr.w	r2, [r3], #4
 8008538:	9105      	str	r1, [sp, #20]
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	a902      	add	r1, sp, #8
 8008540:	f000 fa3a 	bl	80089b8 <_svfiprintf_r>
 8008544:	9b02      	ldr	r3, [sp, #8]
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	b01c      	add	sp, #112	; 0x70
 800854c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008550:	b003      	add	sp, #12
 8008552:	4770      	bx	lr
 8008554:	20000078 	.word	0x20000078
 8008558:	ffff0208 	.word	0xffff0208

0800855c <siscanf>:
 800855c:	b40e      	push	{r1, r2, r3}
 800855e:	b510      	push	{r4, lr}
 8008560:	b09f      	sub	sp, #124	; 0x7c
 8008562:	ac21      	add	r4, sp, #132	; 0x84
 8008564:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008568:	f854 2b04 	ldr.w	r2, [r4], #4
 800856c:	9201      	str	r2, [sp, #4]
 800856e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008572:	9004      	str	r0, [sp, #16]
 8008574:	9008      	str	r0, [sp, #32]
 8008576:	f7f7 fe33 	bl	80001e0 <strlen>
 800857a:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <siscanf+0x50>)
 800857c:	9005      	str	r0, [sp, #20]
 800857e:	9009      	str	r0, [sp, #36]	; 0x24
 8008580:	930d      	str	r3, [sp, #52]	; 0x34
 8008582:	480b      	ldr	r0, [pc, #44]	; (80085b0 <siscanf+0x54>)
 8008584:	9a01      	ldr	r2, [sp, #4]
 8008586:	6800      	ldr	r0, [r0, #0]
 8008588:	9403      	str	r4, [sp, #12]
 800858a:	2300      	movs	r3, #0
 800858c:	9311      	str	r3, [sp, #68]	; 0x44
 800858e:	9316      	str	r3, [sp, #88]	; 0x58
 8008590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008594:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008598:	a904      	add	r1, sp, #16
 800859a:	4623      	mov	r3, r4
 800859c:	f000 fb64 	bl	8008c68 <__ssvfiscanf_r>
 80085a0:	b01f      	add	sp, #124	; 0x7c
 80085a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a6:	b003      	add	sp, #12
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	080085b5 	.word	0x080085b5
 80085b0:	20000078 	.word	0x20000078

080085b4 <__seofread>:
 80085b4:	2000      	movs	r0, #0
 80085b6:	4770      	bx	lr

080085b8 <memset>:
 80085b8:	4402      	add	r2, r0
 80085ba:	4603      	mov	r3, r0
 80085bc:	4293      	cmp	r3, r2
 80085be:	d100      	bne.n	80085c2 <memset+0xa>
 80085c0:	4770      	bx	lr
 80085c2:	f803 1b01 	strb.w	r1, [r3], #1
 80085c6:	e7f9      	b.n	80085bc <memset+0x4>

080085c8 <strstr>:
 80085c8:	780a      	ldrb	r2, [r1, #0]
 80085ca:	b570      	push	{r4, r5, r6, lr}
 80085cc:	b96a      	cbnz	r2, 80085ea <strstr+0x22>
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d109      	bne.n	80085e8 <strstr+0x20>
 80085d4:	460c      	mov	r4, r1
 80085d6:	4605      	mov	r5, r0
 80085d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0f6      	beq.n	80085ce <strstr+0x6>
 80085e0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80085e4:	429e      	cmp	r6, r3
 80085e6:	d0f7      	beq.n	80085d8 <strstr+0x10>
 80085e8:	3001      	adds	r0, #1
 80085ea:	7803      	ldrb	r3, [r0, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1ef      	bne.n	80085d0 <strstr+0x8>
 80085f0:	4618      	mov	r0, r3
 80085f2:	e7ec      	b.n	80085ce <strstr+0x6>

080085f4 <_reclaim_reent>:
 80085f4:	4b29      	ldr	r3, [pc, #164]	; (800869c <_reclaim_reent+0xa8>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4283      	cmp	r3, r0
 80085fa:	b570      	push	{r4, r5, r6, lr}
 80085fc:	4604      	mov	r4, r0
 80085fe:	d04b      	beq.n	8008698 <_reclaim_reent+0xa4>
 8008600:	69c3      	ldr	r3, [r0, #28]
 8008602:	b143      	cbz	r3, 8008616 <_reclaim_reent+0x22>
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d144      	bne.n	8008694 <_reclaim_reent+0xa0>
 800860a:	69e3      	ldr	r3, [r4, #28]
 800860c:	6819      	ldr	r1, [r3, #0]
 800860e:	b111      	cbz	r1, 8008616 <_reclaim_reent+0x22>
 8008610:	4620      	mov	r0, r4
 8008612:	f000 f87f 	bl	8008714 <_free_r>
 8008616:	6961      	ldr	r1, [r4, #20]
 8008618:	b111      	cbz	r1, 8008620 <_reclaim_reent+0x2c>
 800861a:	4620      	mov	r0, r4
 800861c:	f000 f87a 	bl	8008714 <_free_r>
 8008620:	69e1      	ldr	r1, [r4, #28]
 8008622:	b111      	cbz	r1, 800862a <_reclaim_reent+0x36>
 8008624:	4620      	mov	r0, r4
 8008626:	f000 f875 	bl	8008714 <_free_r>
 800862a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800862c:	b111      	cbz	r1, 8008634 <_reclaim_reent+0x40>
 800862e:	4620      	mov	r0, r4
 8008630:	f000 f870 	bl	8008714 <_free_r>
 8008634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008636:	b111      	cbz	r1, 800863e <_reclaim_reent+0x4a>
 8008638:	4620      	mov	r0, r4
 800863a:	f000 f86b 	bl	8008714 <_free_r>
 800863e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008640:	b111      	cbz	r1, 8008648 <_reclaim_reent+0x54>
 8008642:	4620      	mov	r0, r4
 8008644:	f000 f866 	bl	8008714 <_free_r>
 8008648:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800864a:	b111      	cbz	r1, 8008652 <_reclaim_reent+0x5e>
 800864c:	4620      	mov	r0, r4
 800864e:	f000 f861 	bl	8008714 <_free_r>
 8008652:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008654:	b111      	cbz	r1, 800865c <_reclaim_reent+0x68>
 8008656:	4620      	mov	r0, r4
 8008658:	f000 f85c 	bl	8008714 <_free_r>
 800865c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800865e:	b111      	cbz	r1, 8008666 <_reclaim_reent+0x72>
 8008660:	4620      	mov	r0, r4
 8008662:	f000 f857 	bl	8008714 <_free_r>
 8008666:	6a23      	ldr	r3, [r4, #32]
 8008668:	b1b3      	cbz	r3, 8008698 <_reclaim_reent+0xa4>
 800866a:	4620      	mov	r0, r4
 800866c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008670:	4718      	bx	r3
 8008672:	5949      	ldr	r1, [r1, r5]
 8008674:	b941      	cbnz	r1, 8008688 <_reclaim_reent+0x94>
 8008676:	3504      	adds	r5, #4
 8008678:	69e3      	ldr	r3, [r4, #28]
 800867a:	2d80      	cmp	r5, #128	; 0x80
 800867c:	68d9      	ldr	r1, [r3, #12]
 800867e:	d1f8      	bne.n	8008672 <_reclaim_reent+0x7e>
 8008680:	4620      	mov	r0, r4
 8008682:	f000 f847 	bl	8008714 <_free_r>
 8008686:	e7c0      	b.n	800860a <_reclaim_reent+0x16>
 8008688:	680e      	ldr	r6, [r1, #0]
 800868a:	4620      	mov	r0, r4
 800868c:	f000 f842 	bl	8008714 <_free_r>
 8008690:	4631      	mov	r1, r6
 8008692:	e7ef      	b.n	8008674 <_reclaim_reent+0x80>
 8008694:	2500      	movs	r5, #0
 8008696:	e7ef      	b.n	8008678 <_reclaim_reent+0x84>
 8008698:	bd70      	pop	{r4, r5, r6, pc}
 800869a:	bf00      	nop
 800869c:	20000078 	.word	0x20000078

080086a0 <__errno>:
 80086a0:	4b01      	ldr	r3, [pc, #4]	; (80086a8 <__errno+0x8>)
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000078 	.word	0x20000078

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4d0d      	ldr	r5, [pc, #52]	; (80086e4 <__libc_init_array+0x38>)
 80086b0:	4c0d      	ldr	r4, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b2:	1b64      	subs	r4, r4, r5
 80086b4:	10a4      	asrs	r4, r4, #2
 80086b6:	2600      	movs	r6, #0
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	4d0b      	ldr	r5, [pc, #44]	; (80086ec <__libc_init_array+0x40>)
 80086be:	4c0c      	ldr	r4, [pc, #48]	; (80086f0 <__libc_init_array+0x44>)
 80086c0:	f001 f8f6 	bl	80098b0 <_init>
 80086c4:	1b64      	subs	r4, r4, r5
 80086c6:	10a4      	asrs	r4, r4, #2
 80086c8:	2600      	movs	r6, #0
 80086ca:	42a6      	cmp	r6, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d4:	4798      	blx	r3
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f855 3b04 	ldr.w	r3, [r5], #4
 80086de:	4798      	blx	r3
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	08009bb4 	.word	0x08009bb4
 80086e8:	08009bb4 	.word	0x08009bb4
 80086ec:	08009bb4 	.word	0x08009bb4
 80086f0:	08009bb8 	.word	0x08009bb8

080086f4 <__retarget_lock_acquire_recursive>:
 80086f4:	4770      	bx	lr

080086f6 <__retarget_lock_release_recursive>:
 80086f6:	4770      	bx	lr

080086f8 <memcpy>:
 80086f8:	440a      	add	r2, r1
 80086fa:	4291      	cmp	r1, r2
 80086fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008700:	d100      	bne.n	8008704 <memcpy+0xc>
 8008702:	4770      	bx	lr
 8008704:	b510      	push	{r4, lr}
 8008706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800870a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800870e:	4291      	cmp	r1, r2
 8008710:	d1f9      	bne.n	8008706 <memcpy+0xe>
 8008712:	bd10      	pop	{r4, pc}

08008714 <_free_r>:
 8008714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008716:	2900      	cmp	r1, #0
 8008718:	d044      	beq.n	80087a4 <_free_r+0x90>
 800871a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800871e:	9001      	str	r0, [sp, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	f1a1 0404 	sub.w	r4, r1, #4
 8008726:	bfb8      	it	lt
 8008728:	18e4      	addlt	r4, r4, r3
 800872a:	f000 f8df 	bl	80088ec <__malloc_lock>
 800872e:	4a1e      	ldr	r2, [pc, #120]	; (80087a8 <_free_r+0x94>)
 8008730:	9801      	ldr	r0, [sp, #4]
 8008732:	6813      	ldr	r3, [r2, #0]
 8008734:	b933      	cbnz	r3, 8008744 <_free_r+0x30>
 8008736:	6063      	str	r3, [r4, #4]
 8008738:	6014      	str	r4, [r2, #0]
 800873a:	b003      	add	sp, #12
 800873c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008740:	f000 b8da 	b.w	80088f8 <__malloc_unlock>
 8008744:	42a3      	cmp	r3, r4
 8008746:	d908      	bls.n	800875a <_free_r+0x46>
 8008748:	6825      	ldr	r5, [r4, #0]
 800874a:	1961      	adds	r1, r4, r5
 800874c:	428b      	cmp	r3, r1
 800874e:	bf01      	itttt	eq
 8008750:	6819      	ldreq	r1, [r3, #0]
 8008752:	685b      	ldreq	r3, [r3, #4]
 8008754:	1949      	addeq	r1, r1, r5
 8008756:	6021      	streq	r1, [r4, #0]
 8008758:	e7ed      	b.n	8008736 <_free_r+0x22>
 800875a:	461a      	mov	r2, r3
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	b10b      	cbz	r3, 8008764 <_free_r+0x50>
 8008760:	42a3      	cmp	r3, r4
 8008762:	d9fa      	bls.n	800875a <_free_r+0x46>
 8008764:	6811      	ldr	r1, [r2, #0]
 8008766:	1855      	adds	r5, r2, r1
 8008768:	42a5      	cmp	r5, r4
 800876a:	d10b      	bne.n	8008784 <_free_r+0x70>
 800876c:	6824      	ldr	r4, [r4, #0]
 800876e:	4421      	add	r1, r4
 8008770:	1854      	adds	r4, r2, r1
 8008772:	42a3      	cmp	r3, r4
 8008774:	6011      	str	r1, [r2, #0]
 8008776:	d1e0      	bne.n	800873a <_free_r+0x26>
 8008778:	681c      	ldr	r4, [r3, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	6053      	str	r3, [r2, #4]
 800877e:	440c      	add	r4, r1
 8008780:	6014      	str	r4, [r2, #0]
 8008782:	e7da      	b.n	800873a <_free_r+0x26>
 8008784:	d902      	bls.n	800878c <_free_r+0x78>
 8008786:	230c      	movs	r3, #12
 8008788:	6003      	str	r3, [r0, #0]
 800878a:	e7d6      	b.n	800873a <_free_r+0x26>
 800878c:	6825      	ldr	r5, [r4, #0]
 800878e:	1961      	adds	r1, r4, r5
 8008790:	428b      	cmp	r3, r1
 8008792:	bf04      	itt	eq
 8008794:	6819      	ldreq	r1, [r3, #0]
 8008796:	685b      	ldreq	r3, [r3, #4]
 8008798:	6063      	str	r3, [r4, #4]
 800879a:	bf04      	itt	eq
 800879c:	1949      	addeq	r1, r1, r5
 800879e:	6021      	streq	r1, [r4, #0]
 80087a0:	6054      	str	r4, [r2, #4]
 80087a2:	e7ca      	b.n	800873a <_free_r+0x26>
 80087a4:	b003      	add	sp, #12
 80087a6:	bd30      	pop	{r4, r5, pc}
 80087a8:	200044ac 	.word	0x200044ac

080087ac <sbrk_aligned>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	4e0e      	ldr	r6, [pc, #56]	; (80087e8 <sbrk_aligned+0x3c>)
 80087b0:	460c      	mov	r4, r1
 80087b2:	6831      	ldr	r1, [r6, #0]
 80087b4:	4605      	mov	r5, r0
 80087b6:	b911      	cbnz	r1, 80087be <sbrk_aligned+0x12>
 80087b8:	f000 ff3a 	bl	8009630 <_sbrk_r>
 80087bc:	6030      	str	r0, [r6, #0]
 80087be:	4621      	mov	r1, r4
 80087c0:	4628      	mov	r0, r5
 80087c2:	f000 ff35 	bl	8009630 <_sbrk_r>
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	d00a      	beq.n	80087e0 <sbrk_aligned+0x34>
 80087ca:	1cc4      	adds	r4, r0, #3
 80087cc:	f024 0403 	bic.w	r4, r4, #3
 80087d0:	42a0      	cmp	r0, r4
 80087d2:	d007      	beq.n	80087e4 <sbrk_aligned+0x38>
 80087d4:	1a21      	subs	r1, r4, r0
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 ff2a 	bl	8009630 <_sbrk_r>
 80087dc:	3001      	adds	r0, #1
 80087de:	d101      	bne.n	80087e4 <sbrk_aligned+0x38>
 80087e0:	f04f 34ff 	mov.w	r4, #4294967295
 80087e4:	4620      	mov	r0, r4
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	200044b0 	.word	0x200044b0

080087ec <_malloc_r>:
 80087ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f0:	1ccd      	adds	r5, r1, #3
 80087f2:	f025 0503 	bic.w	r5, r5, #3
 80087f6:	3508      	adds	r5, #8
 80087f8:	2d0c      	cmp	r5, #12
 80087fa:	bf38      	it	cc
 80087fc:	250c      	movcc	r5, #12
 80087fe:	2d00      	cmp	r5, #0
 8008800:	4607      	mov	r7, r0
 8008802:	db01      	blt.n	8008808 <_malloc_r+0x1c>
 8008804:	42a9      	cmp	r1, r5
 8008806:	d905      	bls.n	8008814 <_malloc_r+0x28>
 8008808:	230c      	movs	r3, #12
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	2600      	movs	r6, #0
 800880e:	4630      	mov	r0, r6
 8008810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088e8 <_malloc_r+0xfc>
 8008818:	f000 f868 	bl	80088ec <__malloc_lock>
 800881c:	f8d8 3000 	ldr.w	r3, [r8]
 8008820:	461c      	mov	r4, r3
 8008822:	bb5c      	cbnz	r4, 800887c <_malloc_r+0x90>
 8008824:	4629      	mov	r1, r5
 8008826:	4638      	mov	r0, r7
 8008828:	f7ff ffc0 	bl	80087ac <sbrk_aligned>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	4604      	mov	r4, r0
 8008830:	d155      	bne.n	80088de <_malloc_r+0xf2>
 8008832:	f8d8 4000 	ldr.w	r4, [r8]
 8008836:	4626      	mov	r6, r4
 8008838:	2e00      	cmp	r6, #0
 800883a:	d145      	bne.n	80088c8 <_malloc_r+0xdc>
 800883c:	2c00      	cmp	r4, #0
 800883e:	d048      	beq.n	80088d2 <_malloc_r+0xe6>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	4631      	mov	r1, r6
 8008844:	4638      	mov	r0, r7
 8008846:	eb04 0903 	add.w	r9, r4, r3
 800884a:	f000 fef1 	bl	8009630 <_sbrk_r>
 800884e:	4581      	cmp	r9, r0
 8008850:	d13f      	bne.n	80088d2 <_malloc_r+0xe6>
 8008852:	6821      	ldr	r1, [r4, #0]
 8008854:	1a6d      	subs	r5, r5, r1
 8008856:	4629      	mov	r1, r5
 8008858:	4638      	mov	r0, r7
 800885a:	f7ff ffa7 	bl	80087ac <sbrk_aligned>
 800885e:	3001      	adds	r0, #1
 8008860:	d037      	beq.n	80088d2 <_malloc_r+0xe6>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	442b      	add	r3, r5
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	f8d8 3000 	ldr.w	r3, [r8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d038      	beq.n	80088e2 <_malloc_r+0xf6>
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	42a2      	cmp	r2, r4
 8008874:	d12b      	bne.n	80088ce <_malloc_r+0xe2>
 8008876:	2200      	movs	r2, #0
 8008878:	605a      	str	r2, [r3, #4]
 800887a:	e00f      	b.n	800889c <_malloc_r+0xb0>
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	1b52      	subs	r2, r2, r5
 8008880:	d41f      	bmi.n	80088c2 <_malloc_r+0xd6>
 8008882:	2a0b      	cmp	r2, #11
 8008884:	d917      	bls.n	80088b6 <_malloc_r+0xca>
 8008886:	1961      	adds	r1, r4, r5
 8008888:	42a3      	cmp	r3, r4
 800888a:	6025      	str	r5, [r4, #0]
 800888c:	bf18      	it	ne
 800888e:	6059      	strne	r1, [r3, #4]
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	bf08      	it	eq
 8008894:	f8c8 1000 	streq.w	r1, [r8]
 8008898:	5162      	str	r2, [r4, r5]
 800889a:	604b      	str	r3, [r1, #4]
 800889c:	4638      	mov	r0, r7
 800889e:	f104 060b 	add.w	r6, r4, #11
 80088a2:	f000 f829 	bl	80088f8 <__malloc_unlock>
 80088a6:	f026 0607 	bic.w	r6, r6, #7
 80088aa:	1d23      	adds	r3, r4, #4
 80088ac:	1af2      	subs	r2, r6, r3
 80088ae:	d0ae      	beq.n	800880e <_malloc_r+0x22>
 80088b0:	1b9b      	subs	r3, r3, r6
 80088b2:	50a3      	str	r3, [r4, r2]
 80088b4:	e7ab      	b.n	800880e <_malloc_r+0x22>
 80088b6:	42a3      	cmp	r3, r4
 80088b8:	6862      	ldr	r2, [r4, #4]
 80088ba:	d1dd      	bne.n	8008878 <_malloc_r+0x8c>
 80088bc:	f8c8 2000 	str.w	r2, [r8]
 80088c0:	e7ec      	b.n	800889c <_malloc_r+0xb0>
 80088c2:	4623      	mov	r3, r4
 80088c4:	6864      	ldr	r4, [r4, #4]
 80088c6:	e7ac      	b.n	8008822 <_malloc_r+0x36>
 80088c8:	4634      	mov	r4, r6
 80088ca:	6876      	ldr	r6, [r6, #4]
 80088cc:	e7b4      	b.n	8008838 <_malloc_r+0x4c>
 80088ce:	4613      	mov	r3, r2
 80088d0:	e7cc      	b.n	800886c <_malloc_r+0x80>
 80088d2:	230c      	movs	r3, #12
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	4638      	mov	r0, r7
 80088d8:	f000 f80e 	bl	80088f8 <__malloc_unlock>
 80088dc:	e797      	b.n	800880e <_malloc_r+0x22>
 80088de:	6025      	str	r5, [r4, #0]
 80088e0:	e7dc      	b.n	800889c <_malloc_r+0xb0>
 80088e2:	605b      	str	r3, [r3, #4]
 80088e4:	deff      	udf	#255	; 0xff
 80088e6:	bf00      	nop
 80088e8:	200044ac 	.word	0x200044ac

080088ec <__malloc_lock>:
 80088ec:	4801      	ldr	r0, [pc, #4]	; (80088f4 <__malloc_lock+0x8>)
 80088ee:	f7ff bf01 	b.w	80086f4 <__retarget_lock_acquire_recursive>
 80088f2:	bf00      	nop
 80088f4:	200044a8 	.word	0x200044a8

080088f8 <__malloc_unlock>:
 80088f8:	4801      	ldr	r0, [pc, #4]	; (8008900 <__malloc_unlock+0x8>)
 80088fa:	f7ff befc 	b.w	80086f6 <__retarget_lock_release_recursive>
 80088fe:	bf00      	nop
 8008900:	200044a8 	.word	0x200044a8

08008904 <__ssputs_r>:
 8008904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	688e      	ldr	r6, [r1, #8]
 800890a:	461f      	mov	r7, r3
 800890c:	42be      	cmp	r6, r7
 800890e:	680b      	ldr	r3, [r1, #0]
 8008910:	4682      	mov	sl, r0
 8008912:	460c      	mov	r4, r1
 8008914:	4690      	mov	r8, r2
 8008916:	d82c      	bhi.n	8008972 <__ssputs_r+0x6e>
 8008918:	898a      	ldrh	r2, [r1, #12]
 800891a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800891e:	d026      	beq.n	800896e <__ssputs_r+0x6a>
 8008920:	6965      	ldr	r5, [r4, #20]
 8008922:	6909      	ldr	r1, [r1, #16]
 8008924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008928:	eba3 0901 	sub.w	r9, r3, r1
 800892c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008930:	1c7b      	adds	r3, r7, #1
 8008932:	444b      	add	r3, r9
 8008934:	106d      	asrs	r5, r5, #1
 8008936:	429d      	cmp	r5, r3
 8008938:	bf38      	it	cc
 800893a:	461d      	movcc	r5, r3
 800893c:	0553      	lsls	r3, r2, #21
 800893e:	d527      	bpl.n	8008990 <__ssputs_r+0x8c>
 8008940:	4629      	mov	r1, r5
 8008942:	f7ff ff53 	bl	80087ec <_malloc_r>
 8008946:	4606      	mov	r6, r0
 8008948:	b360      	cbz	r0, 80089a4 <__ssputs_r+0xa0>
 800894a:	6921      	ldr	r1, [r4, #16]
 800894c:	464a      	mov	r2, r9
 800894e:	f7ff fed3 	bl	80086f8 <memcpy>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	6126      	str	r6, [r4, #16]
 8008960:	6165      	str	r5, [r4, #20]
 8008962:	444e      	add	r6, r9
 8008964:	eba5 0509 	sub.w	r5, r5, r9
 8008968:	6026      	str	r6, [r4, #0]
 800896a:	60a5      	str	r5, [r4, #8]
 800896c:	463e      	mov	r6, r7
 800896e:	42be      	cmp	r6, r7
 8008970:	d900      	bls.n	8008974 <__ssputs_r+0x70>
 8008972:	463e      	mov	r6, r7
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	4632      	mov	r2, r6
 8008978:	4641      	mov	r1, r8
 800897a:	f000 fe3e 	bl	80095fa <memmove>
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	1b9b      	subs	r3, r3, r6
 8008982:	60a3      	str	r3, [r4, #8]
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	4433      	add	r3, r6
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	2000      	movs	r0, #0
 800898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008990:	462a      	mov	r2, r5
 8008992:	f000 fe5d 	bl	8009650 <_realloc_r>
 8008996:	4606      	mov	r6, r0
 8008998:	2800      	cmp	r0, #0
 800899a:	d1e0      	bne.n	800895e <__ssputs_r+0x5a>
 800899c:	6921      	ldr	r1, [r4, #16]
 800899e:	4650      	mov	r0, sl
 80089a0:	f7ff feb8 	bl	8008714 <_free_r>
 80089a4:	230c      	movs	r3, #12
 80089a6:	f8ca 3000 	str.w	r3, [sl]
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b0:	81a3      	strh	r3, [r4, #12]
 80089b2:	f04f 30ff 	mov.w	r0, #4294967295
 80089b6:	e7e9      	b.n	800898c <__ssputs_r+0x88>

080089b8 <_svfiprintf_r>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	4698      	mov	r8, r3
 80089be:	898b      	ldrh	r3, [r1, #12]
 80089c0:	061b      	lsls	r3, r3, #24
 80089c2:	b09d      	sub	sp, #116	; 0x74
 80089c4:	4607      	mov	r7, r0
 80089c6:	460d      	mov	r5, r1
 80089c8:	4614      	mov	r4, r2
 80089ca:	d50e      	bpl.n	80089ea <_svfiprintf_r+0x32>
 80089cc:	690b      	ldr	r3, [r1, #16]
 80089ce:	b963      	cbnz	r3, 80089ea <_svfiprintf_r+0x32>
 80089d0:	2140      	movs	r1, #64	; 0x40
 80089d2:	f7ff ff0b 	bl	80087ec <_malloc_r>
 80089d6:	6028      	str	r0, [r5, #0]
 80089d8:	6128      	str	r0, [r5, #16]
 80089da:	b920      	cbnz	r0, 80089e6 <_svfiprintf_r+0x2e>
 80089dc:	230c      	movs	r3, #12
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	e0d0      	b.n	8008b88 <_svfiprintf_r+0x1d0>
 80089e6:	2340      	movs	r3, #64	; 0x40
 80089e8:	616b      	str	r3, [r5, #20]
 80089ea:	2300      	movs	r3, #0
 80089ec:	9309      	str	r3, [sp, #36]	; 0x24
 80089ee:	2320      	movs	r3, #32
 80089f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80089f8:	2330      	movs	r3, #48	; 0x30
 80089fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ba0 <_svfiprintf_r+0x1e8>
 80089fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a02:	f04f 0901 	mov.w	r9, #1
 8008a06:	4623      	mov	r3, r4
 8008a08:	469a      	mov	sl, r3
 8008a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a0e:	b10a      	cbz	r2, 8008a14 <_svfiprintf_r+0x5c>
 8008a10:	2a25      	cmp	r2, #37	; 0x25
 8008a12:	d1f9      	bne.n	8008a08 <_svfiprintf_r+0x50>
 8008a14:	ebba 0b04 	subs.w	fp, sl, r4
 8008a18:	d00b      	beq.n	8008a32 <_svfiprintf_r+0x7a>
 8008a1a:	465b      	mov	r3, fp
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	4638      	mov	r0, r7
 8008a22:	f7ff ff6f 	bl	8008904 <__ssputs_r>
 8008a26:	3001      	adds	r0, #1
 8008a28:	f000 80a9 	beq.w	8008b7e <_svfiprintf_r+0x1c6>
 8008a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a2e:	445a      	add	r2, fp
 8008a30:	9209      	str	r2, [sp, #36]	; 0x24
 8008a32:	f89a 3000 	ldrb.w	r3, [sl]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80a1 	beq.w	8008b7e <_svfiprintf_r+0x1c6>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a46:	f10a 0a01 	add.w	sl, sl, #1
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	9307      	str	r3, [sp, #28]
 8008a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a52:	931a      	str	r3, [sp, #104]	; 0x68
 8008a54:	4654      	mov	r4, sl
 8008a56:	2205      	movs	r2, #5
 8008a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a5c:	4850      	ldr	r0, [pc, #320]	; (8008ba0 <_svfiprintf_r+0x1e8>)
 8008a5e:	f7f7 fbc7 	bl	80001f0 <memchr>
 8008a62:	9a04      	ldr	r2, [sp, #16]
 8008a64:	b9d8      	cbnz	r0, 8008a9e <_svfiprintf_r+0xe6>
 8008a66:	06d0      	lsls	r0, r2, #27
 8008a68:	bf44      	itt	mi
 8008a6a:	2320      	movmi	r3, #32
 8008a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a70:	0711      	lsls	r1, r2, #28
 8008a72:	bf44      	itt	mi
 8008a74:	232b      	movmi	r3, #43	; 0x2b
 8008a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a80:	d015      	beq.n	8008aae <_svfiprintf_r+0xf6>
 8008a82:	9a07      	ldr	r2, [sp, #28]
 8008a84:	4654      	mov	r4, sl
 8008a86:	2000      	movs	r0, #0
 8008a88:	f04f 0c0a 	mov.w	ip, #10
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a92:	3b30      	subs	r3, #48	; 0x30
 8008a94:	2b09      	cmp	r3, #9
 8008a96:	d94d      	bls.n	8008b34 <_svfiprintf_r+0x17c>
 8008a98:	b1b0      	cbz	r0, 8008ac8 <_svfiprintf_r+0x110>
 8008a9a:	9207      	str	r2, [sp, #28]
 8008a9c:	e014      	b.n	8008ac8 <_svfiprintf_r+0x110>
 8008a9e:	eba0 0308 	sub.w	r3, r0, r8
 8008aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	9304      	str	r3, [sp, #16]
 8008aaa:	46a2      	mov	sl, r4
 8008aac:	e7d2      	b.n	8008a54 <_svfiprintf_r+0x9c>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	1d19      	adds	r1, r3, #4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	9103      	str	r1, [sp, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bfbb      	ittet	lt
 8008aba:	425b      	neglt	r3, r3
 8008abc:	f042 0202 	orrlt.w	r2, r2, #2
 8008ac0:	9307      	strge	r3, [sp, #28]
 8008ac2:	9307      	strlt	r3, [sp, #28]
 8008ac4:	bfb8      	it	lt
 8008ac6:	9204      	strlt	r2, [sp, #16]
 8008ac8:	7823      	ldrb	r3, [r4, #0]
 8008aca:	2b2e      	cmp	r3, #46	; 0x2e
 8008acc:	d10c      	bne.n	8008ae8 <_svfiprintf_r+0x130>
 8008ace:	7863      	ldrb	r3, [r4, #1]
 8008ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad2:	d134      	bne.n	8008b3e <_svfiprintf_r+0x186>
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	1d1a      	adds	r2, r3, #4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	9203      	str	r2, [sp, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	bfb8      	it	lt
 8008ae0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ae4:	3402      	adds	r4, #2
 8008ae6:	9305      	str	r3, [sp, #20]
 8008ae8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008bb0 <_svfiprintf_r+0x1f8>
 8008aec:	7821      	ldrb	r1, [r4, #0]
 8008aee:	2203      	movs	r2, #3
 8008af0:	4650      	mov	r0, sl
 8008af2:	f7f7 fb7d 	bl	80001f0 <memchr>
 8008af6:	b138      	cbz	r0, 8008b08 <_svfiprintf_r+0x150>
 8008af8:	9b04      	ldr	r3, [sp, #16]
 8008afa:	eba0 000a 	sub.w	r0, r0, sl
 8008afe:	2240      	movs	r2, #64	; 0x40
 8008b00:	4082      	lsls	r2, r0
 8008b02:	4313      	orrs	r3, r2
 8008b04:	3401      	adds	r4, #1
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0c:	4825      	ldr	r0, [pc, #148]	; (8008ba4 <_svfiprintf_r+0x1ec>)
 8008b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b12:	2206      	movs	r2, #6
 8008b14:	f7f7 fb6c 	bl	80001f0 <memchr>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d038      	beq.n	8008b8e <_svfiprintf_r+0x1d6>
 8008b1c:	4b22      	ldr	r3, [pc, #136]	; (8008ba8 <_svfiprintf_r+0x1f0>)
 8008b1e:	bb1b      	cbnz	r3, 8008b68 <_svfiprintf_r+0x1b0>
 8008b20:	9b03      	ldr	r3, [sp, #12]
 8008b22:	3307      	adds	r3, #7
 8008b24:	f023 0307 	bic.w	r3, r3, #7
 8008b28:	3308      	adds	r3, #8
 8008b2a:	9303      	str	r3, [sp, #12]
 8008b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2e:	4433      	add	r3, r6
 8008b30:	9309      	str	r3, [sp, #36]	; 0x24
 8008b32:	e768      	b.n	8008a06 <_svfiprintf_r+0x4e>
 8008b34:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b38:	460c      	mov	r4, r1
 8008b3a:	2001      	movs	r0, #1
 8008b3c:	e7a6      	b.n	8008a8c <_svfiprintf_r+0xd4>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	3401      	adds	r4, #1
 8008b42:	9305      	str	r3, [sp, #20]
 8008b44:	4619      	mov	r1, r3
 8008b46:	f04f 0c0a 	mov.w	ip, #10
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b50:	3a30      	subs	r2, #48	; 0x30
 8008b52:	2a09      	cmp	r2, #9
 8008b54:	d903      	bls.n	8008b5e <_svfiprintf_r+0x1a6>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0c6      	beq.n	8008ae8 <_svfiprintf_r+0x130>
 8008b5a:	9105      	str	r1, [sp, #20]
 8008b5c:	e7c4      	b.n	8008ae8 <_svfiprintf_r+0x130>
 8008b5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b62:	4604      	mov	r4, r0
 8008b64:	2301      	movs	r3, #1
 8008b66:	e7f0      	b.n	8008b4a <_svfiprintf_r+0x192>
 8008b68:	ab03      	add	r3, sp, #12
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	462a      	mov	r2, r5
 8008b6e:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <_svfiprintf_r+0x1f4>)
 8008b70:	a904      	add	r1, sp, #16
 8008b72:	4638      	mov	r0, r7
 8008b74:	f3af 8000 	nop.w
 8008b78:	1c42      	adds	r2, r0, #1
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	d1d6      	bne.n	8008b2c <_svfiprintf_r+0x174>
 8008b7e:	89ab      	ldrh	r3, [r5, #12]
 8008b80:	065b      	lsls	r3, r3, #25
 8008b82:	f53f af2d 	bmi.w	80089e0 <_svfiprintf_r+0x28>
 8008b86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b88:	b01d      	add	sp, #116	; 0x74
 8008b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8e:	ab03      	add	r3, sp, #12
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	462a      	mov	r2, r5
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <_svfiprintf_r+0x1f4>)
 8008b96:	a904      	add	r1, sp, #16
 8008b98:	4638      	mov	r0, r7
 8008b9a:	f000 fa4b 	bl	8009034 <_printf_i>
 8008b9e:	e7eb      	b.n	8008b78 <_svfiprintf_r+0x1c0>
 8008ba0:	08009a5c 	.word	0x08009a5c
 8008ba4:	08009a66 	.word	0x08009a66
 8008ba8:	00000000 	.word	0x00000000
 8008bac:	08008905 	.word	0x08008905
 8008bb0:	08009a62 	.word	0x08009a62

08008bb4 <_sungetc_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	1c4b      	adds	r3, r1, #1
 8008bb8:	4614      	mov	r4, r2
 8008bba:	d103      	bne.n	8008bc4 <_sungetc_r+0x10>
 8008bbc:	f04f 35ff 	mov.w	r5, #4294967295
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	8993      	ldrh	r3, [r2, #12]
 8008bc6:	f023 0320 	bic.w	r3, r3, #32
 8008bca:	8193      	strh	r3, [r2, #12]
 8008bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bce:	6852      	ldr	r2, [r2, #4]
 8008bd0:	b2cd      	uxtb	r5, r1
 8008bd2:	b18b      	cbz	r3, 8008bf8 <_sungetc_r+0x44>
 8008bd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	dd08      	ble.n	8008bec <_sungetc_r+0x38>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	1e5a      	subs	r2, r3, #1
 8008bde:	6022      	str	r2, [r4, #0]
 8008be0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008be4:	6863      	ldr	r3, [r4, #4]
 8008be6:	3301      	adds	r3, #1
 8008be8:	6063      	str	r3, [r4, #4]
 8008bea:	e7e9      	b.n	8008bc0 <_sungetc_r+0xc>
 8008bec:	4621      	mov	r1, r4
 8008bee:	f000 fcca 	bl	8009586 <__submore>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d0f1      	beq.n	8008bda <_sungetc_r+0x26>
 8008bf6:	e7e1      	b.n	8008bbc <_sungetc_r+0x8>
 8008bf8:	6921      	ldr	r1, [r4, #16]
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	b151      	cbz	r1, 8008c14 <_sungetc_r+0x60>
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	d208      	bcs.n	8008c14 <_sungetc_r+0x60>
 8008c02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008c06:	42a9      	cmp	r1, r5
 8008c08:	d104      	bne.n	8008c14 <_sungetc_r+0x60>
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	3201      	adds	r2, #1
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	6062      	str	r2, [r4, #4]
 8008c12:	e7d5      	b.n	8008bc0 <_sungetc_r+0xc>
 8008c14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c1e:	2303      	movs	r3, #3
 8008c20:	63a3      	str	r3, [r4, #56]	; 0x38
 8008c22:	4623      	mov	r3, r4
 8008c24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e7dc      	b.n	8008be8 <_sungetc_r+0x34>

08008c2e <__ssrefill_r>:
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	460c      	mov	r4, r1
 8008c32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008c34:	b169      	cbz	r1, 8008c52 <__ssrefill_r+0x24>
 8008c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c3a:	4299      	cmp	r1, r3
 8008c3c:	d001      	beq.n	8008c42 <__ssrefill_r+0x14>
 8008c3e:	f7ff fd69 	bl	8008714 <_free_r>
 8008c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c44:	6063      	str	r3, [r4, #4]
 8008c46:	2000      	movs	r0, #0
 8008c48:	6360      	str	r0, [r4, #52]	; 0x34
 8008c4a:	b113      	cbz	r3, 8008c52 <__ssrefill_r+0x24>
 8008c4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c4e:	6023      	str	r3, [r4, #0]
 8008c50:	bd10      	pop	{r4, pc}
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6063      	str	r3, [r4, #4]
 8008c5a:	89a3      	ldrh	r3, [r4, #12]
 8008c5c:	f043 0320 	orr.w	r3, r3, #32
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	f04f 30ff 	mov.w	r0, #4294967295
 8008c66:	e7f3      	b.n	8008c50 <__ssrefill_r+0x22>

08008c68 <__ssvfiscanf_r>:
 8008c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008c72:	2100      	movs	r1, #0
 8008c74:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008c78:	49a6      	ldr	r1, [pc, #664]	; (8008f14 <__ssvfiscanf_r+0x2ac>)
 8008c7a:	91a0      	str	r1, [sp, #640]	; 0x280
 8008c7c:	f10d 0804 	add.w	r8, sp, #4
 8008c80:	49a5      	ldr	r1, [pc, #660]	; (8008f18 <__ssvfiscanf_r+0x2b0>)
 8008c82:	4fa6      	ldr	r7, [pc, #664]	; (8008f1c <__ssvfiscanf_r+0x2b4>)
 8008c84:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008f20 <__ssvfiscanf_r+0x2b8>
 8008c88:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	7813      	ldrb	r3, [r2, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 815a 	beq.w	8008f4e <__ssvfiscanf_r+0x2e6>
 8008c9a:	5cf9      	ldrb	r1, [r7, r3]
 8008c9c:	f011 0108 	ands.w	r1, r1, #8
 8008ca0:	f102 0501 	add.w	r5, r2, #1
 8008ca4:	d019      	beq.n	8008cda <__ssvfiscanf_r+0x72>
 8008ca6:	6863      	ldr	r3, [r4, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	dd0f      	ble.n	8008ccc <__ssvfiscanf_r+0x64>
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	781a      	ldrb	r2, [r3, #0]
 8008cb0:	5cba      	ldrb	r2, [r7, r2]
 8008cb2:	0712      	lsls	r2, r2, #28
 8008cb4:	d401      	bmi.n	8008cba <__ssvfiscanf_r+0x52>
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	e7eb      	b.n	8008c92 <__ssvfiscanf_r+0x2a>
 8008cba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008cbc:	3201      	adds	r2, #1
 8008cbe:	9245      	str	r2, [sp, #276]	; 0x114
 8008cc0:	6862      	ldr	r2, [r4, #4]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	3a01      	subs	r2, #1
 8008cc6:	6062      	str	r2, [r4, #4]
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	e7ec      	b.n	8008ca6 <__ssvfiscanf_r+0x3e>
 8008ccc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cce:	4621      	mov	r1, r4
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4798      	blx	r3
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d0e9      	beq.n	8008cac <__ssvfiscanf_r+0x44>
 8008cd8:	e7ed      	b.n	8008cb6 <__ssvfiscanf_r+0x4e>
 8008cda:	2b25      	cmp	r3, #37	; 0x25
 8008cdc:	d012      	beq.n	8008d04 <__ssvfiscanf_r+0x9c>
 8008cde:	469a      	mov	sl, r3
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f340 8091 	ble.w	8008e0a <__ssvfiscanf_r+0x1a2>
 8008ce8:	6822      	ldr	r2, [r4, #0]
 8008cea:	7813      	ldrb	r3, [r2, #0]
 8008cec:	4553      	cmp	r3, sl
 8008cee:	f040 812e 	bne.w	8008f4e <__ssvfiscanf_r+0x2e6>
 8008cf2:	6863      	ldr	r3, [r4, #4]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	6063      	str	r3, [r4, #4]
 8008cf8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008cfa:	3201      	adds	r2, #1
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	6022      	str	r2, [r4, #0]
 8008d00:	9345      	str	r3, [sp, #276]	; 0x114
 8008d02:	e7d8      	b.n	8008cb6 <__ssvfiscanf_r+0x4e>
 8008d04:	9141      	str	r1, [sp, #260]	; 0x104
 8008d06:	9143      	str	r1, [sp, #268]	; 0x10c
 8008d08:	7853      	ldrb	r3, [r2, #1]
 8008d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d0c:	bf02      	ittt	eq
 8008d0e:	2310      	moveq	r3, #16
 8008d10:	1c95      	addeq	r5, r2, #2
 8008d12:	9341      	streq	r3, [sp, #260]	; 0x104
 8008d14:	220a      	movs	r2, #10
 8008d16:	46aa      	mov	sl, r5
 8008d18:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008d1c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008d20:	2b09      	cmp	r3, #9
 8008d22:	d91c      	bls.n	8008d5e <__ssvfiscanf_r+0xf6>
 8008d24:	487e      	ldr	r0, [pc, #504]	; (8008f20 <__ssvfiscanf_r+0x2b8>)
 8008d26:	2203      	movs	r2, #3
 8008d28:	f7f7 fa62 	bl	80001f0 <memchr>
 8008d2c:	b138      	cbz	r0, 8008d3e <__ssvfiscanf_r+0xd6>
 8008d2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008d30:	eba0 0009 	sub.w	r0, r0, r9
 8008d34:	2301      	movs	r3, #1
 8008d36:	4083      	lsls	r3, r0
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	9341      	str	r3, [sp, #260]	; 0x104
 8008d3c:	4655      	mov	r5, sl
 8008d3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d42:	2b78      	cmp	r3, #120	; 0x78
 8008d44:	d806      	bhi.n	8008d54 <__ssvfiscanf_r+0xec>
 8008d46:	2b57      	cmp	r3, #87	; 0x57
 8008d48:	d810      	bhi.n	8008d6c <__ssvfiscanf_r+0x104>
 8008d4a:	2b25      	cmp	r3, #37	; 0x25
 8008d4c:	d0c7      	beq.n	8008cde <__ssvfiscanf_r+0x76>
 8008d4e:	d857      	bhi.n	8008e00 <__ssvfiscanf_r+0x198>
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d065      	beq.n	8008e20 <__ssvfiscanf_r+0x1b8>
 8008d54:	2303      	movs	r3, #3
 8008d56:	9347      	str	r3, [sp, #284]	; 0x11c
 8008d58:	230a      	movs	r3, #10
 8008d5a:	9342      	str	r3, [sp, #264]	; 0x108
 8008d5c:	e076      	b.n	8008e4c <__ssvfiscanf_r+0x1e4>
 8008d5e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008d60:	fb02 1103 	mla	r1, r2, r3, r1
 8008d64:	3930      	subs	r1, #48	; 0x30
 8008d66:	9143      	str	r1, [sp, #268]	; 0x10c
 8008d68:	4655      	mov	r5, sl
 8008d6a:	e7d4      	b.n	8008d16 <__ssvfiscanf_r+0xae>
 8008d6c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008d70:	2a20      	cmp	r2, #32
 8008d72:	d8ef      	bhi.n	8008d54 <__ssvfiscanf_r+0xec>
 8008d74:	a101      	add	r1, pc, #4	; (adr r1, 8008d7c <__ssvfiscanf_r+0x114>)
 8008d76:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008e2f 	.word	0x08008e2f
 8008d80:	08008d55 	.word	0x08008d55
 8008d84:	08008d55 	.word	0x08008d55
 8008d88:	08008e8d 	.word	0x08008e8d
 8008d8c:	08008d55 	.word	0x08008d55
 8008d90:	08008d55 	.word	0x08008d55
 8008d94:	08008d55 	.word	0x08008d55
 8008d98:	08008d55 	.word	0x08008d55
 8008d9c:	08008d55 	.word	0x08008d55
 8008da0:	08008d55 	.word	0x08008d55
 8008da4:	08008d55 	.word	0x08008d55
 8008da8:	08008ea3 	.word	0x08008ea3
 8008dac:	08008e89 	.word	0x08008e89
 8008db0:	08008e07 	.word	0x08008e07
 8008db4:	08008e07 	.word	0x08008e07
 8008db8:	08008e07 	.word	0x08008e07
 8008dbc:	08008d55 	.word	0x08008d55
 8008dc0:	08008e45 	.word	0x08008e45
 8008dc4:	08008d55 	.word	0x08008d55
 8008dc8:	08008d55 	.word	0x08008d55
 8008dcc:	08008d55 	.word	0x08008d55
 8008dd0:	08008d55 	.word	0x08008d55
 8008dd4:	08008eb3 	.word	0x08008eb3
 8008dd8:	08008e81 	.word	0x08008e81
 8008ddc:	08008e27 	.word	0x08008e27
 8008de0:	08008d55 	.word	0x08008d55
 8008de4:	08008d55 	.word	0x08008d55
 8008de8:	08008eaf 	.word	0x08008eaf
 8008dec:	08008d55 	.word	0x08008d55
 8008df0:	08008e89 	.word	0x08008e89
 8008df4:	08008d55 	.word	0x08008d55
 8008df8:	08008d55 	.word	0x08008d55
 8008dfc:	08008e2f 	.word	0x08008e2f
 8008e00:	3b45      	subs	r3, #69	; 0x45
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d8a6      	bhi.n	8008d54 <__ssvfiscanf_r+0xec>
 8008e06:	2305      	movs	r3, #5
 8008e08:	e01f      	b.n	8008e4a <__ssvfiscanf_r+0x1e2>
 8008e0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4630      	mov	r0, r6
 8008e10:	4798      	blx	r3
 8008e12:	2800      	cmp	r0, #0
 8008e14:	f43f af68 	beq.w	8008ce8 <__ssvfiscanf_r+0x80>
 8008e18:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	f040 808d 	bne.w	8008f3a <__ssvfiscanf_r+0x2d2>
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	e08f      	b.n	8008f46 <__ssvfiscanf_r+0x2de>
 8008e26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008e28:	f042 0220 	orr.w	r2, r2, #32
 8008e2c:	9241      	str	r2, [sp, #260]	; 0x104
 8008e2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e34:	9241      	str	r2, [sp, #260]	; 0x104
 8008e36:	2210      	movs	r2, #16
 8008e38:	2b6f      	cmp	r3, #111	; 0x6f
 8008e3a:	9242      	str	r2, [sp, #264]	; 0x108
 8008e3c:	bf34      	ite	cc
 8008e3e:	2303      	movcc	r3, #3
 8008e40:	2304      	movcs	r3, #4
 8008e42:	e002      	b.n	8008e4a <__ssvfiscanf_r+0x1e2>
 8008e44:	2300      	movs	r3, #0
 8008e46:	9342      	str	r3, [sp, #264]	; 0x108
 8008e48:	2303      	movs	r3, #3
 8008e4a:	9347      	str	r3, [sp, #284]	; 0x11c
 8008e4c:	6863      	ldr	r3, [r4, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dd3d      	ble.n	8008ece <__ssvfiscanf_r+0x266>
 8008e52:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008e54:	0659      	lsls	r1, r3, #25
 8008e56:	d404      	bmi.n	8008e62 <__ssvfiscanf_r+0x1fa>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	5cba      	ldrb	r2, [r7, r2]
 8008e5e:	0712      	lsls	r2, r2, #28
 8008e60:	d43c      	bmi.n	8008edc <__ssvfiscanf_r+0x274>
 8008e62:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	dc4b      	bgt.n	8008f00 <__ssvfiscanf_r+0x298>
 8008e68:	466b      	mov	r3, sp
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	a941      	add	r1, sp, #260	; 0x104
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f000 fa02 	bl	8009278 <_scanf_chars>
 8008e74:	2801      	cmp	r0, #1
 8008e76:	d06a      	beq.n	8008f4e <__ssvfiscanf_r+0x2e6>
 8008e78:	2802      	cmp	r0, #2
 8008e7a:	f47f af1c 	bne.w	8008cb6 <__ssvfiscanf_r+0x4e>
 8008e7e:	e7cb      	b.n	8008e18 <__ssvfiscanf_r+0x1b0>
 8008e80:	2308      	movs	r3, #8
 8008e82:	9342      	str	r3, [sp, #264]	; 0x108
 8008e84:	2304      	movs	r3, #4
 8008e86:	e7e0      	b.n	8008e4a <__ssvfiscanf_r+0x1e2>
 8008e88:	220a      	movs	r2, #10
 8008e8a:	e7d5      	b.n	8008e38 <__ssvfiscanf_r+0x1d0>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	4640      	mov	r0, r8
 8008e90:	f000 fb40 	bl	8009514 <__sccl>
 8008e94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e9a:	9341      	str	r3, [sp, #260]	; 0x104
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e7d3      	b.n	8008e4a <__ssvfiscanf_r+0x1e2>
 8008ea2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea8:	9341      	str	r3, [sp, #260]	; 0x104
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e7cd      	b.n	8008e4a <__ssvfiscanf_r+0x1e2>
 8008eae:	2302      	movs	r3, #2
 8008eb0:	e7cb      	b.n	8008e4a <__ssvfiscanf_r+0x1e2>
 8008eb2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008eb4:	06c3      	lsls	r3, r0, #27
 8008eb6:	f53f aefe 	bmi.w	8008cb6 <__ssvfiscanf_r+0x4e>
 8008eba:	9b00      	ldr	r3, [sp, #0]
 8008ebc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ebe:	1d19      	adds	r1, r3, #4
 8008ec0:	9100      	str	r1, [sp, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	07c0      	lsls	r0, r0, #31
 8008ec6:	bf4c      	ite	mi
 8008ec8:	801a      	strhmi	r2, [r3, #0]
 8008eca:	601a      	strpl	r2, [r3, #0]
 8008ecc:	e6f3      	b.n	8008cb6 <__ssvfiscanf_r+0x4e>
 8008ece:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	4798      	blx	r3
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d0bb      	beq.n	8008e52 <__ssvfiscanf_r+0x1ea>
 8008eda:	e79d      	b.n	8008e18 <__ssvfiscanf_r+0x1b0>
 8008edc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ede:	3201      	adds	r2, #1
 8008ee0:	9245      	str	r2, [sp, #276]	; 0x114
 8008ee2:	6862      	ldr	r2, [r4, #4]
 8008ee4:	3a01      	subs	r2, #1
 8008ee6:	2a00      	cmp	r2, #0
 8008ee8:	6062      	str	r2, [r4, #4]
 8008eea:	dd02      	ble.n	8008ef2 <__ssvfiscanf_r+0x28a>
 8008eec:	3301      	adds	r3, #1
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	e7b2      	b.n	8008e58 <__ssvfiscanf_r+0x1f0>
 8008ef2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	4798      	blx	r3
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d0ac      	beq.n	8008e58 <__ssvfiscanf_r+0x1f0>
 8008efe:	e78b      	b.n	8008e18 <__ssvfiscanf_r+0x1b0>
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	dc0f      	bgt.n	8008f24 <__ssvfiscanf_r+0x2bc>
 8008f04:	466b      	mov	r3, sp
 8008f06:	4622      	mov	r2, r4
 8008f08:	a941      	add	r1, sp, #260	; 0x104
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f000 fa0e 	bl	800932c <_scanf_i>
 8008f10:	e7b0      	b.n	8008e74 <__ssvfiscanf_r+0x20c>
 8008f12:	bf00      	nop
 8008f14:	08008bb5 	.word	0x08008bb5
 8008f18:	08008c2f 	.word	0x08008c2f
 8008f1c:	08009aab 	.word	0x08009aab
 8008f20:	08009a62 	.word	0x08009a62
 8008f24:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <__ssvfiscanf_r+0x2ec>)
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f43f aec5 	beq.w	8008cb6 <__ssvfiscanf_r+0x4e>
 8008f2c:	466b      	mov	r3, sp
 8008f2e:	4622      	mov	r2, r4
 8008f30:	a941      	add	r1, sp, #260	; 0x104
 8008f32:	4630      	mov	r0, r6
 8008f34:	f3af 8000 	nop.w
 8008f38:	e79c      	b.n	8008e74 <__ssvfiscanf_r+0x20c>
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008f40:	bf18      	it	ne
 8008f42:	f04f 30ff 	movne.w	r0, #4294967295
 8008f46:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008f50:	e7f9      	b.n	8008f46 <__ssvfiscanf_r+0x2de>
 8008f52:	bf00      	nop
 8008f54:	00000000 	.word	0x00000000

08008f58 <_printf_common>:
 8008f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	4699      	mov	r9, r3
 8008f60:	688a      	ldr	r2, [r1, #8]
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	bfb8      	it	lt
 8008f6c:	4613      	movlt	r3, r2
 8008f6e:	6033      	str	r3, [r6, #0]
 8008f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f74:	4607      	mov	r7, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	b10a      	cbz	r2, 8008f7e <_printf_common+0x26>
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	6033      	str	r3, [r6, #0]
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	0699      	lsls	r1, r3, #26
 8008f82:	bf42      	ittt	mi
 8008f84:	6833      	ldrmi	r3, [r6, #0]
 8008f86:	3302      	addmi	r3, #2
 8008f88:	6033      	strmi	r3, [r6, #0]
 8008f8a:	6825      	ldr	r5, [r4, #0]
 8008f8c:	f015 0506 	ands.w	r5, r5, #6
 8008f90:	d106      	bne.n	8008fa0 <_printf_common+0x48>
 8008f92:	f104 0a19 	add.w	sl, r4, #25
 8008f96:	68e3      	ldr	r3, [r4, #12]
 8008f98:	6832      	ldr	r2, [r6, #0]
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	42ab      	cmp	r3, r5
 8008f9e:	dc26      	bgt.n	8008fee <_printf_common+0x96>
 8008fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fa4:	1e13      	subs	r3, r2, #0
 8008fa6:	6822      	ldr	r2, [r4, #0]
 8008fa8:	bf18      	it	ne
 8008faa:	2301      	movne	r3, #1
 8008fac:	0692      	lsls	r2, r2, #26
 8008fae:	d42b      	bmi.n	8009008 <_printf_common+0xb0>
 8008fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	47c0      	blx	r8
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d01e      	beq.n	8008ffc <_printf_common+0xa4>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	6922      	ldr	r2, [r4, #16]
 8008fc2:	f003 0306 	and.w	r3, r3, #6
 8008fc6:	2b04      	cmp	r3, #4
 8008fc8:	bf02      	ittt	eq
 8008fca:	68e5      	ldreq	r5, [r4, #12]
 8008fcc:	6833      	ldreq	r3, [r6, #0]
 8008fce:	1aed      	subeq	r5, r5, r3
 8008fd0:	68a3      	ldr	r3, [r4, #8]
 8008fd2:	bf0c      	ite	eq
 8008fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fd8:	2500      	movne	r5, #0
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	bfc4      	itt	gt
 8008fde:	1a9b      	subgt	r3, r3, r2
 8008fe0:	18ed      	addgt	r5, r5, r3
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	341a      	adds	r4, #26
 8008fe6:	42b5      	cmp	r5, r6
 8008fe8:	d11a      	bne.n	8009020 <_printf_common+0xc8>
 8008fea:	2000      	movs	r0, #0
 8008fec:	e008      	b.n	8009000 <_printf_common+0xa8>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	47c0      	blx	r8
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d103      	bne.n	8009004 <_printf_common+0xac>
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009004:	3501      	adds	r5, #1
 8009006:	e7c6      	b.n	8008f96 <_printf_common+0x3e>
 8009008:	18e1      	adds	r1, r4, r3
 800900a:	1c5a      	adds	r2, r3, #1
 800900c:	2030      	movs	r0, #48	; 0x30
 800900e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009012:	4422      	add	r2, r4
 8009014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800901c:	3302      	adds	r3, #2
 800901e:	e7c7      	b.n	8008fb0 <_printf_common+0x58>
 8009020:	2301      	movs	r3, #1
 8009022:	4622      	mov	r2, r4
 8009024:	4649      	mov	r1, r9
 8009026:	4638      	mov	r0, r7
 8009028:	47c0      	blx	r8
 800902a:	3001      	adds	r0, #1
 800902c:	d0e6      	beq.n	8008ffc <_printf_common+0xa4>
 800902e:	3601      	adds	r6, #1
 8009030:	e7d9      	b.n	8008fe6 <_printf_common+0x8e>
	...

08009034 <_printf_i>:
 8009034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009038:	7e0f      	ldrb	r7, [r1, #24]
 800903a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800903c:	2f78      	cmp	r7, #120	; 0x78
 800903e:	4691      	mov	r9, r2
 8009040:	4680      	mov	r8, r0
 8009042:	460c      	mov	r4, r1
 8009044:	469a      	mov	sl, r3
 8009046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800904a:	d807      	bhi.n	800905c <_printf_i+0x28>
 800904c:	2f62      	cmp	r7, #98	; 0x62
 800904e:	d80a      	bhi.n	8009066 <_printf_i+0x32>
 8009050:	2f00      	cmp	r7, #0
 8009052:	f000 80d4 	beq.w	80091fe <_printf_i+0x1ca>
 8009056:	2f58      	cmp	r7, #88	; 0x58
 8009058:	f000 80c0 	beq.w	80091dc <_printf_i+0x1a8>
 800905c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009064:	e03a      	b.n	80090dc <_printf_i+0xa8>
 8009066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800906a:	2b15      	cmp	r3, #21
 800906c:	d8f6      	bhi.n	800905c <_printf_i+0x28>
 800906e:	a101      	add	r1, pc, #4	; (adr r1, 8009074 <_printf_i+0x40>)
 8009070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009074:	080090cd 	.word	0x080090cd
 8009078:	080090e1 	.word	0x080090e1
 800907c:	0800905d 	.word	0x0800905d
 8009080:	0800905d 	.word	0x0800905d
 8009084:	0800905d 	.word	0x0800905d
 8009088:	0800905d 	.word	0x0800905d
 800908c:	080090e1 	.word	0x080090e1
 8009090:	0800905d 	.word	0x0800905d
 8009094:	0800905d 	.word	0x0800905d
 8009098:	0800905d 	.word	0x0800905d
 800909c:	0800905d 	.word	0x0800905d
 80090a0:	080091e5 	.word	0x080091e5
 80090a4:	0800910d 	.word	0x0800910d
 80090a8:	0800919f 	.word	0x0800919f
 80090ac:	0800905d 	.word	0x0800905d
 80090b0:	0800905d 	.word	0x0800905d
 80090b4:	08009207 	.word	0x08009207
 80090b8:	0800905d 	.word	0x0800905d
 80090bc:	0800910d 	.word	0x0800910d
 80090c0:	0800905d 	.word	0x0800905d
 80090c4:	0800905d 	.word	0x0800905d
 80090c8:	080091a7 	.word	0x080091a7
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	1d1a      	adds	r2, r3, #4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	602a      	str	r2, [r5, #0]
 80090d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090dc:	2301      	movs	r3, #1
 80090de:	e09f      	b.n	8009220 <_printf_i+0x1ec>
 80090e0:	6820      	ldr	r0, [r4, #0]
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	0607      	lsls	r7, r0, #24
 80090e6:	f103 0104 	add.w	r1, r3, #4
 80090ea:	6029      	str	r1, [r5, #0]
 80090ec:	d501      	bpl.n	80090f2 <_printf_i+0xbe>
 80090ee:	681e      	ldr	r6, [r3, #0]
 80090f0:	e003      	b.n	80090fa <_printf_i+0xc6>
 80090f2:	0646      	lsls	r6, r0, #25
 80090f4:	d5fb      	bpl.n	80090ee <_printf_i+0xba>
 80090f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80090fa:	2e00      	cmp	r6, #0
 80090fc:	da03      	bge.n	8009106 <_printf_i+0xd2>
 80090fe:	232d      	movs	r3, #45	; 0x2d
 8009100:	4276      	negs	r6, r6
 8009102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009106:	485a      	ldr	r0, [pc, #360]	; (8009270 <_printf_i+0x23c>)
 8009108:	230a      	movs	r3, #10
 800910a:	e012      	b.n	8009132 <_printf_i+0xfe>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	6820      	ldr	r0, [r4, #0]
 8009110:	1d19      	adds	r1, r3, #4
 8009112:	6029      	str	r1, [r5, #0]
 8009114:	0605      	lsls	r5, r0, #24
 8009116:	d501      	bpl.n	800911c <_printf_i+0xe8>
 8009118:	681e      	ldr	r6, [r3, #0]
 800911a:	e002      	b.n	8009122 <_printf_i+0xee>
 800911c:	0641      	lsls	r1, r0, #25
 800911e:	d5fb      	bpl.n	8009118 <_printf_i+0xe4>
 8009120:	881e      	ldrh	r6, [r3, #0]
 8009122:	4853      	ldr	r0, [pc, #332]	; (8009270 <_printf_i+0x23c>)
 8009124:	2f6f      	cmp	r7, #111	; 0x6f
 8009126:	bf0c      	ite	eq
 8009128:	2308      	moveq	r3, #8
 800912a:	230a      	movne	r3, #10
 800912c:	2100      	movs	r1, #0
 800912e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009132:	6865      	ldr	r5, [r4, #4]
 8009134:	60a5      	str	r5, [r4, #8]
 8009136:	2d00      	cmp	r5, #0
 8009138:	bfa2      	ittt	ge
 800913a:	6821      	ldrge	r1, [r4, #0]
 800913c:	f021 0104 	bicge.w	r1, r1, #4
 8009140:	6021      	strge	r1, [r4, #0]
 8009142:	b90e      	cbnz	r6, 8009148 <_printf_i+0x114>
 8009144:	2d00      	cmp	r5, #0
 8009146:	d04b      	beq.n	80091e0 <_printf_i+0x1ac>
 8009148:	4615      	mov	r5, r2
 800914a:	fbb6 f1f3 	udiv	r1, r6, r3
 800914e:	fb03 6711 	mls	r7, r3, r1, r6
 8009152:	5dc7      	ldrb	r7, [r0, r7]
 8009154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009158:	4637      	mov	r7, r6
 800915a:	42bb      	cmp	r3, r7
 800915c:	460e      	mov	r6, r1
 800915e:	d9f4      	bls.n	800914a <_printf_i+0x116>
 8009160:	2b08      	cmp	r3, #8
 8009162:	d10b      	bne.n	800917c <_printf_i+0x148>
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	07de      	lsls	r6, r3, #31
 8009168:	d508      	bpl.n	800917c <_printf_i+0x148>
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	6861      	ldr	r1, [r4, #4]
 800916e:	4299      	cmp	r1, r3
 8009170:	bfde      	ittt	le
 8009172:	2330      	movle	r3, #48	; 0x30
 8009174:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009178:	f105 35ff 	addle.w	r5, r5, #4294967295
 800917c:	1b52      	subs	r2, r2, r5
 800917e:	6122      	str	r2, [r4, #16]
 8009180:	f8cd a000 	str.w	sl, [sp]
 8009184:	464b      	mov	r3, r9
 8009186:	aa03      	add	r2, sp, #12
 8009188:	4621      	mov	r1, r4
 800918a:	4640      	mov	r0, r8
 800918c:	f7ff fee4 	bl	8008f58 <_printf_common>
 8009190:	3001      	adds	r0, #1
 8009192:	d14a      	bne.n	800922a <_printf_i+0x1f6>
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	b004      	add	sp, #16
 800919a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	f043 0320 	orr.w	r3, r3, #32
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	4833      	ldr	r0, [pc, #204]	; (8009274 <_printf_i+0x240>)
 80091a8:	2778      	movs	r7, #120	; 0x78
 80091aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	6829      	ldr	r1, [r5, #0]
 80091b2:	061f      	lsls	r7, r3, #24
 80091b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80091b8:	d402      	bmi.n	80091c0 <_printf_i+0x18c>
 80091ba:	065f      	lsls	r7, r3, #25
 80091bc:	bf48      	it	mi
 80091be:	b2b6      	uxthmi	r6, r6
 80091c0:	07df      	lsls	r7, r3, #31
 80091c2:	bf48      	it	mi
 80091c4:	f043 0320 	orrmi.w	r3, r3, #32
 80091c8:	6029      	str	r1, [r5, #0]
 80091ca:	bf48      	it	mi
 80091cc:	6023      	strmi	r3, [r4, #0]
 80091ce:	b91e      	cbnz	r6, 80091d8 <_printf_i+0x1a4>
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	f023 0320 	bic.w	r3, r3, #32
 80091d6:	6023      	str	r3, [r4, #0]
 80091d8:	2310      	movs	r3, #16
 80091da:	e7a7      	b.n	800912c <_printf_i+0xf8>
 80091dc:	4824      	ldr	r0, [pc, #144]	; (8009270 <_printf_i+0x23c>)
 80091de:	e7e4      	b.n	80091aa <_printf_i+0x176>
 80091e0:	4615      	mov	r5, r2
 80091e2:	e7bd      	b.n	8009160 <_printf_i+0x12c>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	6826      	ldr	r6, [r4, #0]
 80091e8:	6961      	ldr	r1, [r4, #20]
 80091ea:	1d18      	adds	r0, r3, #4
 80091ec:	6028      	str	r0, [r5, #0]
 80091ee:	0635      	lsls	r5, r6, #24
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	d501      	bpl.n	80091f8 <_printf_i+0x1c4>
 80091f4:	6019      	str	r1, [r3, #0]
 80091f6:	e002      	b.n	80091fe <_printf_i+0x1ca>
 80091f8:	0670      	lsls	r0, r6, #25
 80091fa:	d5fb      	bpl.n	80091f4 <_printf_i+0x1c0>
 80091fc:	8019      	strh	r1, [r3, #0]
 80091fe:	2300      	movs	r3, #0
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	4615      	mov	r5, r2
 8009204:	e7bc      	b.n	8009180 <_printf_i+0x14c>
 8009206:	682b      	ldr	r3, [r5, #0]
 8009208:	1d1a      	adds	r2, r3, #4
 800920a:	602a      	str	r2, [r5, #0]
 800920c:	681d      	ldr	r5, [r3, #0]
 800920e:	6862      	ldr	r2, [r4, #4]
 8009210:	2100      	movs	r1, #0
 8009212:	4628      	mov	r0, r5
 8009214:	f7f6 ffec 	bl	80001f0 <memchr>
 8009218:	b108      	cbz	r0, 800921e <_printf_i+0x1ea>
 800921a:	1b40      	subs	r0, r0, r5
 800921c:	6060      	str	r0, [r4, #4]
 800921e:	6863      	ldr	r3, [r4, #4]
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	2300      	movs	r3, #0
 8009224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009228:	e7aa      	b.n	8009180 <_printf_i+0x14c>
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	462a      	mov	r2, r5
 800922e:	4649      	mov	r1, r9
 8009230:	4640      	mov	r0, r8
 8009232:	47d0      	blx	sl
 8009234:	3001      	adds	r0, #1
 8009236:	d0ad      	beq.n	8009194 <_printf_i+0x160>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	079b      	lsls	r3, r3, #30
 800923c:	d413      	bmi.n	8009266 <_printf_i+0x232>
 800923e:	68e0      	ldr	r0, [r4, #12]
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	4298      	cmp	r0, r3
 8009244:	bfb8      	it	lt
 8009246:	4618      	movlt	r0, r3
 8009248:	e7a6      	b.n	8009198 <_printf_i+0x164>
 800924a:	2301      	movs	r3, #1
 800924c:	4632      	mov	r2, r6
 800924e:	4649      	mov	r1, r9
 8009250:	4640      	mov	r0, r8
 8009252:	47d0      	blx	sl
 8009254:	3001      	adds	r0, #1
 8009256:	d09d      	beq.n	8009194 <_printf_i+0x160>
 8009258:	3501      	adds	r5, #1
 800925a:	68e3      	ldr	r3, [r4, #12]
 800925c:	9903      	ldr	r1, [sp, #12]
 800925e:	1a5b      	subs	r3, r3, r1
 8009260:	42ab      	cmp	r3, r5
 8009262:	dcf2      	bgt.n	800924a <_printf_i+0x216>
 8009264:	e7eb      	b.n	800923e <_printf_i+0x20a>
 8009266:	2500      	movs	r5, #0
 8009268:	f104 0619 	add.w	r6, r4, #25
 800926c:	e7f5      	b.n	800925a <_printf_i+0x226>
 800926e:	bf00      	nop
 8009270:	08009a6d 	.word	0x08009a6d
 8009274:	08009a7e 	.word	0x08009a7e

08009278 <_scanf_chars>:
 8009278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800927c:	4615      	mov	r5, r2
 800927e:	688a      	ldr	r2, [r1, #8]
 8009280:	4680      	mov	r8, r0
 8009282:	460c      	mov	r4, r1
 8009284:	b932      	cbnz	r2, 8009294 <_scanf_chars+0x1c>
 8009286:	698a      	ldr	r2, [r1, #24]
 8009288:	2a00      	cmp	r2, #0
 800928a:	bf0c      	ite	eq
 800928c:	2201      	moveq	r2, #1
 800928e:	f04f 32ff 	movne.w	r2, #4294967295
 8009292:	608a      	str	r2, [r1, #8]
 8009294:	6822      	ldr	r2, [r4, #0]
 8009296:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009328 <_scanf_chars+0xb0>
 800929a:	06d1      	lsls	r1, r2, #27
 800929c:	bf5f      	itttt	pl
 800929e:	681a      	ldrpl	r2, [r3, #0]
 80092a0:	1d11      	addpl	r1, r2, #4
 80092a2:	6019      	strpl	r1, [r3, #0]
 80092a4:	6816      	ldrpl	r6, [r2, #0]
 80092a6:	2700      	movs	r7, #0
 80092a8:	69a0      	ldr	r0, [r4, #24]
 80092aa:	b188      	cbz	r0, 80092d0 <_scanf_chars+0x58>
 80092ac:	2801      	cmp	r0, #1
 80092ae:	d107      	bne.n	80092c0 <_scanf_chars+0x48>
 80092b0:	682a      	ldr	r2, [r5, #0]
 80092b2:	7811      	ldrb	r1, [r2, #0]
 80092b4:	6962      	ldr	r2, [r4, #20]
 80092b6:	5c52      	ldrb	r2, [r2, r1]
 80092b8:	b952      	cbnz	r2, 80092d0 <_scanf_chars+0x58>
 80092ba:	2f00      	cmp	r7, #0
 80092bc:	d031      	beq.n	8009322 <_scanf_chars+0xaa>
 80092be:	e022      	b.n	8009306 <_scanf_chars+0x8e>
 80092c0:	2802      	cmp	r0, #2
 80092c2:	d120      	bne.n	8009306 <_scanf_chars+0x8e>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80092cc:	071b      	lsls	r3, r3, #28
 80092ce:	d41a      	bmi.n	8009306 <_scanf_chars+0x8e>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	06da      	lsls	r2, r3, #27
 80092d4:	bf5e      	ittt	pl
 80092d6:	682b      	ldrpl	r3, [r5, #0]
 80092d8:	781b      	ldrbpl	r3, [r3, #0]
 80092da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80092de:	682a      	ldr	r2, [r5, #0]
 80092e0:	686b      	ldr	r3, [r5, #4]
 80092e2:	3201      	adds	r2, #1
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	68a2      	ldr	r2, [r4, #8]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	3a01      	subs	r2, #1
 80092ec:	606b      	str	r3, [r5, #4]
 80092ee:	3701      	adds	r7, #1
 80092f0:	60a2      	str	r2, [r4, #8]
 80092f2:	b142      	cbz	r2, 8009306 <_scanf_chars+0x8e>
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dcd7      	bgt.n	80092a8 <_scanf_chars+0x30>
 80092f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80092fc:	4629      	mov	r1, r5
 80092fe:	4640      	mov	r0, r8
 8009300:	4798      	blx	r3
 8009302:	2800      	cmp	r0, #0
 8009304:	d0d0      	beq.n	80092a8 <_scanf_chars+0x30>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	f013 0310 	ands.w	r3, r3, #16
 800930c:	d105      	bne.n	800931a <_scanf_chars+0xa2>
 800930e:	68e2      	ldr	r2, [r4, #12]
 8009310:	3201      	adds	r2, #1
 8009312:	60e2      	str	r2, [r4, #12]
 8009314:	69a2      	ldr	r2, [r4, #24]
 8009316:	b102      	cbz	r2, 800931a <_scanf_chars+0xa2>
 8009318:	7033      	strb	r3, [r6, #0]
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	443b      	add	r3, r7
 800931e:	6123      	str	r3, [r4, #16]
 8009320:	2000      	movs	r0, #0
 8009322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009326:	bf00      	nop
 8009328:	08009aab 	.word	0x08009aab

0800932c <_scanf_i>:
 800932c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009330:	4698      	mov	r8, r3
 8009332:	4b74      	ldr	r3, [pc, #464]	; (8009504 <_scanf_i+0x1d8>)
 8009334:	460c      	mov	r4, r1
 8009336:	4682      	mov	sl, r0
 8009338:	4616      	mov	r6, r2
 800933a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800933e:	b087      	sub	sp, #28
 8009340:	ab03      	add	r3, sp, #12
 8009342:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009346:	4b70      	ldr	r3, [pc, #448]	; (8009508 <_scanf_i+0x1dc>)
 8009348:	69a1      	ldr	r1, [r4, #24]
 800934a:	4a70      	ldr	r2, [pc, #448]	; (800950c <_scanf_i+0x1e0>)
 800934c:	2903      	cmp	r1, #3
 800934e:	bf18      	it	ne
 8009350:	461a      	movne	r2, r3
 8009352:	68a3      	ldr	r3, [r4, #8]
 8009354:	9201      	str	r2, [sp, #4]
 8009356:	1e5a      	subs	r2, r3, #1
 8009358:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800935c:	bf88      	it	hi
 800935e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009362:	4627      	mov	r7, r4
 8009364:	bf82      	ittt	hi
 8009366:	eb03 0905 	addhi.w	r9, r3, r5
 800936a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800936e:	60a3      	strhi	r3, [r4, #8]
 8009370:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009374:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009378:	bf98      	it	ls
 800937a:	f04f 0900 	movls.w	r9, #0
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	463d      	mov	r5, r7
 8009382:	f04f 0b00 	mov.w	fp, #0
 8009386:	6831      	ldr	r1, [r6, #0]
 8009388:	ab03      	add	r3, sp, #12
 800938a:	7809      	ldrb	r1, [r1, #0]
 800938c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009390:	2202      	movs	r2, #2
 8009392:	f7f6 ff2d 	bl	80001f0 <memchr>
 8009396:	b328      	cbz	r0, 80093e4 <_scanf_i+0xb8>
 8009398:	f1bb 0f01 	cmp.w	fp, #1
 800939c:	d159      	bne.n	8009452 <_scanf_i+0x126>
 800939e:	6862      	ldr	r2, [r4, #4]
 80093a0:	b92a      	cbnz	r2, 80093ae <_scanf_i+0x82>
 80093a2:	6822      	ldr	r2, [r4, #0]
 80093a4:	2308      	movs	r3, #8
 80093a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093aa:	6063      	str	r3, [r4, #4]
 80093ac:	6022      	str	r2, [r4, #0]
 80093ae:	6822      	ldr	r2, [r4, #0]
 80093b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80093b4:	6022      	str	r2, [r4, #0]
 80093b6:	68a2      	ldr	r2, [r4, #8]
 80093b8:	1e51      	subs	r1, r2, #1
 80093ba:	60a1      	str	r1, [r4, #8]
 80093bc:	b192      	cbz	r2, 80093e4 <_scanf_i+0xb8>
 80093be:	6832      	ldr	r2, [r6, #0]
 80093c0:	1c51      	adds	r1, r2, #1
 80093c2:	6031      	str	r1, [r6, #0]
 80093c4:	7812      	ldrb	r2, [r2, #0]
 80093c6:	f805 2b01 	strb.w	r2, [r5], #1
 80093ca:	6872      	ldr	r2, [r6, #4]
 80093cc:	3a01      	subs	r2, #1
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	6072      	str	r2, [r6, #4]
 80093d2:	dc07      	bgt.n	80093e4 <_scanf_i+0xb8>
 80093d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80093d8:	4631      	mov	r1, r6
 80093da:	4650      	mov	r0, sl
 80093dc:	4790      	blx	r2
 80093de:	2800      	cmp	r0, #0
 80093e0:	f040 8085 	bne.w	80094ee <_scanf_i+0x1c2>
 80093e4:	f10b 0b01 	add.w	fp, fp, #1
 80093e8:	f1bb 0f03 	cmp.w	fp, #3
 80093ec:	d1cb      	bne.n	8009386 <_scanf_i+0x5a>
 80093ee:	6863      	ldr	r3, [r4, #4]
 80093f0:	b90b      	cbnz	r3, 80093f6 <_scanf_i+0xca>
 80093f2:	230a      	movs	r3, #10
 80093f4:	6063      	str	r3, [r4, #4]
 80093f6:	6863      	ldr	r3, [r4, #4]
 80093f8:	4945      	ldr	r1, [pc, #276]	; (8009510 <_scanf_i+0x1e4>)
 80093fa:	6960      	ldr	r0, [r4, #20]
 80093fc:	1ac9      	subs	r1, r1, r3
 80093fe:	f000 f889 	bl	8009514 <__sccl>
 8009402:	f04f 0b00 	mov.w	fp, #0
 8009406:	68a3      	ldr	r3, [r4, #8]
 8009408:	6822      	ldr	r2, [r4, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d03d      	beq.n	800948a <_scanf_i+0x15e>
 800940e:	6831      	ldr	r1, [r6, #0]
 8009410:	6960      	ldr	r0, [r4, #20]
 8009412:	f891 c000 	ldrb.w	ip, [r1]
 8009416:	f810 000c 	ldrb.w	r0, [r0, ip]
 800941a:	2800      	cmp	r0, #0
 800941c:	d035      	beq.n	800948a <_scanf_i+0x15e>
 800941e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009422:	d124      	bne.n	800946e <_scanf_i+0x142>
 8009424:	0510      	lsls	r0, r2, #20
 8009426:	d522      	bpl.n	800946e <_scanf_i+0x142>
 8009428:	f10b 0b01 	add.w	fp, fp, #1
 800942c:	f1b9 0f00 	cmp.w	r9, #0
 8009430:	d003      	beq.n	800943a <_scanf_i+0x10e>
 8009432:	3301      	adds	r3, #1
 8009434:	f109 39ff 	add.w	r9, r9, #4294967295
 8009438:	60a3      	str	r3, [r4, #8]
 800943a:	6873      	ldr	r3, [r6, #4]
 800943c:	3b01      	subs	r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	6073      	str	r3, [r6, #4]
 8009442:	dd1b      	ble.n	800947c <_scanf_i+0x150>
 8009444:	6833      	ldr	r3, [r6, #0]
 8009446:	3301      	adds	r3, #1
 8009448:	6033      	str	r3, [r6, #0]
 800944a:	68a3      	ldr	r3, [r4, #8]
 800944c:	3b01      	subs	r3, #1
 800944e:	60a3      	str	r3, [r4, #8]
 8009450:	e7d9      	b.n	8009406 <_scanf_i+0xda>
 8009452:	f1bb 0f02 	cmp.w	fp, #2
 8009456:	d1ae      	bne.n	80093b6 <_scanf_i+0x8a>
 8009458:	6822      	ldr	r2, [r4, #0]
 800945a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800945e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009462:	d1bf      	bne.n	80093e4 <_scanf_i+0xb8>
 8009464:	2310      	movs	r3, #16
 8009466:	6063      	str	r3, [r4, #4]
 8009468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800946c:	e7a2      	b.n	80093b4 <_scanf_i+0x88>
 800946e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009472:	6022      	str	r2, [r4, #0]
 8009474:	780b      	ldrb	r3, [r1, #0]
 8009476:	f805 3b01 	strb.w	r3, [r5], #1
 800947a:	e7de      	b.n	800943a <_scanf_i+0x10e>
 800947c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009480:	4631      	mov	r1, r6
 8009482:	4650      	mov	r0, sl
 8009484:	4798      	blx	r3
 8009486:	2800      	cmp	r0, #0
 8009488:	d0df      	beq.n	800944a <_scanf_i+0x11e>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	05d9      	lsls	r1, r3, #23
 800948e:	d50d      	bpl.n	80094ac <_scanf_i+0x180>
 8009490:	42bd      	cmp	r5, r7
 8009492:	d909      	bls.n	80094a8 <_scanf_i+0x17c>
 8009494:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009498:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800949c:	4632      	mov	r2, r6
 800949e:	4650      	mov	r0, sl
 80094a0:	4798      	blx	r3
 80094a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80094a6:	464d      	mov	r5, r9
 80094a8:	42bd      	cmp	r5, r7
 80094aa:	d028      	beq.n	80094fe <_scanf_i+0x1d2>
 80094ac:	6822      	ldr	r2, [r4, #0]
 80094ae:	f012 0210 	ands.w	r2, r2, #16
 80094b2:	d113      	bne.n	80094dc <_scanf_i+0x1b0>
 80094b4:	702a      	strb	r2, [r5, #0]
 80094b6:	6863      	ldr	r3, [r4, #4]
 80094b8:	9e01      	ldr	r6, [sp, #4]
 80094ba:	4639      	mov	r1, r7
 80094bc:	4650      	mov	r0, sl
 80094be:	47b0      	blx	r6
 80094c0:	f8d8 3000 	ldr.w	r3, [r8]
 80094c4:	6821      	ldr	r1, [r4, #0]
 80094c6:	1d1a      	adds	r2, r3, #4
 80094c8:	f8c8 2000 	str.w	r2, [r8]
 80094cc:	f011 0f20 	tst.w	r1, #32
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	d00f      	beq.n	80094f4 <_scanf_i+0x1c8>
 80094d4:	6018      	str	r0, [r3, #0]
 80094d6:	68e3      	ldr	r3, [r4, #12]
 80094d8:	3301      	adds	r3, #1
 80094da:	60e3      	str	r3, [r4, #12]
 80094dc:	6923      	ldr	r3, [r4, #16]
 80094de:	1bed      	subs	r5, r5, r7
 80094e0:	445d      	add	r5, fp
 80094e2:	442b      	add	r3, r5
 80094e4:	6123      	str	r3, [r4, #16]
 80094e6:	2000      	movs	r0, #0
 80094e8:	b007      	add	sp, #28
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	f04f 0b00 	mov.w	fp, #0
 80094f2:	e7ca      	b.n	800948a <_scanf_i+0x15e>
 80094f4:	07ca      	lsls	r2, r1, #31
 80094f6:	bf4c      	ite	mi
 80094f8:	8018      	strhmi	r0, [r3, #0]
 80094fa:	6018      	strpl	r0, [r3, #0]
 80094fc:	e7eb      	b.n	80094d6 <_scanf_i+0x1aa>
 80094fe:	2001      	movs	r0, #1
 8009500:	e7f2      	b.n	80094e8 <_scanf_i+0x1bc>
 8009502:	bf00      	nop
 8009504:	08009a38 	.word	0x08009a38
 8009508:	0800989d 	.word	0x0800989d
 800950c:	080097b5 	.word	0x080097b5
 8009510:	08009a9f 	.word	0x08009a9f

08009514 <__sccl>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	780b      	ldrb	r3, [r1, #0]
 8009518:	4604      	mov	r4, r0
 800951a:	2b5e      	cmp	r3, #94	; 0x5e
 800951c:	bf0b      	itete	eq
 800951e:	784b      	ldrbeq	r3, [r1, #1]
 8009520:	1c4a      	addne	r2, r1, #1
 8009522:	1c8a      	addeq	r2, r1, #2
 8009524:	2100      	movne	r1, #0
 8009526:	bf08      	it	eq
 8009528:	2101      	moveq	r1, #1
 800952a:	3801      	subs	r0, #1
 800952c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009530:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009534:	42a8      	cmp	r0, r5
 8009536:	d1fb      	bne.n	8009530 <__sccl+0x1c>
 8009538:	b90b      	cbnz	r3, 800953e <__sccl+0x2a>
 800953a:	1e50      	subs	r0, r2, #1
 800953c:	bd70      	pop	{r4, r5, r6, pc}
 800953e:	f081 0101 	eor.w	r1, r1, #1
 8009542:	54e1      	strb	r1, [r4, r3]
 8009544:	4610      	mov	r0, r2
 8009546:	4602      	mov	r2, r0
 8009548:	f812 5b01 	ldrb.w	r5, [r2], #1
 800954c:	2d2d      	cmp	r5, #45	; 0x2d
 800954e:	d005      	beq.n	800955c <__sccl+0x48>
 8009550:	2d5d      	cmp	r5, #93	; 0x5d
 8009552:	d016      	beq.n	8009582 <__sccl+0x6e>
 8009554:	2d00      	cmp	r5, #0
 8009556:	d0f1      	beq.n	800953c <__sccl+0x28>
 8009558:	462b      	mov	r3, r5
 800955a:	e7f2      	b.n	8009542 <__sccl+0x2e>
 800955c:	7846      	ldrb	r6, [r0, #1]
 800955e:	2e5d      	cmp	r6, #93	; 0x5d
 8009560:	d0fa      	beq.n	8009558 <__sccl+0x44>
 8009562:	42b3      	cmp	r3, r6
 8009564:	dcf8      	bgt.n	8009558 <__sccl+0x44>
 8009566:	3002      	adds	r0, #2
 8009568:	461a      	mov	r2, r3
 800956a:	3201      	adds	r2, #1
 800956c:	4296      	cmp	r6, r2
 800956e:	54a1      	strb	r1, [r4, r2]
 8009570:	dcfb      	bgt.n	800956a <__sccl+0x56>
 8009572:	1af2      	subs	r2, r6, r3
 8009574:	3a01      	subs	r2, #1
 8009576:	1c5d      	adds	r5, r3, #1
 8009578:	42b3      	cmp	r3, r6
 800957a:	bfa8      	it	ge
 800957c:	2200      	movge	r2, #0
 800957e:	18ab      	adds	r3, r5, r2
 8009580:	e7e1      	b.n	8009546 <__sccl+0x32>
 8009582:	4610      	mov	r0, r2
 8009584:	e7da      	b.n	800953c <__sccl+0x28>

08009586 <__submore>:
 8009586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958a:	460c      	mov	r4, r1
 800958c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800958e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009592:	4299      	cmp	r1, r3
 8009594:	d11d      	bne.n	80095d2 <__submore+0x4c>
 8009596:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800959a:	f7ff f927 	bl	80087ec <_malloc_r>
 800959e:	b918      	cbnz	r0, 80095a8 <__submore+0x22>
 80095a0:	f04f 30ff 	mov.w	r0, #4294967295
 80095a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80095ae:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80095b2:	6360      	str	r0, [r4, #52]	; 0x34
 80095b4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80095b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80095bc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80095c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80095c4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80095c8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80095cc:	6020      	str	r0, [r4, #0]
 80095ce:	2000      	movs	r0, #0
 80095d0:	e7e8      	b.n	80095a4 <__submore+0x1e>
 80095d2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80095d4:	0077      	lsls	r7, r6, #1
 80095d6:	463a      	mov	r2, r7
 80095d8:	f000 f83a 	bl	8009650 <_realloc_r>
 80095dc:	4605      	mov	r5, r0
 80095de:	2800      	cmp	r0, #0
 80095e0:	d0de      	beq.n	80095a0 <__submore+0x1a>
 80095e2:	eb00 0806 	add.w	r8, r0, r6
 80095e6:	4601      	mov	r1, r0
 80095e8:	4632      	mov	r2, r6
 80095ea:	4640      	mov	r0, r8
 80095ec:	f7ff f884 	bl	80086f8 <memcpy>
 80095f0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80095f4:	f8c4 8000 	str.w	r8, [r4]
 80095f8:	e7e9      	b.n	80095ce <__submore+0x48>

080095fa <memmove>:
 80095fa:	4288      	cmp	r0, r1
 80095fc:	b510      	push	{r4, lr}
 80095fe:	eb01 0402 	add.w	r4, r1, r2
 8009602:	d902      	bls.n	800960a <memmove+0x10>
 8009604:	4284      	cmp	r4, r0
 8009606:	4623      	mov	r3, r4
 8009608:	d807      	bhi.n	800961a <memmove+0x20>
 800960a:	1e43      	subs	r3, r0, #1
 800960c:	42a1      	cmp	r1, r4
 800960e:	d008      	beq.n	8009622 <memmove+0x28>
 8009610:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009614:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009618:	e7f8      	b.n	800960c <memmove+0x12>
 800961a:	4402      	add	r2, r0
 800961c:	4601      	mov	r1, r0
 800961e:	428a      	cmp	r2, r1
 8009620:	d100      	bne.n	8009624 <memmove+0x2a>
 8009622:	bd10      	pop	{r4, pc}
 8009624:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009628:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800962c:	e7f7      	b.n	800961e <memmove+0x24>
	...

08009630 <_sbrk_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4d06      	ldr	r5, [pc, #24]	; (800964c <_sbrk_r+0x1c>)
 8009634:	2300      	movs	r3, #0
 8009636:	4604      	mov	r4, r0
 8009638:	4608      	mov	r0, r1
 800963a:	602b      	str	r3, [r5, #0]
 800963c:	f7f8 fd50 	bl	80020e0 <_sbrk>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d102      	bne.n	800964a <_sbrk_r+0x1a>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	b103      	cbz	r3, 800964a <_sbrk_r+0x1a>
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	200044a4 	.word	0x200044a4

08009650 <_realloc_r>:
 8009650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009654:	4680      	mov	r8, r0
 8009656:	4614      	mov	r4, r2
 8009658:	460e      	mov	r6, r1
 800965a:	b921      	cbnz	r1, 8009666 <_realloc_r+0x16>
 800965c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009660:	4611      	mov	r1, r2
 8009662:	f7ff b8c3 	b.w	80087ec <_malloc_r>
 8009666:	b92a      	cbnz	r2, 8009674 <_realloc_r+0x24>
 8009668:	f7ff f854 	bl	8008714 <_free_r>
 800966c:	4625      	mov	r5, r4
 800966e:	4628      	mov	r0, r5
 8009670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009674:	f000 f914 	bl	80098a0 <_malloc_usable_size_r>
 8009678:	4284      	cmp	r4, r0
 800967a:	4607      	mov	r7, r0
 800967c:	d802      	bhi.n	8009684 <_realloc_r+0x34>
 800967e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009682:	d812      	bhi.n	80096aa <_realloc_r+0x5a>
 8009684:	4621      	mov	r1, r4
 8009686:	4640      	mov	r0, r8
 8009688:	f7ff f8b0 	bl	80087ec <_malloc_r>
 800968c:	4605      	mov	r5, r0
 800968e:	2800      	cmp	r0, #0
 8009690:	d0ed      	beq.n	800966e <_realloc_r+0x1e>
 8009692:	42bc      	cmp	r4, r7
 8009694:	4622      	mov	r2, r4
 8009696:	4631      	mov	r1, r6
 8009698:	bf28      	it	cs
 800969a:	463a      	movcs	r2, r7
 800969c:	f7ff f82c 	bl	80086f8 <memcpy>
 80096a0:	4631      	mov	r1, r6
 80096a2:	4640      	mov	r0, r8
 80096a4:	f7ff f836 	bl	8008714 <_free_r>
 80096a8:	e7e1      	b.n	800966e <_realloc_r+0x1e>
 80096aa:	4635      	mov	r5, r6
 80096ac:	e7df      	b.n	800966e <_realloc_r+0x1e>
	...

080096b0 <_strtol_l.constprop.0>:
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b6:	d001      	beq.n	80096bc <_strtol_l.constprop.0+0xc>
 80096b8:	2b24      	cmp	r3, #36	; 0x24
 80096ba:	d906      	bls.n	80096ca <_strtol_l.constprop.0+0x1a>
 80096bc:	f7fe fff0 	bl	80086a0 <__errno>
 80096c0:	2316      	movs	r3, #22
 80096c2:	6003      	str	r3, [r0, #0]
 80096c4:	2000      	movs	r0, #0
 80096c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80097b0 <_strtol_l.constprop.0+0x100>
 80096ce:	460d      	mov	r5, r1
 80096d0:	462e      	mov	r6, r5
 80096d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096d6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80096da:	f017 0708 	ands.w	r7, r7, #8
 80096de:	d1f7      	bne.n	80096d0 <_strtol_l.constprop.0+0x20>
 80096e0:	2c2d      	cmp	r4, #45	; 0x2d
 80096e2:	d132      	bne.n	800974a <_strtol_l.constprop.0+0x9a>
 80096e4:	782c      	ldrb	r4, [r5, #0]
 80096e6:	2701      	movs	r7, #1
 80096e8:	1cb5      	adds	r5, r6, #2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d05b      	beq.n	80097a6 <_strtol_l.constprop.0+0xf6>
 80096ee:	2b10      	cmp	r3, #16
 80096f0:	d109      	bne.n	8009706 <_strtol_l.constprop.0+0x56>
 80096f2:	2c30      	cmp	r4, #48	; 0x30
 80096f4:	d107      	bne.n	8009706 <_strtol_l.constprop.0+0x56>
 80096f6:	782c      	ldrb	r4, [r5, #0]
 80096f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096fc:	2c58      	cmp	r4, #88	; 0x58
 80096fe:	d14d      	bne.n	800979c <_strtol_l.constprop.0+0xec>
 8009700:	786c      	ldrb	r4, [r5, #1]
 8009702:	2310      	movs	r3, #16
 8009704:	3502      	adds	r5, #2
 8009706:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800970a:	f108 38ff 	add.w	r8, r8, #4294967295
 800970e:	f04f 0e00 	mov.w	lr, #0
 8009712:	fbb8 f9f3 	udiv	r9, r8, r3
 8009716:	4676      	mov	r6, lr
 8009718:	fb03 8a19 	mls	sl, r3, r9, r8
 800971c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009720:	f1bc 0f09 	cmp.w	ip, #9
 8009724:	d816      	bhi.n	8009754 <_strtol_l.constprop.0+0xa4>
 8009726:	4664      	mov	r4, ip
 8009728:	42a3      	cmp	r3, r4
 800972a:	dd24      	ble.n	8009776 <_strtol_l.constprop.0+0xc6>
 800972c:	f1be 3fff 	cmp.w	lr, #4294967295
 8009730:	d008      	beq.n	8009744 <_strtol_l.constprop.0+0x94>
 8009732:	45b1      	cmp	r9, r6
 8009734:	d31c      	bcc.n	8009770 <_strtol_l.constprop.0+0xc0>
 8009736:	d101      	bne.n	800973c <_strtol_l.constprop.0+0x8c>
 8009738:	45a2      	cmp	sl, r4
 800973a:	db19      	blt.n	8009770 <_strtol_l.constprop.0+0xc0>
 800973c:	fb06 4603 	mla	r6, r6, r3, r4
 8009740:	f04f 0e01 	mov.w	lr, #1
 8009744:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009748:	e7e8      	b.n	800971c <_strtol_l.constprop.0+0x6c>
 800974a:	2c2b      	cmp	r4, #43	; 0x2b
 800974c:	bf04      	itt	eq
 800974e:	782c      	ldrbeq	r4, [r5, #0]
 8009750:	1cb5      	addeq	r5, r6, #2
 8009752:	e7ca      	b.n	80096ea <_strtol_l.constprop.0+0x3a>
 8009754:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009758:	f1bc 0f19 	cmp.w	ip, #25
 800975c:	d801      	bhi.n	8009762 <_strtol_l.constprop.0+0xb2>
 800975e:	3c37      	subs	r4, #55	; 0x37
 8009760:	e7e2      	b.n	8009728 <_strtol_l.constprop.0+0x78>
 8009762:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009766:	f1bc 0f19 	cmp.w	ip, #25
 800976a:	d804      	bhi.n	8009776 <_strtol_l.constprop.0+0xc6>
 800976c:	3c57      	subs	r4, #87	; 0x57
 800976e:	e7db      	b.n	8009728 <_strtol_l.constprop.0+0x78>
 8009770:	f04f 3eff 	mov.w	lr, #4294967295
 8009774:	e7e6      	b.n	8009744 <_strtol_l.constprop.0+0x94>
 8009776:	f1be 3fff 	cmp.w	lr, #4294967295
 800977a:	d105      	bne.n	8009788 <_strtol_l.constprop.0+0xd8>
 800977c:	2322      	movs	r3, #34	; 0x22
 800977e:	6003      	str	r3, [r0, #0]
 8009780:	4646      	mov	r6, r8
 8009782:	b942      	cbnz	r2, 8009796 <_strtol_l.constprop.0+0xe6>
 8009784:	4630      	mov	r0, r6
 8009786:	e79e      	b.n	80096c6 <_strtol_l.constprop.0+0x16>
 8009788:	b107      	cbz	r7, 800978c <_strtol_l.constprop.0+0xdc>
 800978a:	4276      	negs	r6, r6
 800978c:	2a00      	cmp	r2, #0
 800978e:	d0f9      	beq.n	8009784 <_strtol_l.constprop.0+0xd4>
 8009790:	f1be 0f00 	cmp.w	lr, #0
 8009794:	d000      	beq.n	8009798 <_strtol_l.constprop.0+0xe8>
 8009796:	1e69      	subs	r1, r5, #1
 8009798:	6011      	str	r1, [r2, #0]
 800979a:	e7f3      	b.n	8009784 <_strtol_l.constprop.0+0xd4>
 800979c:	2430      	movs	r4, #48	; 0x30
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1b1      	bne.n	8009706 <_strtol_l.constprop.0+0x56>
 80097a2:	2308      	movs	r3, #8
 80097a4:	e7af      	b.n	8009706 <_strtol_l.constprop.0+0x56>
 80097a6:	2c30      	cmp	r4, #48	; 0x30
 80097a8:	d0a5      	beq.n	80096f6 <_strtol_l.constprop.0+0x46>
 80097aa:	230a      	movs	r3, #10
 80097ac:	e7ab      	b.n	8009706 <_strtol_l.constprop.0+0x56>
 80097ae:	bf00      	nop
 80097b0:	08009aab 	.word	0x08009aab

080097b4 <_strtol_r>:
 80097b4:	f7ff bf7c 	b.w	80096b0 <_strtol_l.constprop.0>

080097b8 <_strtoul_l.constprop.0>:
 80097b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097bc:	4f36      	ldr	r7, [pc, #216]	; (8009898 <_strtoul_l.constprop.0+0xe0>)
 80097be:	4686      	mov	lr, r0
 80097c0:	460d      	mov	r5, r1
 80097c2:	4628      	mov	r0, r5
 80097c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097c8:	5d3e      	ldrb	r6, [r7, r4]
 80097ca:	f016 0608 	ands.w	r6, r6, #8
 80097ce:	d1f8      	bne.n	80097c2 <_strtoul_l.constprop.0+0xa>
 80097d0:	2c2d      	cmp	r4, #45	; 0x2d
 80097d2:	d130      	bne.n	8009836 <_strtoul_l.constprop.0+0x7e>
 80097d4:	782c      	ldrb	r4, [r5, #0]
 80097d6:	2601      	movs	r6, #1
 80097d8:	1c85      	adds	r5, r0, #2
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d057      	beq.n	800988e <_strtoul_l.constprop.0+0xd6>
 80097de:	2b10      	cmp	r3, #16
 80097e0:	d109      	bne.n	80097f6 <_strtoul_l.constprop.0+0x3e>
 80097e2:	2c30      	cmp	r4, #48	; 0x30
 80097e4:	d107      	bne.n	80097f6 <_strtoul_l.constprop.0+0x3e>
 80097e6:	7828      	ldrb	r0, [r5, #0]
 80097e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80097ec:	2858      	cmp	r0, #88	; 0x58
 80097ee:	d149      	bne.n	8009884 <_strtoul_l.constprop.0+0xcc>
 80097f0:	786c      	ldrb	r4, [r5, #1]
 80097f2:	2310      	movs	r3, #16
 80097f4:	3502      	adds	r5, #2
 80097f6:	f04f 38ff 	mov.w	r8, #4294967295
 80097fa:	2700      	movs	r7, #0
 80097fc:	fbb8 f8f3 	udiv	r8, r8, r3
 8009800:	fb03 f908 	mul.w	r9, r3, r8
 8009804:	ea6f 0909 	mvn.w	r9, r9
 8009808:	4638      	mov	r0, r7
 800980a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800980e:	f1bc 0f09 	cmp.w	ip, #9
 8009812:	d815      	bhi.n	8009840 <_strtoul_l.constprop.0+0x88>
 8009814:	4664      	mov	r4, ip
 8009816:	42a3      	cmp	r3, r4
 8009818:	dd23      	ble.n	8009862 <_strtoul_l.constprop.0+0xaa>
 800981a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800981e:	d007      	beq.n	8009830 <_strtoul_l.constprop.0+0x78>
 8009820:	4580      	cmp	r8, r0
 8009822:	d31b      	bcc.n	800985c <_strtoul_l.constprop.0+0xa4>
 8009824:	d101      	bne.n	800982a <_strtoul_l.constprop.0+0x72>
 8009826:	45a1      	cmp	r9, r4
 8009828:	db18      	blt.n	800985c <_strtoul_l.constprop.0+0xa4>
 800982a:	fb00 4003 	mla	r0, r0, r3, r4
 800982e:	2701      	movs	r7, #1
 8009830:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009834:	e7e9      	b.n	800980a <_strtoul_l.constprop.0+0x52>
 8009836:	2c2b      	cmp	r4, #43	; 0x2b
 8009838:	bf04      	itt	eq
 800983a:	782c      	ldrbeq	r4, [r5, #0]
 800983c:	1c85      	addeq	r5, r0, #2
 800983e:	e7cc      	b.n	80097da <_strtoul_l.constprop.0+0x22>
 8009840:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009844:	f1bc 0f19 	cmp.w	ip, #25
 8009848:	d801      	bhi.n	800984e <_strtoul_l.constprop.0+0x96>
 800984a:	3c37      	subs	r4, #55	; 0x37
 800984c:	e7e3      	b.n	8009816 <_strtoul_l.constprop.0+0x5e>
 800984e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009852:	f1bc 0f19 	cmp.w	ip, #25
 8009856:	d804      	bhi.n	8009862 <_strtoul_l.constprop.0+0xaa>
 8009858:	3c57      	subs	r4, #87	; 0x57
 800985a:	e7dc      	b.n	8009816 <_strtoul_l.constprop.0+0x5e>
 800985c:	f04f 37ff 	mov.w	r7, #4294967295
 8009860:	e7e6      	b.n	8009830 <_strtoul_l.constprop.0+0x78>
 8009862:	1c7b      	adds	r3, r7, #1
 8009864:	d106      	bne.n	8009874 <_strtoul_l.constprop.0+0xbc>
 8009866:	2322      	movs	r3, #34	; 0x22
 8009868:	f8ce 3000 	str.w	r3, [lr]
 800986c:	4638      	mov	r0, r7
 800986e:	b932      	cbnz	r2, 800987e <_strtoul_l.constprop.0+0xc6>
 8009870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009874:	b106      	cbz	r6, 8009878 <_strtoul_l.constprop.0+0xc0>
 8009876:	4240      	negs	r0, r0
 8009878:	2a00      	cmp	r2, #0
 800987a:	d0f9      	beq.n	8009870 <_strtoul_l.constprop.0+0xb8>
 800987c:	b107      	cbz	r7, 8009880 <_strtoul_l.constprop.0+0xc8>
 800987e:	1e69      	subs	r1, r5, #1
 8009880:	6011      	str	r1, [r2, #0]
 8009882:	e7f5      	b.n	8009870 <_strtoul_l.constprop.0+0xb8>
 8009884:	2430      	movs	r4, #48	; 0x30
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1b5      	bne.n	80097f6 <_strtoul_l.constprop.0+0x3e>
 800988a:	2308      	movs	r3, #8
 800988c:	e7b3      	b.n	80097f6 <_strtoul_l.constprop.0+0x3e>
 800988e:	2c30      	cmp	r4, #48	; 0x30
 8009890:	d0a9      	beq.n	80097e6 <_strtoul_l.constprop.0+0x2e>
 8009892:	230a      	movs	r3, #10
 8009894:	e7af      	b.n	80097f6 <_strtoul_l.constprop.0+0x3e>
 8009896:	bf00      	nop
 8009898:	08009aab 	.word	0x08009aab

0800989c <_strtoul_r>:
 800989c:	f7ff bf8c 	b.w	80097b8 <_strtoul_l.constprop.0>

080098a0 <_malloc_usable_size_r>:
 80098a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a4:	1f18      	subs	r0, r3, #4
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bfbc      	itt	lt
 80098aa:	580b      	ldrlt	r3, [r1, r0]
 80098ac:	18c0      	addlt	r0, r0, r3
 80098ae:	4770      	bx	lr

080098b0 <_init>:
 80098b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b2:	bf00      	nop
 80098b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b6:	bc08      	pop	{r3}
 80098b8:	469e      	mov	lr, r3
 80098ba:	4770      	bx	lr

080098bc <_fini>:
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	bf00      	nop
 80098c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098c2:	bc08      	pop	{r3}
 80098c4:	469e      	mov	lr, r3
 80098c6:	4770      	bx	lr
