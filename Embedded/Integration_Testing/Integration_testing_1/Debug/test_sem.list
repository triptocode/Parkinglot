
test_sem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008858  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080089f8  080089f8  000189f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bbc  08008bbc  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008bbc  08008bbc  00018bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bc4  08008bc4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bc4  08008bc4  00018bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004384  20000060  08008c2c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043e4  08008c2c  000243e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a275  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dd7  00000000  00000000  0003a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003e120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113c  00000000  00000000  0003f738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000196f2  00000000  00000000  00040874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b913  00000000  00000000  00059f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a1ae  00000000  00000000  00075879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000620c  00000000  00000000  0010fa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00115c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080089e0 	.word	0x080089e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080089e0 	.word	0x080089e0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <LCD_init>:

#include "I2C_LCD.h"



void LCD_init() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    HAL_Delay(15);
 8000d7c:	200f      	movs	r0, #15
 8000d7e:	f001 faab 	bl	80022d8 <HAL_Delay>
    LCD_send_cmd(0x30);
 8000d82:	2030      	movs	r0, #48	; 0x30
 8000d84:	f000 f854 	bl	8000e30 <LCD_send_cmd>
    HAL_Delay(5);
 8000d88:	2005      	movs	r0, #5
 8000d8a:	f001 faa5 	bl	80022d8 <HAL_Delay>
    LCD_send_cmd(0x30);
 8000d8e:	2030      	movs	r0, #48	; 0x30
 8000d90:	f000 f84e 	bl	8000e30 <LCD_send_cmd>
    HAL_Delay(1);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f001 fa9f 	bl	80022d8 <HAL_Delay>
    LCD_send_cmd(0x30);
 8000d9a:	2030      	movs	r0, #48	; 0x30
 8000d9c:	f000 f848 	bl	8000e30 <LCD_send_cmd>
    HAL_Delay(10);
 8000da0:	200a      	movs	r0, #10
 8000da2:	f001 fa99 	bl	80022d8 <HAL_Delay>
    LCD_send_cmd(0x20);
 8000da6:	2020      	movs	r0, #32
 8000da8:	f000 f842 	bl	8000e30 <LCD_send_cmd>
    HAL_Delay(10);
 8000dac:	200a      	movs	r0, #10
 8000dae:	f001 fa93 	bl	80022d8 <HAL_Delay>

    LCD_send_cmd(0x28);
 8000db2:	2028      	movs	r0, #40	; 0x28
 8000db4:	f000 f83c 	bl	8000e30 <LCD_send_cmd>
    HAL_Delay(10);
 8000db8:	200a      	movs	r0, #10
 8000dba:	f001 fa8d 	bl	80022d8 <HAL_Delay>
    LCD_send_cmd(0x08);
 8000dbe:	2008      	movs	r0, #8
 8000dc0:	f000 f836 	bl	8000e30 <LCD_send_cmd>
    HAL_Delay(10);
 8000dc4:	200a      	movs	r0, #10
 8000dc6:	f001 fa87 	bl	80022d8 <HAL_Delay>
    LCD_send_cmd(0x01);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f000 f830 	bl	8000e30 <LCD_send_cmd>
    HAL_Delay(10);
 8000dd0:	200a      	movs	r0, #10
 8000dd2:	f001 fa81 	bl	80022d8 <HAL_Delay>
    LCD_send_cmd(0x0c);
 8000dd6:	200c      	movs	r0, #12
 8000dd8:	f000 f82a 	bl	8000e30 <LCD_send_cmd>
    HAL_Delay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f001 fa7b 	bl	80022d8 <HAL_Delay>
    LCD_send_cmd(0x06);
 8000de2:	2006      	movs	r0, #6
 8000de4:	f000 f824 	bl	8000e30 <LCD_send_cmd>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <LCD_put_cursor>:
    LCD_send_cmd(0x08);
    for (int8_t i = 0; i < 70; i++) {
        LCD_send_data('\0');
    }
}
void LCD_put_cursor(uint8_t row, uint8_t col) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	71bb      	strb	r3, [r7, #6]
    if (row == 0) {
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d104      	bne.n	8000e0c <LCD_put_cursor+0x20>
        col |= 0x80;
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e08:	71bb      	strb	r3, [r7, #6]
 8000e0a:	e006      	b.n	8000e1a <LCD_put_cursor+0x2e>
    }
    else if (row == 1) {
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d103      	bne.n	8000e1a <LCD_put_cursor+0x2e>
        col |= 0xc0;
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e18:	71bb      	strb	r3, [r7, #6]
    }

    HAL_Delay(10);
 8000e1a:	200a      	movs	r0, #10
 8000e1c:	f001 fa5c 	bl	80022d8 <HAL_Delay>
    LCD_send_cmd(col);
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f804 	bl	8000e30 <LCD_send_cmd>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <LCD_send_cmd>:

void LCD_send_cmd(uint8_t cmd) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd_t[4];
    uint8_t cmd_h, cmd_l;

    cmd_h = cmd & 0xf0;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f023 030f 	bic.w	r3, r3, #15
 8000e40:	73fb      	strb	r3, [r7, #15]
    cmd_l = cmd << 4 & 0xf0;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	73bb      	strb	r3, [r7, #14]

    cmd_t[0] = cmd_h | 0x0c;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	f043 030c 	orr.w	r3, r3, #12
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	723b      	strb	r3, [r7, #8]
    cmd_t[1] = cmd_h | 0x08;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	727b      	strb	r3, [r7, #9]
    cmd_t[2] = cmd_l | 0x0c;
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	f043 030c 	orr.w	r3, r3, #12
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	72bb      	strb	r3, [r7, #10]
    cmd_t[3] = cmd_l | 0x08;
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, cmd_t, sizeof(cmd_t), 4);
 8000e70:	f107 0208 	add.w	r2, r7, #8
 8000e74:	2304      	movs	r3, #4
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2304      	movs	r3, #4
 8000e7a:	214e      	movs	r1, #78	; 0x4e
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <LCD_send_cmd+0x5c>)
 8000e7e:	f001 fea5 	bl	8002bcc <HAL_I2C_Master_Transmit>
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000384 	.word	0x20000384

08000e90 <LCD_send_data>:
void LCD_send_data(char data) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
    uint8_t data_t[4];
    uint8_t data_h, data_l;

    data_h = data & 0xf0;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f023 030f 	bic.w	r3, r3, #15
 8000ea0:	73fb      	strb	r3, [r7, #15]
    data_l = data << 4 & 0xf0;
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_h | 0x0d;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	f043 030d 	orr.w	r3, r3, #13
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_h | 0x09;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	f043 0309 	orr.w	r3, r3, #9
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0d;
 8000ebc:	7bbb      	ldrb	r3, [r7, #14]
 8000ebe:	f043 030d 	orr.w	r3, r3, #13
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	f043 0309 	orr.w	r3, r3, #9
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, data_t, sizeof(data_t), 4);
 8000ed0:	f107 0208 	add.w	r2, r7, #8
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2304      	movs	r3, #4
 8000eda:	214e      	movs	r1, #78	; 0x4e
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <LCD_send_data+0x5c>)
 8000ede:	f001 fe75 	bl	8002bcc <HAL_I2C_Master_Transmit>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000384 	.word	0x20000384

08000ef0 <LCD_send_str>:
void LCD_send_str(char *str) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000ef8:	e006      	b.n	8000f08 <LCD_send_str+0x18>
        LCD_send_data(*str++);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ffc4 	bl	8000e90 <LCD_send_data>
    while (*str) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f4      	bne.n	8000efa <LCD_send_str+0xa>
    }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <delay>:
osSemaphoreId hBinarySemHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void delay (uint16_t time)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <delay+0x30>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim2) < time);
 8000f2e:	bf00      	nop
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <delay+0x30>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3f9      	bcc.n	8000f30 <delay+0x14>
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000424 	.word	0x20000424

08000f50 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7f1b      	ldrb	r3, [r3, #28]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	f040 8083 	bne.w	8001068 <HAL_TIM_IC_CaptureCallback+0x118>
//	if (htim == &htim2)
	{
		if (Is_First_Captured_left==0) // if the first value is not captured
 8000f62:	4b89      	ldr	r3, [pc, #548]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d11a      	bne.n	8000fa0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_VAL_left_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f003 fc57 	bl	8004820 <HAL_TIM_ReadCapturedValue>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a85      	ldr	r2, [pc, #532]	; (800118c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000f76:	6013      	str	r3, [r2, #0]
			Is_First_Captured_left = 1;  // set the first captured as true
 8000f78:	4b83      	ldr	r3, [pc, #524]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6a1a      	ldr	r2, [r3, #32]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 020a 	bic.w	r2, r2, #10
 8000f8c:	621a      	str	r2, [r3, #32]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6a1a      	ldr	r2, [r3, #32]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 0202 	orr.w	r2, r2, #2
 8000f9c:	621a      	str	r2, [r3, #32]
 8000f9e:	e063      	b.n	8001068 <HAL_TIM_IC_CaptureCallback+0x118>
		}

		else if (Is_First_Captured_left==1)   // if the first is already captured
 8000fa0:	4b79      	ldr	r3, [pc, #484]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d15f      	bne.n	8001068 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			IC_Val_left_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f003 fc38 	bl	8004820 <HAL_TIM_ReadCapturedValue>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a77      	ldr	r2, [pc, #476]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fb4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val_left_2 > IC_VAL_left_1)
 8000fbe:	4b74      	ldr	r3, [pc, #464]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b72      	ldr	r3, [pc, #456]	; (800118c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d907      	bls.n	8000fda <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference_left = IC_Val_left_2-IC_VAL_left_1;
 8000fca:	4b71      	ldr	r3, [pc, #452]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b6f      	ldr	r3, [pc, #444]	; (800118c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	4a6f      	ldr	r2, [pc, #444]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x244>)
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e00f      	b.n	8000ffa <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if (IC_VAL_left_1 > IC_Val_left_2)
 8000fda:	4b6c      	ldr	r3, [pc, #432]	; (800118c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d909      	bls.n	8000ffa <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference_left = (0xffff - IC_VAL_left_1) + IC_Val_left_2;
 8000fe6:	4b6a      	ldr	r3, [pc, #424]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b68      	ldr	r3, [pc, #416]	; (800118c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000ff4:	33ff      	adds	r3, #255	; 0xff
 8000ff6:	4a67      	ldr	r2, [pc, #412]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x244>)
 8000ff8:	6013      	str	r3, [r2, #0]
			}

			Distance_left = Difference_left * .034/2;
 8000ffa:	4b66      	ldr	r3, [pc, #408]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x244>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa90 	bl	8000524 <__aeabi_ui2d>
 8001004:	a35e      	add	r3, pc, #376	; (adr r3, 8001180 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fb05 	bl	8000618 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800101e:	f7ff fc25 	bl	800086c <__aeabi_ddiv>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fd07 	bl	8000a3c <__aeabi_d2uiz>
 800102e:	4603      	mov	r3, r0
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b59      	ldr	r3, [pc, #356]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001034:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_left = 0; // set it back to false
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6a1a      	ldr	r2, [r3, #32]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 020a 	bic.w	r2, r2, #10
 800104a:	621a      	str	r2, [r3, #32]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6a12      	ldr	r2, [r2, #32]
 8001056:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001058:	4b50      	ldr	r3, [pc, #320]	; (800119c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	4b4f      	ldr	r3, [pc, #316]	; (800119c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0202 	bic.w	r2, r2, #2
 8001066:	60da      	str	r2, [r3, #12]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7f1b      	ldrb	r3, [r3, #28]
 800106c:	2b04      	cmp	r3, #4
 800106e:	f040 8083 	bne.w	8001178 <HAL_TIM_IC_CaptureCallback+0x228>
//	if (htim == &htim3)
	{
		if (Is_First_Captured_right==0) // if the first value is not captured
 8001072:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d11a      	bne.n	80010b0 <HAL_TIM_IC_CaptureCallback+0x160>
		{
			IC_Val_right_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 800107a:	2108      	movs	r1, #8
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f003 fbcf 	bl	8004820 <HAL_TIM_ReadCapturedValue>
 8001082:	4603      	mov	r3, r0
 8001084:	4a47      	ldr	r2, [pc, #284]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001086:	6013      	str	r3, [r2, #0]
			Is_First_Captured_right = 1;  // set the first captured as true
 8001088:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x250>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800109c:	621a      	str	r2, [r3, #32]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a1a      	ldr	r2, [r3, #32]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ac:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
		}
	}
}
 80010ae:	e063      	b.n	8001178 <HAL_TIM_IC_CaptureCallback+0x228>
		else if (Is_First_Captured_right==1)   // if the first is already captured
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x250>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d15f      	bne.n	8001178 <HAL_TIM_IC_CaptureCallback+0x228>
			IC_Val_right_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80010b8:	2108      	movs	r1, #8
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f003 fbb0 	bl	8004820 <HAL_TIM_ReadCapturedValue>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a39      	ldr	r2, [pc, #228]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010c4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val_right_2 > IC_Val_right_1)
 80010ce:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x254>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d907      	bls.n	80010ea <HAL_TIM_IC_CaptureCallback+0x19a>
				Difference_right = IC_Val_right_2-IC_Val_right_1;
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x254>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_TIM_IC_CaptureCallback+0x25c>)
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e00f      	b.n	800110a <HAL_TIM_IC_CaptureCallback+0x1ba>
			else if (IC_Val_right_1 > IC_Val_right_2)
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x254>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d909      	bls.n	800110a <HAL_TIM_IC_CaptureCallback+0x1ba>
				Difference_right = (0xffff - IC_Val_right_1) + IC_Val_right_2;
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x254>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001104:	33ff      	adds	r3, #255	; 0xff
 8001106:	4a29      	ldr	r2, [pc, #164]	; (80011ac <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001108:	6013      	str	r3, [r2, #0]
			Distance_right = Difference_right * .034/2;
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_TIM_IC_CaptureCallback+0x25c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa08 	bl	8000524 <__aeabi_ui2d>
 8001114:	a31a      	add	r3, pc, #104	; (adr r3, 8001180 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fa7d 	bl	8000618 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800112e:	f7ff fb9d 	bl	800086c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fc7f 	bl	8000a3c <__aeabi_d2uiz>
 800113e:	4603      	mov	r3, r0
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001144:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_right = 0; // set it back to false
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6a1a      	ldr	r2, [r3, #32]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800115a:	621a      	str	r2, [r3, #32]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a12      	ldr	r2, [r2, #32]
 8001166:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0208 	bic.w	r2, r2, #8
 8001176:	60da      	str	r2, [r3, #12]
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	b020c49c 	.word	0xb020c49c
 8001184:	3fa16872 	.word	0x3fa16872
 8001188:	20000088 	.word	0x20000088
 800118c:	2000007c 	.word	0x2000007c
 8001190:	20000080 	.word	0x20000080
 8001194:	20000084 	.word	0x20000084
 8001198:	20000089 	.word	0x20000089
 800119c:	20000424 	.word	0x20000424
 80011a0:	20000098 	.word	0x20000098
 80011a4:	2000008c 	.word	0x2000008c
 80011a8:	20000090 	.word	0x20000090
 80011ac:	20000094 	.word	0x20000094
 80011b0:	20000099 	.word	0x20000099

080011b4 <HCSR04_Read_Left>:

void HCSR04_Read_Left (void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <HCSR04_Read_Left+0x38>)
 80011c0:	f001 fba6 	bl	8002910 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80011c4:	200a      	movs	r0, #10
 80011c6:	f7ff fea9 	bl	8000f1c <delay>
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d0:	4806      	ldr	r0, [pc, #24]	; (80011ec <HCSR04_Read_Left+0x38>)
 80011d2:	f001 fb9d 	bl	8002910 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HCSR04_Read_Left+0x3c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HCSR04_Read_Left+0x3c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0202 	orr.w	r2, r2, #2
 80011e4:	60da      	str	r2, [r3, #12]
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020000 	.word	0x40020000
 80011f0:	20000424 	.word	0x20000424

080011f4 <HCSR04_Read_Right>:

void HCSR04_Read_Right (void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80011f8:	2201      	movs	r2, #1
 80011fa:	2120      	movs	r1, #32
 80011fc:	480a      	ldr	r0, [pc, #40]	; (8001228 <HCSR04_Read_Right+0x34>)
 80011fe:	f001 fb87 	bl	8002910 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001202:	200a      	movs	r0, #10
 8001204:	f7ff fe8a 	bl	8000f1c <delay>
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001208:	2200      	movs	r2, #0
 800120a:	2120      	movs	r1, #32
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <HCSR04_Read_Right+0x34>)
 800120e:	f001 fb7f 	bl	8002910 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC3);
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HCSR04_Read_Right+0x38>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <HCSR04_Read_Right+0x38>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0208 	orr.w	r2, r2, #8
 8001220:	60da      	str	r2, [r3, #12]
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020400 	.word	0x40020400
 800122c:	20000424 	.word	0x20000424

08001230 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
//	if(huart->Instance==USART1) // Checking Uart Debug
//	{
//		HAL_UART_Receive_IT(&huart1, txData, sizeof(txData));
//		HAL_UART_Transmit_IT(&huart1, txData, sizeof(txData));
//	}
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <vApplicationGetIdleTaskMemory+0x2c>)
 8001254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <vApplicationGetIdleTaskMemory+0x30>)
 800125a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	200000e4 	.word	0x200000e4
 8001274:	20000184 	.word	0x20000184

08001278 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b0b4      	sub	sp, #208	; 0xd0
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800127e:	2100      	movs	r1, #0
 8001280:	4853      	ldr	r0, [pc, #332]	; (80013d0 <MX_FREERTOS_Init+0x158>)
 8001282:	f002 fe9d 	bl	8003fc0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001286:	2108      	movs	r1, #8
 8001288:	4851      	ldr	r0, [pc, #324]	; (80013d0 <MX_FREERTOS_Init+0x158>)
 800128a:	f002 fe99 	bl	8003fc0 <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800128e:	2100      	movs	r1, #0
 8001290:	4850      	ldr	r0, [pc, #320]	; (80013d4 <MX_FREERTOS_Init+0x15c>)
 8001292:	f002 fd8b 	bl	8003dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001296:	2104      	movs	r1, #4
 8001298:	484e      	ldr	r0, [pc, #312]	; (80013d4 <MX_FREERTOS_Init+0x15c>)
 800129a:	f002 fd87 	bl	8003dac <HAL_TIM_PWM_Start>

  LCD_init();
 800129e:	f7ff fd6b 	bl	8000d78 <LCD_init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of hBinarySem */
  osSemaphoreDef(hBinarySem);
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  hBinarySemHandle = osSemaphoreCreate(osSemaphore(hBinarySem), 1);
 80012ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012b2:	2101      	movs	r1, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 ffb6 	bl	8006226 <osSemaphoreCreate>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <MX_FREERTOS_Init+0x160>)
 80012be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of hSemTask */
  osThreadDef(hSemTask, SemaphoreTask, osPriorityNormal, 0, 256);
 80012c0:	4b46      	ldr	r3, [pc, #280]	; (80013dc <MX_FREERTOS_Init+0x164>)
 80012c2:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80012c6:	461d      	mov	r5, r3
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTaskHandle = osThreadCreate(osThread(hSemTask), NULL);
 80012d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 ff43 	bl	8006166 <osThreadCreate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a3f      	ldr	r2, [pc, #252]	; (80013e0 <MX_FREERTOS_Init+0x168>)
 80012e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask2 */
  osThreadDef(hSemTask2, SemaphoreTask2, osPriorityNormal, 0, 256);
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <MX_FREERTOS_Init+0x16c>)
 80012e8:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80012ec:	461d      	mov	r5, r3
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask2Handle = osThreadCreate(osThread(hSemTask2), NULL);
 80012fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f004 ff30 	bl	8006166 <osThreadCreate>
 8001306:	4603      	mov	r3, r0
 8001308:	4a37      	ldr	r2, [pc, #220]	; (80013e8 <MX_FREERTOS_Init+0x170>)
 800130a:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask3 */
  osThreadDef(hSemTask3, StartTask03, osPriorityNormal, 0, 256);
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <MX_FREERTOS_Init+0x174>)
 800130e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001312:	461d      	mov	r5, r3
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800131c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask3Handle = osThreadCreate(osThread(hSemTask3), NULL);
 8001320:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f004 ff1d 	bl	8006166 <osThreadCreate>
 800132c:	4603      	mov	r3, r0
 800132e:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <MX_FREERTOS_Init+0x178>)
 8001330:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask4 */
  osThreadDef(hSemTask4, StartTask04, osPriorityNormal, 0, 256);
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <MX_FREERTOS_Init+0x17c>)
 8001334:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001338:	461d      	mov	r5, r3
 800133a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask4Handle = osThreadCreate(osThread(hSemTask4), NULL);
 8001346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f004 ff0a 	bl	8006166 <osThreadCreate>
 8001352:	4603      	mov	r3, r0
 8001354:	4a28      	ldr	r2, [pc, #160]	; (80013f8 <MX_FREERTOS_Init+0x180>)
 8001356:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask5 */
  osThreadDef(hSemTask5, StartTask05, osPriorityNormal, 0, 256);
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <MX_FREERTOS_Init+0x184>)
 800135a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800135e:	461d      	mov	r5, r3
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask5Handle = osThreadCreate(osThread(hSemTask5), NULL);
 800136c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f004 fef7 	bl	8006166 <osThreadCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	4a21      	ldr	r2, [pc, #132]	; (8001400 <MX_FREERTOS_Init+0x188>)
 800137c:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask6 */
  osThreadDef(hSemTask6, StartTask06, osPriorityNormal, 0, 256);
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_FREERTOS_Init+0x18c>)
 8001380:	f107 0420 	add.w	r4, r7, #32
 8001384:	461d      	mov	r5, r3
 8001386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask6Handle = osThreadCreate(osThread(hSemTask6), NULL);
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f004 fee4 	bl	8006166 <osThreadCreate>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <MX_FREERTOS_Init+0x190>)
 80013a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask7 */
  osThreadDef(hSemTask7, StartTask07, osPriorityNormal, 0, 256);
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_FREERTOS_Init+0x194>)
 80013a6:	1d3c      	adds	r4, r7, #4
 80013a8:	461d      	mov	r5, r3
 80013aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask7Handle = osThreadCreate(osThread(hSemTask7), NULL);
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f004 fed3 	bl	8006166 <osThreadCreate>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <MX_FREERTOS_Init+0x198>)
 80013c4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013c6:	bf00      	nop
 80013c8:	37d0      	adds	r7, #208	; 0xd0
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bdb0      	pop	{r4, r5, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000424 	.word	0x20000424
 80013d4:	2000046c 	.word	0x2000046c
 80013d8:	200000e0 	.word	0x200000e0
 80013dc:	08008a04 	.word	0x08008a04
 80013e0:	200000c4 	.word	0x200000c4
 80013e4:	08008a2c 	.word	0x08008a2c
 80013e8:	200000c8 	.word	0x200000c8
 80013ec:	08008a54 	.word	0x08008a54
 80013f0:	200000cc 	.word	0x200000cc
 80013f4:	08008a7c 	.word	0x08008a7c
 80013f8:	200000d0 	.word	0x200000d0
 80013fc:	08008aa4 	.word	0x08008aa4
 8001400:	200000d4 	.word	0x200000d4
 8001404:	08008acc 	.word	0x08008acc
 8001408:	200000d8 	.word	0x200000d8
 800140c:	08008af4 	.word	0x08008af4
 8001410:	200000dc 	.word	0x200000dc

08001414 <SemaphoreTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SemaphoreTask */
void SemaphoreTask(void const * argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

	  /* algorithm change need */



	sprintf(buff, "Parking Manager");
 800141c:	491c      	ldr	r1, [pc, #112]	; (8001490 <SemaphoreTask+0x7c>)
 800141e:	481d      	ldr	r0, [pc, #116]	; (8001494 <SemaphoreTask+0x80>)
 8001420:	f006 fde4 	bl	8007fec <siprintf>
	LCD_put_cursor(0, 0);
 8001424:	2100      	movs	r1, #0
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff fce0 	bl	8000dec <LCD_put_cursor>
	LCD_send_str(buff);
 800142c:	4819      	ldr	r0, [pc, #100]	; (8001494 <SemaphoreTask+0x80>)
 800142e:	f7ff fd5f 	bl	8000ef0 <LCD_send_str>
	sprintf(buff, "Welcome our zone");
 8001432:	4919      	ldr	r1, [pc, #100]	; (8001498 <SemaphoreTask+0x84>)
 8001434:	4817      	ldr	r0, [pc, #92]	; (8001494 <SemaphoreTask+0x80>)
 8001436:	f006 fdd9 	bl	8007fec <siprintf>
	LCD_put_cursor(1, 0);
 800143a:	2100      	movs	r1, #0
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff fcd5 	bl	8000dec <LCD_put_cursor>
	LCD_send_str(buff);
 8001442:	4814      	ldr	r0, [pc, #80]	; (8001494 <SemaphoreTask+0x80>)
 8001444:	f7ff fd54 	bl	8000ef0 <LCD_send_str>
	if (Distance_left < 10)
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <SemaphoreTask+0x88>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d80b      	bhi.n	8001468 <SemaphoreTask+0x54>
	{
		sprintf(buff, "Entrance : open ");
 8001450:	4913      	ldr	r1, [pc, #76]	; (80014a0 <SemaphoreTask+0x8c>)
 8001452:	4810      	ldr	r0, [pc, #64]	; (8001494 <SemaphoreTask+0x80>)
 8001454:	f006 fdca 	bl	8007fec <siprintf>
		LCD_put_cursor(1, 0);
 8001458:	2100      	movs	r1, #0
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff fcc6 	bl	8000dec <LCD_put_cursor>
		LCD_send_str(buff);
 8001460:	480c      	ldr	r0, [pc, #48]	; (8001494 <SemaphoreTask+0x80>)
 8001462:	f7ff fd45 	bl	8000ef0 <LCD_send_str>
 8001466:	e00e      	b.n	8001486 <SemaphoreTask+0x72>
	}
	else if (Distance_right < 10)
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <SemaphoreTask+0x90>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b09      	cmp	r3, #9
 800146e:	d80a      	bhi.n	8001486 <SemaphoreTask+0x72>
	{
		sprintf(buff, "Exit : open    ");
 8001470:	490d      	ldr	r1, [pc, #52]	; (80014a8 <SemaphoreTask+0x94>)
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <SemaphoreTask+0x80>)
 8001474:	f006 fdba 	bl	8007fec <siprintf>
		LCD_put_cursor(1, 0);
 8001478:	2100      	movs	r1, #0
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff fcb6 	bl	8000dec <LCD_put_cursor>
		LCD_send_str(buff);
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <SemaphoreTask+0x80>)
 8001482:	f7ff fd35 	bl	8000ef0 <LCD_send_str>
	}
	osDelay(500);
 8001486:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800148a:	f004 feb8 	bl	80061fe <osDelay>
	sprintf(buff, "Parking Manager");
 800148e:	e7c5      	b.n	800141c <SemaphoreTask+0x8>
 8001490:	08008b10 	.word	0x08008b10
 8001494:	2000009c 	.word	0x2000009c
 8001498:	08008b20 	.word	0x08008b20
 800149c:	20000089 	.word	0x20000089
 80014a0:	08008b34 	.word	0x08008b34
 80014a4:	20000099 	.word	0x20000099
 80014a8:	08008b48 	.word	0x08008b48

080014ac <SemaphoreTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SemaphoreTask2 */
void SemaphoreTask2(void const * argument)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SemaphoreTask2 */
  /* Infinite loop */
  for(;;)
  {
	  /* ***********Ultra Sonic Check Task*********** */
	  HCSR04_Read_Left();
 80014b4:	f7ff fe7e 	bl	80011b4 <HCSR04_Read_Left>
	  osDelay(100);
 80014b8:	2064      	movs	r0, #100	; 0x64
 80014ba:	f004 fea0 	bl	80061fe <osDelay>
	  HCSR04_Read_Right();
 80014be:	f7ff fe99 	bl	80011f4 <HCSR04_Read_Right>
	  osDelay(100);
 80014c2:	2064      	movs	r0, #100	; 0x64
 80014c4:	f004 fe9b 	bl	80061fe <osDelay>
	  HCSR04_Read_Left();
 80014c8:	e7f4      	b.n	80014b4 <SemaphoreTask2+0x8>
	...

080014cc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  /* ***********LED TASK*********** */
	  if((strcmp(rasp_rx_number_plate, "IASS") == 0) || (strcmp(rasp_rx_number_plate, "OASS") == 0))
 80014d4:	4910      	ldr	r1, [pc, #64]	; (8001518 <StartTask03+0x4c>)
 80014d6:	4811      	ldr	r0, [pc, #68]	; (800151c <StartTask03+0x50>)
 80014d8:	f7fe fe82 	bl	80001e0 <strcmp>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <StartTask03+0x24>
 80014e2:	490f      	ldr	r1, [pc, #60]	; (8001520 <StartTask03+0x54>)
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <StartTask03+0x50>)
 80014e6:	f7fe fe7b 	bl	80001e0 <strcmp>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d109      	bne.n	8001504 <StartTask03+0x38>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET); // GREEN LED ON, now testing RED LED
 80014f0:	2201      	movs	r2, #1
 80014f2:	2120      	movs	r1, #32
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <StartTask03+0x58>)
 80014f6:	f001 fa0b 	bl	8002910 <HAL_GPIO_WritePin>
		  osDelay(1000); // testing delay
 80014fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014fe:	f004 fe7e 	bl	80061fe <osDelay>
 8001502:	e004      	b.n	800150e <StartTask03+0x42>


	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); // GREEN LED OFF
 8001504:	2200      	movs	r2, #0
 8001506:	2120      	movs	r1, #32
 8001508:	4806      	ldr	r0, [pc, #24]	; (8001524 <StartTask03+0x58>)
 800150a:	f001 fa01 	bl	8002910 <HAL_GPIO_WritePin>
//	  }
//	  else
//	  {
//		  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState); // YELLOW LED OFF
//	  }
	  osDelay(300);
 800150e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001512:	f004 fe74 	bl	80061fe <osDelay>
	  if((strcmp(rasp_rx_number_plate, "IASS") == 0) || (strcmp(rasp_rx_number_plate, "OASS") == 0))
 8001516:	e7dd      	b.n	80014d4 <StartTask03+0x8>
 8001518:	08008b58 	.word	0x08008b58
 800151c:	200000b8 	.word	0x200000b8
 8001520:	08008b60 	.word	0x08008b60
 8001524:	40020000 	.word	0x40020000

08001528 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  /* ***********Motor Task*********** */
	TIM3->CCR1 = 10;
 8001530:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <StartTask04+0xf8>)
 8001532:	220a      	movs	r2, #10
 8001534:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 10;
 8001536:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <StartTask04+0xf8>)
 8001538:	220a      	movs	r2, #10
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(100);
 800153c:	2064      	movs	r0, #100	; 0x64
 800153e:	f004 fe5e 	bl	80061fe <osDelay>
	count_IN++;
 8001542:	4b38      	ldr	r3, [pc, #224]	; (8001624 <StartTask04+0xfc>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b36      	ldr	r3, [pc, #216]	; (8001624 <StartTask04+0xfc>)
 800154c:	701a      	strb	r2, [r3, #0]

	if((strcmp(rasp_rx_number_plate, "IASS") == 0) && (curState_Left == DETECT))
 800154e:	4936      	ldr	r1, [pc, #216]	; (8001628 <StartTask04+0x100>)
 8001550:	4836      	ldr	r0, [pc, #216]	; (800162c <StartTask04+0x104>)
 8001552:	f7fe fe45 	bl	80001e0 <strcmp>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d113      	bne.n	8001584 <StartTask04+0x5c>
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <StartTask04+0x108>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10f      	bne.n	8001584 <StartTask04+0x5c>
	{
		curState_Left = KEPP;
 8001564:	4b32      	ldr	r3, [pc, #200]	; (8001630 <StartTask04+0x108>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
		count_OUT++;
 800156a:	4b32      	ldr	r3, [pc, #200]	; (8001634 <StartTask04+0x10c>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b30      	ldr	r3, [pc, #192]	; (8001634 <StartTask04+0x10c>)
 8001574:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = 100;
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <StartTask04+0xf8>)
 8001578:	2264      	movs	r2, #100	; 0x64
 800157a:	635a      	str	r2, [r3, #52]	; 0x34
		osDelay(100);
 800157c:	2064      	movs	r0, #100	; 0x64
 800157e:	f004 fe3e 	bl	80061fe <osDelay>
 8001582:	e016      	b.n	80015b2 <StartTask04+0x8a>
//		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
//		{
//		  rasp_rx_number_plate[i] = '\0';
//		}
	}
	else if((Distance_left > 10) && (curState_Left == KEPP))
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <StartTask04+0x110>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b0a      	cmp	r3, #10
 800158a:	d912      	bls.n	80015b2 <StartTask04+0x8a>
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <StartTask04+0x108>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10e      	bne.n	80015b2 <StartTask04+0x8a>
	{
		curState_Left = DETECT;
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <StartTask04+0x108>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = 25;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <StartTask04+0xf8>)
 800159c:	2219      	movs	r2, #25
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
		osDelay(100);
 80015a0:	2064      	movs	r0, #100	; 0x64
 80015a2:	f004 fe2c 	bl	80061fe <osDelay>
		count_OUT++;
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <StartTask04+0x10c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <StartTask04+0x10c>)
 80015b0:	701a      	strb	r2, [r3, #0]
	}

	if((strcmp(rasp_rx_number_plate, "OASS") == 0) && (curState_Right == DETECT))
 80015b2:	4922      	ldr	r1, [pc, #136]	; (800163c <StartTask04+0x114>)
 80015b4:	481d      	ldr	r0, [pc, #116]	; (800162c <StartTask04+0x104>)
 80015b6:	f7fe fe13 	bl	80001e0 <strcmp>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d113      	bne.n	80015e8 <StartTask04+0xc0>
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <StartTask04+0x118>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10f      	bne.n	80015e8 <StartTask04+0xc0>
	{
		curState_Right = KEPP;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <StartTask04+0x118>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
		count_OUT++;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <StartTask04+0x10c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <StartTask04+0x10c>)
 80015d8:	701a      	strb	r2, [r3, #0]
		TIM3->CCR2 = 100;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <StartTask04+0xf8>)
 80015dc:	2264      	movs	r2, #100	; 0x64
 80015de:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(100);
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	f004 fe0c 	bl	80061fe <osDelay>
 80015e6:	e016      	b.n	8001616 <StartTask04+0xee>
//	    for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
//	    {
//	    	rasp_rx_number_plate[i] = '\0';
//	    }
	}
	else if((Distance_right > 10) && (curState_Right == KEPP))
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <StartTask04+0x11c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b0a      	cmp	r3, #10
 80015ee:	d912      	bls.n	8001616 <StartTask04+0xee>
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <StartTask04+0x118>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10e      	bne.n	8001616 <StartTask04+0xee>
	{
		curState_Right = DETECT;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <StartTask04+0x118>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
		TIM3->CCR2 = 25;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <StartTask04+0xf8>)
 8001600:	2219      	movs	r2, #25
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(100);
 8001604:	2064      	movs	r0, #100	; 0x64
 8001606:	f004 fdfa 	bl	80061fe <osDelay>
		count_OUT++;
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <StartTask04+0x10c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <StartTask04+0x10c>)
 8001614:	701a      	strb	r2, [r3, #0]
	}
    osDelay(10);
 8001616:	200a      	movs	r0, #10
 8001618:	f004 fdf1 	bl	80061fe <osDelay>
	TIM3->CCR1 = 10;
 800161c:	e788      	b.n	8001530 <StartTask04+0x8>
 800161e:	bf00      	nop
 8001620:	40000400 	.word	0x40000400
 8001624:	200000c2 	.word	0x200000c2
 8001628:	08008b58 	.word	0x08008b58
 800162c:	200000b8 	.word	0x200000b8
 8001630:	200000c0 	.word	0x200000c0
 8001634:	200000c3 	.word	0x200000c3
 8001638:	20000089 	.word	0x20000089
 800163c:	08008b60 	.word	0x08008b60
 8001640:	200000c1 	.word	0x200000c1
 8001644:	20000099 	.word	0x20000099

08001648 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
 8001650:	e7fe      	b.n	8001650 <StartTask05+0x8>

08001652 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
 800165a:	e7fe      	b.n	800165a <StartTask06+0x8>

0800165c <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void const * argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for(;;)
  {
	  /* ***********Sending Data to Rasp Task*********** */
    if(Distance_left < 10)
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <StartTask07+0x60>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b09      	cmp	r3, #9
 800166a:	d80b      	bhi.n	8001684 <StartTask07+0x28>
    {
    	rasp_tx_dist1_Data[0] = 'I';
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <StartTask07+0x64>)
 800166e:	2249      	movs	r2, #73	; 0x49
 8001670:	701a      	strb	r2, [r3, #0]

    	HAL_UART_Transmit_IT(&huart6, rasp_tx_dist1_Data, sizeof(rasp_tx_dist1_Data));
 8001672:	2201      	movs	r2, #1
 8001674:	4912      	ldr	r1, [pc, #72]	; (80016c0 <StartTask07+0x64>)
 8001676:	4813      	ldr	r0, [pc, #76]	; (80016c4 <StartTask07+0x68>)
 8001678:	f003 fdfc 	bl	8005274 <HAL_UART_Transmit_IT>
    	osDelay(3000);
 800167c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001680:	f004 fdbd 	bl	80061fe <osDelay>
//    	HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
//    	osDelay(3000);
    }

    if(Distance_right < 10)
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <StartTask07+0x6c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d80b      	bhi.n	80016a4 <StartTask07+0x48>
    {
    	rasp_tx_dist2_Data[0] = 'O';
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <StartTask07+0x70>)
 800168e:	224f      	movs	r2, #79	; 0x4f
 8001690:	701a      	strb	r2, [r3, #0]

    	HAL_UART_Transmit_IT(&huart6, rasp_tx_dist2_Data, sizeof(rasp_tx_dist2_Data));
 8001692:	2201      	movs	r2, #1
 8001694:	490d      	ldr	r1, [pc, #52]	; (80016cc <StartTask07+0x70>)
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <StartTask07+0x68>)
 8001698:	f003 fdec 	bl	8005274 <HAL_UART_Transmit_IT>
    	osDelay(3000);
 800169c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016a0:	f004 fdad 	bl	80061fe <osDelay>
//    	HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
//    	osDelay(3000);
    }
    HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
 80016a4:	2208      	movs	r2, #8
 80016a6:	490a      	ldr	r1, [pc, #40]	; (80016d0 <StartTask07+0x74>)
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <StartTask07+0x68>)
 80016aa:	f003 fe19 	bl	80052e0 <HAL_UART_Receive_IT>
    rasp_tx_dist1_Data[0] = '\0';
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <StartTask07+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
    rasp_tx_dist2_Data[0] = '\0';
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <StartTask07+0x70>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
    if(Distance_left < 10)
 80016ba:	e7d3      	b.n	8001664 <StartTask07+0x8>
 80016bc:	20000089 	.word	0x20000089
 80016c0:	200000b0 	.word	0x200000b0
 80016c4:	200004fc 	.word	0x200004fc
 80016c8:	20000099 	.word	0x20000099
 80016cc:	200000b4 	.word	0x200000b4
 80016d0:	200000b8 	.word	0x200000b8

080016d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <MX_GPIO_Init+0xec>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a33      	ldr	r2, [pc, #204]	; (80017c0 <MX_GPIO_Init+0xec>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <MX_GPIO_Init+0xec>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <MX_GPIO_Init+0xec>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a2c      	ldr	r2, [pc, #176]	; (80017c0 <MX_GPIO_Init+0xec>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <MX_GPIO_Init+0xec>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <MX_GPIO_Init+0xec>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <MX_GPIO_Init+0xec>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <MX_GPIO_Init+0xec>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001744:	481f      	ldr	r0, [pc, #124]	; (80017c4 <MX_GPIO_Init+0xf0>)
 8001746:	f001 f8e3 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001750:	481d      	ldr	r0, [pc, #116]	; (80017c8 <MX_GPIO_Init+0xf4>)
 8001752:	f001 f8dd 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2120      	movs	r1, #32
 800175a:	481c      	ldr	r0, [pc, #112]	; (80017cc <MX_GPIO_Init+0xf8>)
 800175c:	f001 f8d8 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8001760:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	4812      	ldr	r0, [pc, #72]	; (80017c4 <MX_GPIO_Init+0xf0>)
 800177a:	f000 ff45 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800177e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4619      	mov	r1, r3
 8001796:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_GPIO_Init+0xf4>)
 8001798:	f000 ff36 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800179c:	2320      	movs	r3, #32
 800179e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <MX_GPIO_Init+0xf8>)
 80017b4:	f000 ff28 	bl	8002608 <HAL_GPIO_Init>

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020400 	.word	0x40020400

080017d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_I2C1_Init+0x50>)
 80017d6:	4a13      	ldr	r2, [pc, #76]	; (8001824 <MX_I2C1_Init+0x54>)
 80017d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_I2C1_Init+0x50>)
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <MX_I2C1_Init+0x58>)
 80017de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_I2C1_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_I2C1_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_I2C1_Init+0x50>)
 80017ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <MX_I2C1_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_I2C1_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_I2C1_Init+0x50>)
 800180e:	f001 f899 	bl	8002944 <HAL_I2C_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001818:	f000 f8e2 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000384 	.word	0x20000384
 8001824:	40005400 	.word	0x40005400
 8001828:	000186a0 	.word	0x000186a0

0800182c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_I2C_MspInit+0x84>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d12b      	bne.n	80018a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186a:	23c0      	movs	r3, #192	; 0xc0
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186e:	2312      	movs	r3, #18
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187a:	2304      	movs	r3, #4
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <HAL_I2C_MspInit+0x8c>)
 8001886:	f000 febf 	bl	8002608 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 8001894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_I2C_MspInit+0x88>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40005400 	.word	0x40005400
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020400 	.word	0x40020400

080018bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c0:	f000 fcc8 	bl	8002254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c4:	f000 f812 	bl	80018ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c8:	f7ff ff04 	bl	80016d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80018cc:	f000 f9bc 	bl	8001c48 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018d0:	f000 fa34 	bl	8001d3c <MX_TIM3_Init>
  MX_I2C1_Init();
 80018d4:	f7ff ff7c 	bl	80017d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80018d8:	f000 fb90 	bl	8001ffc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80018dc:	f000 fbb8 	bl	8002050 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80018e0:	f7ff fcca 	bl	8001278 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80018e4:	f004 fc38 	bl	8006158 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <main+0x2c>
	...

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b094      	sub	sp, #80	; 0x50
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2230      	movs	r2, #48	; 0x30
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f006 fb96 	bl	800802c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <SystemClock_Config+0xc8>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <SystemClock_Config+0xc8>)
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <SystemClock_Config+0xc8>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <SystemClock_Config+0xcc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <SystemClock_Config+0xcc>)
 8001936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <SystemClock_Config+0xcc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001948:	2302      	movs	r3, #2
 800194a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800194c:	2301      	movs	r3, #1
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001950:	2310      	movs	r3, #16
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001954:	2302      	movs	r3, #2
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001958:	2300      	movs	r3, #0
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800195c:	2308      	movs	r3, #8
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001960:	2364      	movs	r3, #100	; 0x64
 8001962:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001964:	2302      	movs	r3, #2
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001968:	2304      	movs	r3, #4
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fc85 	bl	8003280 <HAL_RCC_OscConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800197c:	f000 f830 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001980:	230f      	movs	r3, #15
 8001982:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001984:	2302      	movs	r3, #2
 8001986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	2103      	movs	r1, #3
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fee7 	bl	8003770 <HAL_RCC_ClockConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019a8:	f000 f81a 	bl	80019e0 <Error_Handler>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3750      	adds	r7, #80	; 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000

080019bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ce:	f000 fc63 	bl	8002298 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40000c00 	.word	0x40000c00

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <Error_Handler+0x8>
	...

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_MspInit+0x54>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_MspInit+0x54>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_MspInit+0x54>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_MspInit+0x54>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_MspInit+0x54>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_MspInit+0x54>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	f06f 0001 	mvn.w	r0, #1
 8001a32:	f000 fd2d 	bl	8002490 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08e      	sub	sp, #56	; 0x38
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <HAL_InitTick+0xe4>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	4a32      	ldr	r2, [pc, #200]	; (8001b28 <HAL_InitTick+0xe4>)
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6413      	str	r3, [r2, #64]	; 0x40
 8001a64:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <HAL_InitTick+0xe4>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a70:	f107 0210 	add.w	r2, r7, #16
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 f858 	bl	8003b30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d103      	bne.n	8001a92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a8a:	f002 f829 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8001a8e:	6378      	str	r0, [r7, #52]	; 0x34
 8001a90:	e004      	b.n	8001a9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a92:	f002 f825 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8001a96:	4603      	mov	r3, r0
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	4a23      	ldr	r2, [pc, #140]	; (8001b2c <HAL_InitTick+0xe8>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	0c9b      	lsrs	r3, r3, #18
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_InitTick+0xec>)
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <HAL_InitTick+0xf0>)
 8001aae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_InitTick+0xec>)
 8001ab2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_InitTick+0xec>)
 8001aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_InitTick+0xec>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_InitTick+0xec>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_InitTick+0xec>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001ad0:	4817      	ldr	r0, [pc, #92]	; (8001b30 <HAL_InitTick+0xec>)
 8001ad2:	f002 f85f 	bl	8003b94 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d11b      	bne.n	8001b1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001ae4:	4812      	ldr	r0, [pc, #72]	; (8001b30 <HAL_InitTick+0xec>)
 8001ae6:	f002 f8a5 	bl	8003c34 <HAL_TIM_Base_Start_IT>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001af0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d111      	bne.n	8001b1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001af8:	2032      	movs	r0, #50	; 0x32
 8001afa:	f000 fce5 	bl	80024c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d808      	bhi.n	8001b16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	2032      	movs	r0, #50	; 0x32
 8001b0a:	f000 fcc1 	bl	8002490 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_InitTick+0xf4>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e002      	b.n	8001b1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3738      	adds	r7, #56	; 0x38
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	431bde83 	.word	0x431bde83
 8001b30:	200003d8 	.word	0x200003d8
 8001b34:	40000c00 	.word	0x40000c00
 8001b38:	20000004 	.word	0x20000004

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x4>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <TIM2_IRQHandler+0x10>)
 8001b6e:	f002 fb41 	bl	80041f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000424 	.word	0x20000424

08001b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <USART1_IRQHandler+0x10>)
 8001b82:	f003 fbd3 	bl	800532c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200004b4 	.word	0x200004b4

08001b90 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <TIM5_IRQHandler+0x10>)
 8001b96:	f002 fb2d 	bl	80041f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200003d8 	.word	0x200003d8

08001ba4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <USART6_IRQHandler+0x10>)
 8001baa:	f003 fbbf 	bl	800532c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200004fc 	.word	0x200004fc

08001bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc0:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <_sbrk+0x5c>)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <_sbrk+0x60>)
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <_sbrk+0x64>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <_sbrk+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d207      	bcs.n	8001bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be8:	f006 fa7e 	bl	80080e8 <__errno>
 8001bec:	4603      	mov	r3, r0
 8001bee:	220c      	movs	r2, #12
 8001bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e009      	b.n	8001c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <_sbrk+0x64>)
 8001c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20020000 	.word	0x20020000
 8001c18:	00000400 	.word	0x00000400
 8001c1c:	20000420 	.word	0x20000420
 8001c20:	200043e8 	.word	0x200043e8

08001c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <SystemInit+0x20>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <SystemInit+0x20>)
 8001c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c66:	463b      	mov	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001c7c:	2263      	movs	r2, #99	; 0x63
 8001c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001c88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001c8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c9a:	4827      	ldr	r0, [pc, #156]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001c9c:	f001 ff7a 	bl	8003b94 <HAL_TIM_Base_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001ca6:	f7ff fe9b 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4820      	ldr	r0, [pc, #128]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001cb8:	f002 fcea 	bl	8004690 <HAL_TIM_ConfigClockSource>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cc2:	f7ff fe8d 	bl	80019e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001cc6:	481c      	ldr	r0, [pc, #112]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001cc8:	f002 f920 	bl	8003f0c <HAL_TIM_IC_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cd2:	f7ff fe85 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4814      	ldr	r0, [pc, #80]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001ce6:	f003 f9f3 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001cf0:	f7ff fe76 	bl	80019e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d04:	463b      	mov	r3, r7
 8001d06:	2200      	movs	r2, #0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001d0c:	f002 fb62 	bl	80043d4 <HAL_TIM_IC_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001d16:	f7ff fe63 	bl	80019e0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_TIM2_Init+0xf0>)
 8001d22:	f002 fb57 	bl	80043d4 <HAL_TIM_IC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001d2c:	f7ff fe58 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000424 	.word	0x20000424

08001d3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	; 0x38
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
 8001d68:	615a      	str	r2, [r3, #20]
 8001d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d6c:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001d6e:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <MX_TIM3_Init+0x100>)
 8001d70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000-1;
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001d74:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001d78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001d82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d94:	4828      	ldr	r0, [pc, #160]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001d96:	f001 fefd 	bl	8003b94 <HAL_TIM_Base_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001da0:	f7ff fe1e 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dae:	4619      	mov	r1, r3
 8001db0:	4821      	ldr	r0, [pc, #132]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001db2:	f002 fc6d 	bl	8004690 <HAL_TIM_ConfigClockSource>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001dbc:	f7ff fe10 	bl	80019e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dc0:	481d      	ldr	r0, [pc, #116]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001dc2:	f001 ff99 	bl	8003cf8 <HAL_TIM_PWM_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001dcc:	f7ff fe08 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dd8:	f107 0320 	add.w	r3, r7, #32
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4816      	ldr	r0, [pc, #88]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001de0:	f003 f976 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001dea:	f7ff fdf9 	bl	80019e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dee:	2360      	movs	r3, #96	; 0x60
 8001df0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001e06:	f002 fb81 	bl	800450c <HAL_TIM_PWM_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e10:	f7ff fde6 	bl	80019e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2204      	movs	r2, #4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4807      	ldr	r0, [pc, #28]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001e1c:	f002 fb76 	bl	800450c <HAL_TIM_PWM_ConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001e26:	f7ff fddb 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e2a:	4803      	ldr	r0, [pc, #12]	; (8001e38 <MX_TIM3_Init+0xfc>)
 8001e2c:	f000 f88c 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 8001e30:	bf00      	nop
 8001e32:	3738      	adds	r7, #56	; 0x38
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2000046c 	.word	0x2000046c
 8001e3c:	40000400 	.word	0x40000400

08001e40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e60:	d153      	bne.n	8001f0a <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a33      	ldr	r2, [pc, #204]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a2c      	ldr	r2, [pc, #176]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	481a      	ldr	r0, [pc, #104]	; (8001f3c <HAL_TIM_Base_MspInit+0xfc>)
 8001ed2:	f000 fb99 	bl	8002608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4813      	ldr	r0, [pc, #76]	; (8001f40 <HAL_TIM_Base_MspInit+0x100>)
 8001ef4:	f000 fb88 	bl	8002608 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2105      	movs	r1, #5
 8001efc:	201c      	movs	r0, #28
 8001efe:	f000 fac7 	bl	8002490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f02:	201c      	movs	r0, #28
 8001f04:	f000 fae0 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f08:	e012      	b.n	8001f30 <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM3)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_TIM_Base_MspInit+0x104>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d10d      	bne.n	8001f30 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_TIM_Base_MspInit+0xf8>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3730      	adds	r7, #48	; 0x30
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40000400 	.word	0x40000400

08001f48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <HAL_TIM_MspPostInit+0xa4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d13b      	bne.n	8001fe2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_TIM_MspPostInit+0xa8>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_TIM_MspPostInit+0xa8>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_TIM_MspPostInit+0xa8>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_TIM_MspPostInit+0xa8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <HAL_TIM_MspPostInit+0xa8>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <HAL_TIM_MspPostInit+0xa8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <HAL_TIM_MspPostInit+0xac>)
 8001fbe:	f000 fb23 	bl	8002608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fc2:	2340      	movs	r3, #64	; 0x40
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <HAL_TIM_MspPostInit+0xb0>)
 8001fde:	f000 fb13 	bl	8002608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	; 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020800 	.word	0x40020800

08001ffc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <MX_USART1_UART_Init+0x50>)
 8002004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002008:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800200c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002022:	220c      	movs	r2, #12
 8002024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002034:	f003 f8ce 	bl	80051d4 <HAL_UART_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800203e:	f7ff fccf 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200004b4 	.word	0x200004b4
 800204c:	40011000 	.word	0x40011000

08002050 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_USART6_UART_Init+0x4c>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <MX_USART6_UART_Init+0x50>)
 8002058:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_USART6_UART_Init+0x4c>)
 800205c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002060:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_USART6_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_USART6_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <MX_USART6_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_USART6_UART_Init+0x4c>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <MX_USART6_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_USART6_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_USART6_UART_Init+0x4c>)
 8002088:	f003 f8a4 	bl	80051d4 <HAL_UART_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002092:	f7ff fca5 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200004fc 	.word	0x200004fc
 80020a0:	40011400 	.word	0x40011400

080020a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	; 0x30
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a4a      	ldr	r2, [pc, #296]	; (80021ec <HAL_UART_MspInit+0x148>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d135      	bne.n	8002132 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	4a48      	ldr	r2, [pc, #288]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	6453      	str	r3, [r2, #68]	; 0x44
 80020d6:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	4b42      	ldr	r3, [pc, #264]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a41      	ldr	r2, [pc, #260]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002110:	2307      	movs	r3, #7
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4619      	mov	r1, r3
 800211a:	4836      	ldr	r0, [pc, #216]	; (80021f4 <HAL_UART_MspInit+0x150>)
 800211c:	f000 fa74 	bl	8002608 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2105      	movs	r1, #5
 8002124:	2025      	movs	r0, #37	; 0x25
 8002126:	f000 f9b3 	bl	8002490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800212a:	2025      	movs	r0, #37	; 0x25
 800212c:	f000 f9cc 	bl	80024c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002130:	e057      	b.n	80021e2 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART6)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a30      	ldr	r2, [pc, #192]	; (80021f8 <HAL_UART_MspInit+0x154>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d152      	bne.n	80021e2 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	4a2a      	ldr	r2, [pc, #168]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 8002146:	f043 0320 	orr.w	r3, r3, #32
 800214a:	6453      	str	r3, [r2, #68]	; 0x44
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6313      	str	r3, [r2, #48]	; 0x30
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_UART_MspInit+0x14c>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021a0:	2308      	movs	r3, #8
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	4814      	ldr	r0, [pc, #80]	; (80021fc <HAL_UART_MspInit+0x158>)
 80021ac:	f000 fa2c 	bl	8002608 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80021b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021c2:	2308      	movs	r3, #8
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <HAL_UART_MspInit+0x150>)
 80021ce:	f000 fa1b 	bl	8002608 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2105      	movs	r1, #5
 80021d6:	2047      	movs	r0, #71	; 0x47
 80021d8:	f000 f95a 	bl	8002490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80021dc:	2047      	movs	r0, #71	; 0x47
 80021de:	f000 f973 	bl	80024c8 <HAL_NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3730      	adds	r7, #48	; 0x30
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40011000 	.word	0x40011000
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40011400 	.word	0x40011400
 80021fc:	40020800 	.word	0x40020800

08002200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8002200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002238 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002204:	f7ff fd0e 	bl	8001c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800220a:	490d      	ldr	r1, [pc, #52]	; (8002240 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002210:	e002      	b.n	8002218 <LoopCopyDataInit>

08002212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002216:	3304      	adds	r3, #4

08002218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800221c:	d3f9      	bcc.n	8002212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002220:	4c0a      	ldr	r4, [pc, #40]	; (800224c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002224:	e001      	b.n	800222a <LoopFillZerobss>

08002226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002228:	3204      	adds	r2, #4

0800222a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800222c:	d3fb      	bcc.n	8002226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222e:	f005 ff61 	bl	80080f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002232:	f7ff fb43 	bl	80018bc <main>
  bx  lr    
 8002236:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8002238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800223c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002240:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002244:	08008bcc 	.word	0x08008bcc
  ldr r2, =_sbss
 8002248:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800224c:	200043e4 	.word	0x200043e4

08002250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002250:	e7fe      	b.n	8002250 <ADC_IRQHandler>
	...

08002254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <HAL_Init+0x40>)
 800225e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_Init+0x40>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_Init+0x40>)
 8002276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227c:	2003      	movs	r0, #3
 800227e:	f000 f8fc 	bl	800247a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002282:	200f      	movs	r0, #15
 8002284:	f7ff fbde 	bl	8001a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002288:	f7ff fbb0 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023c00 	.word	0x40023c00

08002298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_IncTick+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_IncTick+0x24>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a04      	ldr	r2, [pc, #16]	; (80022bc <HAL_IncTick+0x24>)
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000008 	.word	0x20000008
 80022bc:	20000544 	.word	0x20000544

080022c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTick;
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_GetTick+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000544 	.word	0x20000544

080022d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff ffee 	bl	80022c0 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d005      	beq.n	80022fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_Delay+0x44>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022fe:	bf00      	nop
 8002300:	f7ff ffde 	bl	80022c0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8f7      	bhi.n	8002300 <HAL_Delay+0x28>
  {
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000008 	.word	0x20000008

08002320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60d3      	str	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_GetPriorityGrouping+0x18>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 0307 	and.w	r3, r3, #7
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db0b      	blt.n	80023ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4907      	ldr	r1, [pc, #28]	; (80023bc <__NVIC_EnableIRQ+0x38>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2001      	movs	r0, #1
 80023a6:	fa00 f202 	lsl.w	r2, r0, r2
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db0a      	blt.n	80023ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <__NVIC_SetPriority+0x4c>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e8:	e00a      	b.n	8002400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4908      	ldr	r1, [pc, #32]	; (8002410 <__NVIC_SetPriority+0x50>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3b04      	subs	r3, #4
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	761a      	strb	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000e100 	.word	0xe000e100
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f1c3 0307 	rsb	r3, r3, #7
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf28      	it	cs
 8002432:	2304      	movcs	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3304      	adds	r3, #4
 800243a:	2b06      	cmp	r3, #6
 800243c:	d902      	bls.n	8002444 <NVIC_EncodePriority+0x30>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3b03      	subs	r3, #3
 8002442:	e000      	b.n	8002446 <NVIC_EncodePriority+0x32>
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 32ff 	mov.w	r2, #4294967295
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	401a      	ands	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245c:	f04f 31ff 	mov.w	r1, #4294967295
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43d9      	mvns	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	4313      	orrs	r3, r2
         );
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff4c 	bl	8002320 <__NVIC_SetPriorityGrouping>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a2:	f7ff ff61 	bl	8002368 <__NVIC_GetPriorityGrouping>
 80024a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	6978      	ldr	r0, [r7, #20]
 80024ae:	f7ff ffb1 	bl	8002414 <NVIC_EncodePriority>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff80 	bl	80023c0 <__NVIC_SetPriority>
}
 80024c0:	bf00      	nop
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff54 	bl	8002384 <__NVIC_EnableIRQ>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024f2:	f7ff fee5 	bl	80022c0 <HAL_GetTick>
 80024f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d008      	beq.n	8002516 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e052      	b.n	80025bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0216 	bic.w	r2, r2, #22
 8002524:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002534:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <HAL_DMA_Abort+0x62>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0208 	bic.w	r2, r2, #8
 8002554:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002566:	e013      	b.n	8002590 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002568:	f7ff feaa 	bl	80022c0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b05      	cmp	r3, #5
 8002574:	d90c      	bls.n	8002590 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2203      	movs	r2, #3
 8002580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e015      	b.n	80025bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1e4      	bne.n	8002568 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	223f      	movs	r2, #63	; 0x3f
 80025a4:	409a      	lsls	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d004      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00c      	b.n	80025fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2205      	movs	r2, #5
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e159      	b.n	80028d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8148 	bne.w	80028d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d005      	beq.n	800265a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	2b02      	cmp	r3, #2
 8002658:	d130      	bne.n	80026bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 0201 	and.w	r2, r3, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d017      	beq.n	80026f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d123      	bne.n	800274c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	08da      	lsrs	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3208      	adds	r2, #8
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	69b9      	ldr	r1, [r7, #24]
 8002748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0203 	and.w	r2, r3, #3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a2 	beq.w	80028d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027aa:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_GPIO_Init+0x2ec>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a49      	ldr	r2, [pc, #292]	; (80028f8 <HAL_GPIO_Init+0x2f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x202>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a48      	ldr	r2, [pc, #288]	; (80028fc <HAL_GPIO_Init+0x2f4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x1fe>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a47      	ldr	r2, [pc, #284]	; (8002900 <HAL_GPIO_Init+0x2f8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x1fa>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a46      	ldr	r2, [pc, #280]	; (8002904 <HAL_GPIO_Init+0x2fc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x1f6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a45      	ldr	r2, [pc, #276]	; (8002908 <HAL_GPIO_Init+0x300>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x1f2>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e008      	b.n	800280c <HAL_GPIO_Init+0x204>
 80027fa:	2307      	movs	r3, #7
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x204>
 80027fe:	2303      	movs	r3, #3
 8002800:	e004      	b.n	800280c <HAL_GPIO_Init+0x204>
 8002802:	2302      	movs	r3, #2
 8002804:	e002      	b.n	800280c <HAL_GPIO_Init+0x204>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_GPIO_Init+0x204>
 800280a:	2300      	movs	r3, #0
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f002 0203 	and.w	r2, r2, #3
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4093      	lsls	r3, r2
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281c:	4935      	ldr	r1, [pc, #212]	; (80028f4 <HAL_GPIO_Init+0x2ec>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_GPIO_Init+0x304>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284e:	4a2f      	ldr	r2, [pc, #188]	; (800290c <HAL_GPIO_Init+0x304>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002854:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_GPIO_Init+0x304>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002878:	4a24      	ldr	r2, [pc, #144]	; (800290c <HAL_GPIO_Init+0x304>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_GPIO_Init+0x304>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a2:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_GPIO_Init+0x304>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_GPIO_Init+0x304>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_GPIO_Init+0x304>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3301      	adds	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	f67f aea2 	bls.w	8002624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40013800 	.word	0x40013800
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40020400 	.word	0x40020400
 8002900:	40020800 	.word	0x40020800
 8002904:	40020c00 	.word	0x40020c00
 8002908:	40021000 	.word	0x40021000
 800290c:	40013c00 	.word	0x40013c00

08002910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800292c:	e003      	b.n	8002936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	041a      	lsls	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	619a      	str	r2, [r3, #24]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e12b      	b.n	8002bae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe ff5e 	bl	800182c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002996:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029a8:	f001 f89a 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 80029ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4a81      	ldr	r2, [pc, #516]	; (8002bb8 <HAL_I2C_Init+0x274>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d807      	bhi.n	80029c8 <HAL_I2C_Init+0x84>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a80      	ldr	r2, [pc, #512]	; (8002bbc <HAL_I2C_Init+0x278>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	bf94      	ite	ls
 80029c0:	2301      	movls	r3, #1
 80029c2:	2300      	movhi	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e006      	b.n	80029d6 <HAL_I2C_Init+0x92>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a7d      	ldr	r2, [pc, #500]	; (8002bc0 <HAL_I2C_Init+0x27c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	bf94      	ite	ls
 80029d0:	2301      	movls	r3, #1
 80029d2:	2300      	movhi	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0e7      	b.n	8002bae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a78      	ldr	r2, [pc, #480]	; (8002bc4 <HAL_I2C_Init+0x280>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	0c9b      	lsrs	r3, r3, #18
 80029e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a6a      	ldr	r2, [pc, #424]	; (8002bb8 <HAL_I2C_Init+0x274>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d802      	bhi.n	8002a18 <HAL_I2C_Init+0xd4>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3301      	adds	r3, #1
 8002a16:	e009      	b.n	8002a2c <HAL_I2C_Init+0xe8>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	4a69      	ldr	r2, [pc, #420]	; (8002bc8 <HAL_I2C_Init+0x284>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	495c      	ldr	r1, [pc, #368]	; (8002bb8 <HAL_I2C_Init+0x274>)
 8002a48:	428b      	cmp	r3, r1
 8002a4a:	d819      	bhi.n	8002a80 <HAL_I2C_Init+0x13c>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1e59      	subs	r1, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a5a:	1c59      	adds	r1, r3, #1
 8002a5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a60:	400b      	ands	r3, r1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_I2C_Init+0x138>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1e59      	subs	r1, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a74:	3301      	adds	r3, #1
 8002a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7a:	e051      	b.n	8002b20 <HAL_I2C_Init+0x1dc>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	e04f      	b.n	8002b20 <HAL_I2C_Init+0x1dc>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d111      	bne.n	8002aac <HAL_I2C_Init+0x168>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	440b      	add	r3, r1
 8002a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e012      	b.n	8002ad2 <HAL_I2C_Init+0x18e>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	0099      	lsls	r1, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Init+0x196>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e022      	b.n	8002b20 <HAL_I2C_Init+0x1dc>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10e      	bne.n	8002b00 <HAL_I2C_Init+0x1bc>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1e58      	subs	r0, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	440b      	add	r3, r1
 8002af0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afe:	e00f      	b.n	8002b20 <HAL_I2C_Init+0x1dc>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1e58      	subs	r0, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	0099      	lsls	r1, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	6809      	ldr	r1, [r1, #0]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6911      	ldr	r1, [r2, #16]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68d2      	ldr	r2, [r2, #12]
 8002b5a:	4311      	orrs	r1, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	000186a0 	.word	0x000186a0
 8002bbc:	001e847f 	.word	0x001e847f
 8002bc0:	003d08ff 	.word	0x003d08ff
 8002bc4:	431bde83 	.word	0x431bde83
 8002bc8:	10624dd3 	.word	0x10624dd3

08002bcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	817b      	strh	r3, [r7, #10]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff fb6e 	bl	80022c0 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	f040 80e0 	bne.w	8002db4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2319      	movs	r3, #25
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4970      	ldr	r1, [pc, #448]	; (8002dc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f964 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0d3      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_I2C_Master_Transmit+0x50>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0cc      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d007      	beq.n	8002c42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2221      	movs	r2, #33	; 0x21
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	893a      	ldrh	r2, [r7, #8]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a50      	ldr	r2, [pc, #320]	; (8002dc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c84:	8979      	ldrh	r1, [r7, #10]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f89c 	bl	8002dc8 <I2C_MasterRequestWrite>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e08d      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cb0:	e066      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	6a39      	ldr	r1, [r7, #32]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fa22 	bl	8003100 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d107      	bne.n	8002cda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06b      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	781a      	ldrb	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d11b      	bne.n	8002d54 <HAL_I2C_Master_Transmit+0x188>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d017      	beq.n	8002d54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	6a39      	ldr	r1, [r7, #32]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fa19 	bl	8003190 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d107      	bne.n	8002d7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e01a      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d194      	bne.n	8002cb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	00100002 	.word	0x00100002
 8002dc4:	ffff0000 	.word	0xffff0000

08002dc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d006      	beq.n	8002df2 <I2C_MasterRequestWrite+0x2a>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d003      	beq.n	8002df2 <I2C_MasterRequestWrite+0x2a>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df0:	d108      	bne.n	8002e04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e00b      	b.n	8002e1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	2b12      	cmp	r3, #18
 8002e0a:	d107      	bne.n	8002e1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f84f 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e42:	d103      	bne.n	8002e4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e035      	b.n	8002ebc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e58:	d108      	bne.n	8002e6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5a:	897b      	ldrh	r3, [r7, #10]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e68:	611a      	str	r2, [r3, #16]
 8002e6a:	e01b      	b.n	8002ea4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	11db      	asrs	r3, r3, #7
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f003 0306 	and.w	r3, r3, #6
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f063 030f 	orn	r3, r3, #15
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <I2C_MasterRequestWrite+0xfc>)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f898 	bl	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e010      	b.n	8002ebc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4907      	ldr	r1, [pc, #28]	; (8002ec8 <I2C_MasterRequestWrite+0x100>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f888 	bl	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	00010008 	.word	0x00010008
 8002ec8:	00010002 	.word	0x00010002

08002ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002edc:	e048      	b.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d044      	beq.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee6:	f7ff f9eb 	bl	80022c0 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d139      	bne.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d10d      	bne.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	e00c      	b.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d116      	bne.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e023      	b.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	e00c      	b.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d093      	beq.n	8002ede <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fce:	e071      	b.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fde:	d123      	bne.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ff8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f043 0204 	orr.w	r2, r3, #4
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e067      	b.n	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d041      	beq.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f7ff f946 	bl	80022c0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	d302      	bcc.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d136      	bne.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10c      	bne.n	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e00b      	b.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f043 0220 	orr.w	r2, r3, #32
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e021      	b.n	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	0c1b      	lsrs	r3, r3, #16
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10c      	bne.n	80030d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	43da      	mvns	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4013      	ands	r3, r2
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	e00b      	b.n	80030f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f47f af6d 	bne.w	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800310c:	e034      	b.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f886 	bl	8003220 <I2C_IsAcknowledgeFailed>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e034      	b.n	8003188 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d028      	beq.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003126:	f7ff f8cb 	bl	80022c0 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11d      	bne.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d016      	beq.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e007      	b.n	8003188 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b80      	cmp	r3, #128	; 0x80
 8003184:	d1c3      	bne.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800319c:	e034      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f83e 	bl	8003220 <I2C_IsAcknowledgeFailed>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e034      	b.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d028      	beq.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	f7ff f883 	bl	80022c0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d11d      	bne.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d016      	beq.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e007      	b.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b04      	cmp	r3, #4
 8003214:	d1c3      	bne.n	800319e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d11b      	bne.n	8003270 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003240:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e267      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d075      	beq.n	800338a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800329e:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d00c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032aa:	4b85      	ldr	r3, [pc, #532]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d112      	bne.n	80032dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b6:	4b82      	ldr	r3, [pc, #520]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c2:	d10b      	bne.n	80032dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	4b7e      	ldr	r3, [pc, #504]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d05b      	beq.n	8003388 <HAL_RCC_OscConfig+0x108>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d157      	bne.n	8003388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e242      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCC_OscConfig+0x74>
 80032e6:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a75      	ldr	r2, [pc, #468]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0xb0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x98>
 80032fe:	4b70      	ldr	r3, [pc, #448]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a6f      	ldr	r2, [pc, #444]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6c      	ldr	r2, [pc, #432]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xb0>
 8003318:	4b69      	ldr	r3, [pc, #420]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a68      	ldr	r2, [pc, #416]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b66      	ldr	r3, [pc, #408]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a65      	ldr	r2, [pc, #404]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe ffc2 	bl	80022c0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe ffbe 	bl	80022c0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e207      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0xc0>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe ffae 	bl	80022c0 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe ffaa 	bl	80022c0 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e1f3      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	4b51      	ldr	r3, [pc, #324]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0xe8>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d063      	beq.n	800345e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003396:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a2:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d11c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ae:	4b44      	ldr	r3, [pc, #272]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d116      	bne.n	80033e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RCC_OscConfig+0x152>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e1c7      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d2:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4937      	ldr	r1, [pc, #220]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	e03a      	b.n	800345e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f0:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <HAL_RCC_OscConfig+0x244>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f6:	f7fe ff63 	bl	80022c0 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033fe:	f7fe ff5f 	bl	80022c0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e1a8      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341c:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4925      	ldr	r1, [pc, #148]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
 8003430:	e015      	b.n	800345e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCC_OscConfig+0x244>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe ff42 	bl	80022c0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003440:	f7fe ff3e 	bl	80022c0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e187      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d036      	beq.n	80034d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d016      	beq.n	80034a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <HAL_RCC_OscConfig+0x248>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fe ff22 	bl	80022c0 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003480:	f7fe ff1e 	bl	80022c0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e167      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCC_OscConfig+0x240>)
 8003494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x200>
 800349e:	e01b      	b.n	80034d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_OscConfig+0x248>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a6:	f7fe ff0b 	bl	80022c0 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	e00e      	b.n	80034cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ae:	f7fe ff07 	bl	80022c0 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d907      	bls.n	80034cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e150      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
 80034c0:	40023800 	.word	0x40023800
 80034c4:	42470000 	.word	0x42470000
 80034c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034cc:	4b88      	ldr	r3, [pc, #544]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ea      	bne.n	80034ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8097 	beq.w	8003614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e6:	2300      	movs	r3, #0
 80034e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ea:	4b81      	ldr	r3, [pc, #516]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10f      	bne.n	8003516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	4b7d      	ldr	r3, [pc, #500]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4a7c      	ldr	r2, [pc, #496]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	6413      	str	r3, [r2, #64]	; 0x40
 8003506:	4b7a      	ldr	r3, [pc, #488]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003512:	2301      	movs	r3, #1
 8003514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003516:	4b77      	ldr	r3, [pc, #476]	; (80036f4 <HAL_RCC_OscConfig+0x474>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d118      	bne.n	8003554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003522:	4b74      	ldr	r3, [pc, #464]	; (80036f4 <HAL_RCC_OscConfig+0x474>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a73      	ldr	r2, [pc, #460]	; (80036f4 <HAL_RCC_OscConfig+0x474>)
 8003528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352e:	f7fe fec7 	bl	80022c0 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003536:	f7fe fec3 	bl	80022c0 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e10c      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <HAL_RCC_OscConfig+0x474>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d106      	bne.n	800356a <HAL_RCC_OscConfig+0x2ea>
 800355c:	4b64      	ldr	r3, [pc, #400]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a63      	ldr	r2, [pc, #396]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	e01c      	b.n	80035a4 <HAL_RCC_OscConfig+0x324>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x30c>
 8003572:	4b5f      	ldr	r3, [pc, #380]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	4a5e      	ldr	r2, [pc, #376]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003578:	f043 0304 	orr.w	r3, r3, #4
 800357c:	6713      	str	r3, [r2, #112]	; 0x70
 800357e:	4b5c      	ldr	r3, [pc, #368]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a5b      	ldr	r2, [pc, #364]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0x324>
 800358c:	4b58      	ldr	r3, [pc, #352]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a57      	ldr	r2, [pc, #348]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	4b55      	ldr	r3, [pc, #340]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a54      	ldr	r2, [pc, #336]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800359e:	f023 0304 	bic.w	r3, r3, #4
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d015      	beq.n	80035d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fe fe88 	bl	80022c0 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b4:	f7fe fe84 	bl	80022c0 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e0cb      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ca:	4b49      	ldr	r3, [pc, #292]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0ee      	beq.n	80035b4 <HAL_RCC_OscConfig+0x334>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d8:	f7fe fe72 	bl	80022c0 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fe fe6e 	bl	80022c0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0b5      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f6:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1ee      	bne.n	80035e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003602:	7dfb      	ldrb	r3, [r7, #23]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003608:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	4a38      	ldr	r2, [pc, #224]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 800360e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003612:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80a1 	beq.w	8003760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800361e:	4b34      	ldr	r3, [pc, #208]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b08      	cmp	r3, #8
 8003628:	d05c      	beq.n	80036e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d141      	bne.n	80036b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <HAL_RCC_OscConfig+0x478>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fe fe42 	bl	80022c0 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe fe3e 	bl	80022c0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e087      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	3b01      	subs	r3, #1
 8003678:	041b      	lsls	r3, r3, #16
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	491b      	ldr	r1, [pc, #108]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCC_OscConfig+0x478>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fe17 	bl	80022c0 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003696:	f7fe fe13 	bl	80022c0 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e05c      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x416>
 80036b4:	e054      	b.n	8003760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_RCC_OscConfig+0x478>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fe fe00 	bl	80022c0 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe fdfc 	bl	80022c0 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e045      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_OscConfig+0x470>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x444>
 80036e2:	e03d      	b.n	8003760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d107      	bne.n	80036fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e038      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40007000 	.word	0x40007000
 80036f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_RCC_OscConfig+0x4ec>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d028      	beq.n	800375c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d121      	bne.n	800375c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d11a      	bne.n	800375c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003734:	4293      	cmp	r3, r2
 8003736:	d111      	bne.n	800375c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	085b      	lsrs	r3, r3, #1
 8003744:	3b01      	subs	r3, #1
 8003746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d107      	bne.n	800375c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800

08003770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0cc      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003784:	4b68      	ldr	r3, [pc, #416]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d90c      	bls.n	80037ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0b8      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c4:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a58      	ldr	r2, [pc, #352]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a52      	ldr	r2, [pc, #328]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e8:	4b50      	ldr	r3, [pc, #320]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	494d      	ldr	r1, [pc, #308]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d044      	beq.n	8003890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d119      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e07f      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d003      	beq.n	800382e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	2b03      	cmp	r3, #3
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	4b3f      	ldr	r3, [pc, #252]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e06f      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	4b3b      	ldr	r3, [pc, #236]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e067      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384e:	4b37      	ldr	r3, [pc, #220]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4934      	ldr	r1, [pc, #208]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003860:	f7fe fd2e 	bl	80022c0 <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	e00a      	b.n	800387e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003868:	f7fe fd2a 	bl	80022c0 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e04f      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	4b2b      	ldr	r3, [pc, #172]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 020c 	and.w	r2, r3, #12
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	429a      	cmp	r2, r3
 800388e:	d1eb      	bne.n	8003868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003890:	4b25      	ldr	r3, [pc, #148]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d20c      	bcs.n	80038b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e032      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c4:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4916      	ldr	r1, [pc, #88]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	490e      	ldr	r1, [pc, #56]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038f6:	f000 f821 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	490a      	ldr	r1, [pc, #40]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 8003908:	5ccb      	ldrb	r3, [r1, r3]
 800390a:	fa22 f303 	lsr.w	r3, r2, r3
 800390e:	4a09      	ldr	r2, [pc, #36]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe f894 	bl	8001a44 <HAL_InitTick>

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023c00 	.word	0x40023c00
 800392c:	40023800 	.word	0x40023800
 8003930:	08008b70 	.word	0x08008b70
 8003934:	20000000 	.word	0x20000000
 8003938:	20000004 	.word	0x20000004

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003940:	b090      	sub	sp, #64	; 0x40
 8003942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	637b      	str	r3, [r7, #52]	; 0x34
 8003948:	2300      	movs	r3, #0
 800394a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394c:	2300      	movs	r3, #0
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003954:	4b59      	ldr	r3, [pc, #356]	; (8003abc <HAL_RCC_GetSysClockFreq+0x180>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 030c 	and.w	r3, r3, #12
 800395c:	2b08      	cmp	r3, #8
 800395e:	d00d      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x40>
 8003960:	2b08      	cmp	r3, #8
 8003962:	f200 80a1 	bhi.w	8003aa8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x34>
 800396a:	2b04      	cmp	r3, #4
 800396c:	d003      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x3a>
 800396e:	e09b      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003970:	4b53      	ldr	r3, [pc, #332]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003974:	e09b      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003976:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800397a:	e098      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800397c:	4b4f      	ldr	r3, [pc, #316]	; (8003abc <HAL_RCC_GetSysClockFreq+0x180>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003986:	4b4d      	ldr	r3, [pc, #308]	; (8003abc <HAL_RCC_GetSysClockFreq+0x180>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d028      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003992:	4b4a      	ldr	r3, [pc, #296]	; (8003abc <HAL_RCC_GetSysClockFreq+0x180>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	099b      	lsrs	r3, r3, #6
 8003998:	2200      	movs	r2, #0
 800399a:	623b      	str	r3, [r7, #32]
 800399c:	627a      	str	r2, [r7, #36]	; 0x24
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039a4:	2100      	movs	r1, #0
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039a8:	fb03 f201 	mul.w	r2, r3, r1
 80039ac:	2300      	movs	r3, #0
 80039ae:	fb00 f303 	mul.w	r3, r0, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	4a43      	ldr	r2, [pc, #268]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039b6:	fba0 1202 	umull	r1, r2, r0, r2
 80039ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039bc:	460a      	mov	r2, r1
 80039be:	62ba      	str	r2, [r7, #40]	; 0x28
 80039c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c2:	4413      	add	r3, r2
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c8:	2200      	movs	r2, #0
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	61fa      	str	r2, [r7, #28]
 80039ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039d6:	f7fd f851 	bl	8000a7c <__aeabi_uldivmod>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4613      	mov	r3, r2
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e2:	e053      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e4:	4b35      	ldr	r3, [pc, #212]	; (8003abc <HAL_RCC_GetSysClockFreq+0x180>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	2200      	movs	r2, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	617a      	str	r2, [r7, #20]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039f6:	f04f 0b00 	mov.w	fp, #0
 80039fa:	4652      	mov	r2, sl
 80039fc:	465b      	mov	r3, fp
 80039fe:	f04f 0000 	mov.w	r0, #0
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	0159      	lsls	r1, r3, #5
 8003a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a0c:	0150      	lsls	r0, r2, #5
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	ebb2 080a 	subs.w	r8, r2, sl
 8003a16:	eb63 090b 	sbc.w	r9, r3, fp
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a2e:	ebb2 0408 	subs.w	r4, r2, r8
 8003a32:	eb63 0509 	sbc.w	r5, r3, r9
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	00eb      	lsls	r3, r5, #3
 8003a40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a44:	00e2      	lsls	r2, r4, #3
 8003a46:	4614      	mov	r4, r2
 8003a48:	461d      	mov	r5, r3
 8003a4a:	eb14 030a 	adds.w	r3, r4, sl
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	eb45 030b 	adc.w	r3, r5, fp
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a62:	4629      	mov	r1, r5
 8003a64:	028b      	lsls	r3, r1, #10
 8003a66:	4621      	mov	r1, r4
 8003a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	028a      	lsls	r2, r1, #10
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a76:	2200      	movs	r2, #0
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	60fa      	str	r2, [r7, #12]
 8003a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a80:	f7fc fffc 	bl	8000a7c <__aeabi_uldivmod>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4613      	mov	r3, r2
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aa6:	e002      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aaa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3740      	adds	r7, #64	; 0x40
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	00f42400 	.word	0x00f42400
 8003ac4:	017d7840 	.word	0x017d7840

08003ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000000 	.word	0x20000000

08003ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ae4:	f7ff fff0 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0a9b      	lsrs	r3, r3, #10
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4903      	ldr	r1, [pc, #12]	; (8003b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800
 8003b04:	08008b80 	.word	0x08008b80

08003b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b0c:	f7ff ffdc 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	0b5b      	lsrs	r3, r3, #13
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	08008b80 	.word	0x08008b80

08003b30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b40:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_RCC_GetClockConfig+0x5c>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0203 	and.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <HAL_RCC_GetClockConfig+0x5c>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <HAL_RCC_GetClockConfig+0x5c>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_GetClockConfig+0x5c>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	08db      	lsrs	r3, r3, #3
 8003b6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b72:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <HAL_RCC_GetClockConfig+0x60>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0207 	and.w	r2, r3, #7
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	601a      	str	r2, [r3, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40023c00 	.word	0x40023c00

08003b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e041      	b.n	8003c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fe f940 	bl	8001e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f000 fe86 	bl	80048e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d001      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e044      	b.n	8003cd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d018      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c76:	d013      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00e      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a19      	ldr	r2, [pc, #100]	; (8003cec <HAL_TIM_Base_Start_IT+0xb8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d009      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d004      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d111      	bne.n	8003cc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d010      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0201 	orr.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc2:	e007      	b.n	8003cd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800
 8003cf0:	40000c00 	.word	0x40000c00
 8003cf4:	40014000 	.word	0x40014000

08003cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e041      	b.n	8003d8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f839 	bl	8003d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f000 fdd4 	bl	80048e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_TIM_PWM_Start+0x24>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e022      	b.n	8003e16 <HAL_TIM_PWM_Start+0x6a>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d109      	bne.n	8003dea <HAL_TIM_PWM_Start+0x3e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	e015      	b.n	8003e16 <HAL_TIM_PWM_Start+0x6a>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d109      	bne.n	8003e04 <HAL_TIM_PWM_Start+0x58>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e008      	b.n	8003e16 <HAL_TIM_PWM_Start+0x6a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e068      	b.n	8003ef0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <HAL_TIM_PWM_Start+0x82>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e2c:	e013      	b.n	8003e56 <HAL_TIM_PWM_Start+0xaa>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_PWM_Start+0x92>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e3c:	e00b      	b.n	8003e56 <HAL_TIM_PWM_Start+0xaa>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Start+0xa2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e4c:	e003      	b.n	8003e56 <HAL_TIM_PWM_Start+0xaa>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 f910 	bl	8005084 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a23      	ldr	r2, [pc, #140]	; (8003ef8 <HAL_TIM_PWM_Start+0x14c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d107      	bne.n	8003e7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <HAL_TIM_PWM_Start+0x14c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d018      	beq.n	8003eba <HAL_TIM_PWM_Start+0x10e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e90:	d013      	beq.n	8003eba <HAL_TIM_PWM_Start+0x10e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a19      	ldr	r2, [pc, #100]	; (8003efc <HAL_TIM_PWM_Start+0x150>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_TIM_PWM_Start+0x10e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_TIM_PWM_Start+0x154>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d009      	beq.n	8003eba <HAL_TIM_PWM_Start+0x10e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <HAL_TIM_PWM_Start+0x158>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_TIM_PWM_Start+0x10e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <HAL_TIM_PWM_Start+0x15c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d111      	bne.n	8003ede <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b06      	cmp	r3, #6
 8003eca:	d010      	beq.n	8003eee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	e007      	b.n	8003eee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40000800 	.word	0x40000800
 8003f04:	40000c00 	.word	0x40000c00
 8003f08:	40014000 	.word	0x40014000

08003f0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e041      	b.n	8003fa2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f839 	bl	8003faa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f000 fcca 	bl	80048e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_IC_Start_IT+0x1e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	e013      	b.n	8004006 <HAL_TIM_IC_Start_IT+0x46>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_IC_Start_IT+0x2e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	e00b      	b.n	8004006 <HAL_TIM_IC_Start_IT+0x46>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_IC_Start_IT+0x3e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e003      	b.n	8004006 <HAL_TIM_IC_Start_IT+0x46>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004004:	b2db      	uxtb	r3, r3
 8004006:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <HAL_TIM_IC_Start_IT+0x58>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e013      	b.n	8004040 <HAL_TIM_IC_Start_IT+0x80>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d104      	bne.n	8004028 <HAL_TIM_IC_Start_IT+0x68>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e00b      	b.n	8004040 <HAL_TIM_IC_Start_IT+0x80>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b08      	cmp	r3, #8
 800402c:	d104      	bne.n	8004038 <HAL_TIM_IC_Start_IT+0x78>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e003      	b.n	8004040 <HAL_TIM_IC_Start_IT+0x80>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800403e:	b2db      	uxtb	r3, r3
 8004040:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004042:	7bbb      	ldrb	r3, [r7, #14]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d102      	bne.n	800404e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004048:	7b7b      	ldrb	r3, [r7, #13]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d001      	beq.n	8004052 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e0c2      	b.n	80041d8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d104      	bne.n	8004062 <HAL_TIM_IC_Start_IT+0xa2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004060:	e013      	b.n	800408a <HAL_TIM_IC_Start_IT+0xca>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b04      	cmp	r3, #4
 8004066:	d104      	bne.n	8004072 <HAL_TIM_IC_Start_IT+0xb2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004070:	e00b      	b.n	800408a <HAL_TIM_IC_Start_IT+0xca>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d104      	bne.n	8004082 <HAL_TIM_IC_Start_IT+0xc2>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004080:	e003      	b.n	800408a <HAL_TIM_IC_Start_IT+0xca>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <HAL_TIM_IC_Start_IT+0xda>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004098:	e013      	b.n	80040c2 <HAL_TIM_IC_Start_IT+0x102>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d104      	bne.n	80040aa <HAL_TIM_IC_Start_IT+0xea>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a8:	e00b      	b.n	80040c2 <HAL_TIM_IC_Start_IT+0x102>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_IC_Start_IT+0xfa>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b8:	e003      	b.n	80040c2 <HAL_TIM_IC_Start_IT+0x102>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d841      	bhi.n	800414c <HAL_TIM_IC_Start_IT+0x18c>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <HAL_TIM_IC_Start_IT+0x110>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	08004105 	.word	0x08004105
 80040d4:	0800414d 	.word	0x0800414d
 80040d8:	0800414d 	.word	0x0800414d
 80040dc:	0800414d 	.word	0x0800414d
 80040e0:	08004117 	.word	0x08004117
 80040e4:	0800414d 	.word	0x0800414d
 80040e8:	0800414d 	.word	0x0800414d
 80040ec:	0800414d 	.word	0x0800414d
 80040f0:	08004129 	.word	0x08004129
 80040f4:	0800414d 	.word	0x0800414d
 80040f8:	0800414d 	.word	0x0800414d
 80040fc:	0800414d 	.word	0x0800414d
 8004100:	0800413b 	.word	0x0800413b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0202 	orr.w	r2, r2, #2
 8004112:	60da      	str	r2, [r3, #12]
      break;
 8004114:	e01d      	b.n	8004152 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0204 	orr.w	r2, r2, #4
 8004124:	60da      	str	r2, [r3, #12]
      break;
 8004126:	e014      	b.n	8004152 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0208 	orr.w	r2, r2, #8
 8004136:	60da      	str	r2, [r3, #12]
      break;
 8004138:	e00b      	b.n	8004152 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0210 	orr.w	r2, r2, #16
 8004148:	60da      	str	r2, [r3, #12]
      break;
 800414a:	e002      	b.n	8004152 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      break;
 8004150:	bf00      	nop
  }

  if (status == HAL_OK)
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d13e      	bne.n	80041d6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2201      	movs	r2, #1
 800415e:	6839      	ldr	r1, [r7, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 ff8f 	bl	8005084 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <HAL_TIM_IC_Start_IT+0x220>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d018      	beq.n	80041a2 <HAL_TIM_IC_Start_IT+0x1e2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d013      	beq.n	80041a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a19      	ldr	r2, [pc, #100]	; (80041e4 <HAL_TIM_IC_Start_IT+0x224>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_TIM_IC_Start_IT+0x1e2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <HAL_TIM_IC_Start_IT+0x228>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_TIM_IC_Start_IT+0x1e2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a16      	ldr	r2, [pc, #88]	; (80041ec <HAL_TIM_IC_Start_IT+0x22c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_TIM_IC_Start_IT+0x1e2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <HAL_TIM_IC_Start_IT+0x230>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d111      	bne.n	80041c6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d010      	beq.n	80041d6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c4:	e007      	b.n	80041d6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	40014000 	.word	0x40014000

080041f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d020      	beq.n	8004258 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0202 	mvn.w	r2, #2
 8004228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fc fe86 	bl	8000f50 <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fb2e 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fb35 	bl	80048bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d020      	beq.n	80042a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01b      	beq.n	80042a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0204 	mvn.w	r2, #4
 8004274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc fe60 	bl	8000f50 <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fb08 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fb0f 	bl	80048bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d020      	beq.n	80042f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0208 	mvn.w	r2, #8
 80042c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2204      	movs	r2, #4
 80042c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc fe3a 	bl	8000f50 <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fae2 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fae9 	bl	80048bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d020      	beq.n	800433c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0210 	mvn.w	r2, #16
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2208      	movs	r2, #8
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc fe14 	bl	8000f50 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fabc 	bl	80048a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fac3 	bl	80048bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0201 	mvn.w	r2, #1
 8004358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fd fb2e 	bl	80019bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800437c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 ff1e 	bl	80051c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00c      	beq.n	80043a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa94 	bl	80048d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00c      	beq.n	80043cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0220 	mvn.w	r2, #32
 80043c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fef0 	bl	80051ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e088      	b.n	8004504 <HAL_TIM_IC_ConfigChannel+0x130>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11b      	bne.n	8004438 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004410:	f000 fc80 	bl	8004d14 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 020c 	bic.w	r2, r2, #12
 8004422:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6999      	ldr	r1, [r3, #24]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	619a      	str	r2, [r3, #24]
 8004436:	e060      	b.n	80044fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b04      	cmp	r3, #4
 800443c:	d11c      	bne.n	8004478 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800444e:	f000 fcf8 	bl	8004e42 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004460:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6999      	ldr	r1, [r3, #24]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	021a      	lsls	r2, r3, #8
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	619a      	str	r2, [r3, #24]
 8004476:	e040      	b.n	80044fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b08      	cmp	r3, #8
 800447c:	d11b      	bne.n	80044b6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800448e:	f000 fd45 	bl	8004f1c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 020c 	bic.w	r2, r2, #12
 80044a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69d9      	ldr	r1, [r3, #28]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	61da      	str	r2, [r3, #28]
 80044b4:	e021      	b.n	80044fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d11c      	bne.n	80044f6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80044cc:	f000 fd62 	bl	8004f94 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69d9      	ldr	r1, [r3, #28]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	021a      	lsls	r2, r3, #8
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	61da      	str	r2, [r3, #28]
 80044f4:	e001      	b.n	80044fa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004502:	7dfb      	ldrb	r3, [r7, #23]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004526:	2302      	movs	r3, #2
 8004528:	e0ae      	b.n	8004688 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b0c      	cmp	r3, #12
 8004536:	f200 809f 	bhi.w	8004678 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800453a:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004575 	.word	0x08004575
 8004544:	08004679 	.word	0x08004679
 8004548:	08004679 	.word	0x08004679
 800454c:	08004679 	.word	0x08004679
 8004550:	080045b5 	.word	0x080045b5
 8004554:	08004679 	.word	0x08004679
 8004558:	08004679 	.word	0x08004679
 800455c:	08004679 	.word	0x08004679
 8004560:	080045f7 	.word	0x080045f7
 8004564:	08004679 	.word	0x08004679
 8004568:	08004679 	.word	0x08004679
 800456c:	08004679 	.word	0x08004679
 8004570:	08004637 	.word	0x08004637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fa3e 	bl	80049fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0208 	orr.w	r2, r2, #8
 800458e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0204 	bic.w	r2, r2, #4
 800459e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6999      	ldr	r1, [r3, #24]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	619a      	str	r2, [r3, #24]
      break;
 80045b2:	e064      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fa84 	bl	8004ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	021a      	lsls	r2, r3, #8
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	619a      	str	r2, [r3, #24]
      break;
 80045f4:	e043      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 facf 	bl	8004ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0208 	orr.w	r2, r2, #8
 8004610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0204 	bic.w	r2, r2, #4
 8004620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69d9      	ldr	r1, [r3, #28]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	61da      	str	r2, [r3, #28]
      break;
 8004634:	e023      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fb19 	bl	8004c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69d9      	ldr	r1, [r3, #28]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	61da      	str	r2, [r3, #28]
      break;
 8004676:	e002      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	75fb      	strb	r3, [r7, #23]
      break;
 800467c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIM_ConfigClockSource+0x1c>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e0b4      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x186>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e4:	d03e      	beq.n	8004764 <HAL_TIM_ConfigClockSource+0xd4>
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ea:	f200 8087 	bhi.w	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	f000 8086 	beq.w	8004802 <HAL_TIM_ConfigClockSource+0x172>
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fa:	d87f      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 80046fc:	2b70      	cmp	r3, #112	; 0x70
 80046fe:	d01a      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0xa6>
 8004700:	2b70      	cmp	r3, #112	; 0x70
 8004702:	d87b      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 8004704:	2b60      	cmp	r3, #96	; 0x60
 8004706:	d050      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x11a>
 8004708:	2b60      	cmp	r3, #96	; 0x60
 800470a:	d877      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b50      	cmp	r3, #80	; 0x50
 800470e:	d03c      	beq.n	800478a <HAL_TIM_ConfigClockSource+0xfa>
 8004710:	2b50      	cmp	r3, #80	; 0x50
 8004712:	d873      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d058      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x13a>
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	d86f      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b30      	cmp	r3, #48	; 0x30
 800471e:	d064      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x15a>
 8004720:	2b30      	cmp	r3, #48	; 0x30
 8004722:	d86b      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b20      	cmp	r3, #32
 8004726:	d060      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x15a>
 8004728:	2b20      	cmp	r3, #32
 800472a:	d867      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d05c      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x15a>
 8004730:	2b10      	cmp	r3, #16
 8004732:	d05a      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x15a>
 8004734:	e062      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004746:	f000 fc7d 	bl	8005044 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004758:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	609a      	str	r2, [r3, #8]
      break;
 8004762:	e04f      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004774:	f000 fc66 	bl	8005044 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004786:	609a      	str	r2, [r3, #8]
      break;
 8004788:	e03c      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004796:	461a      	mov	r2, r3
 8004798:	f000 fb24 	bl	8004de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2150      	movs	r1, #80	; 0x50
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fc33 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 80047a8:	e02c      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047b6:	461a      	mov	r2, r3
 80047b8:	f000 fb80 	bl	8004ebc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2160      	movs	r1, #96	; 0x60
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fc23 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 80047c8:	e01c      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	461a      	mov	r2, r3
 80047d8:	f000 fb04 	bl	8004de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2140      	movs	r1, #64	; 0x40
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fc13 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 80047e8:	e00c      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f000 fc0a 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 80047fa:	e003      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004800:	e000      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004814:	7bfb      	ldrb	r3, [r7, #15]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d831      	bhi.n	8004898 <HAL_TIM_ReadCapturedValue+0x78>
 8004834:	a201      	add	r2, pc, #4	; (adr r2, 800483c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004871 	.word	0x08004871
 8004840:	08004899 	.word	0x08004899
 8004844:	08004899 	.word	0x08004899
 8004848:	08004899 	.word	0x08004899
 800484c:	0800487b 	.word	0x0800487b
 8004850:	08004899 	.word	0x08004899
 8004854:	08004899 	.word	0x08004899
 8004858:	08004899 	.word	0x08004899
 800485c:	08004885 	.word	0x08004885
 8004860:	08004899 	.word	0x08004899
 8004864:	08004899 	.word	0x08004899
 8004868:	08004899 	.word	0x08004899
 800486c:	0800488f 	.word	0x0800488f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	60fb      	str	r3, [r7, #12]

      break;
 8004878:	e00f      	b.n	800489a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	60fb      	str	r3, [r7, #12]

      break;
 8004882:	e00a      	b.n	800489a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	60fb      	str	r3, [r7, #12]

      break;
 800488c:	e005      	b.n	800489a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	60fb      	str	r3, [r7, #12]

      break;
 8004896:	e000      	b.n	800489a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004898:	bf00      	nop
  }

  return tmpreg;
 800489a:	68fb      	ldr	r3, [r7, #12]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <TIM_Base_SetConfig+0xfc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00f      	beq.n	800491c <TIM_Base_SetConfig+0x38>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004902:	d00b      	beq.n	800491c <TIM_Base_SetConfig+0x38>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a37      	ldr	r2, [pc, #220]	; (80049e4 <TIM_Base_SetConfig+0x100>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d007      	beq.n	800491c <TIM_Base_SetConfig+0x38>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a36      	ldr	r2, [pc, #216]	; (80049e8 <TIM_Base_SetConfig+0x104>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0x38>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a35      	ldr	r2, [pc, #212]	; (80049ec <TIM_Base_SetConfig+0x108>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <TIM_Base_SetConfig+0xfc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01b      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d017      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a28      	ldr	r2, [pc, #160]	; (80049e4 <TIM_Base_SetConfig+0x100>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <TIM_Base_SetConfig+0x104>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00f      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a26      	ldr	r2, [pc, #152]	; (80049ec <TIM_Base_SetConfig+0x108>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00b      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a25      	ldr	r2, [pc, #148]	; (80049f0 <TIM_Base_SetConfig+0x10c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a24      	ldr	r2, [pc, #144]	; (80049f4 <TIM_Base_SetConfig+0x110>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_Base_SetConfig+0x8a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a23      	ldr	r2, [pc, #140]	; (80049f8 <TIM_Base_SetConfig+0x114>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d108      	bne.n	8004980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a0e      	ldr	r2, [pc, #56]	; (80049e0 <TIM_Base_SetConfig+0xfc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d103      	bne.n	80049b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d105      	bne.n	80049d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f023 0201 	bic.w	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	611a      	str	r2, [r3, #16]
  }
}
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40014400 	.word	0x40014400
 80049f8:	40014800 	.word	0x40014800

080049fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f023 0201 	bic.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 0302 	bic.w	r3, r3, #2
 8004a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <TIM_OC1_SetConfig+0xc8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10c      	bne.n	8004a72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0308 	bic.w	r3, r3, #8
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a13      	ldr	r2, [pc, #76]	; (8004ac4 <TIM_OC1_SetConfig+0xc8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d111      	bne.n	8004a9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	621a      	str	r2, [r3, #32]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40010000 	.word	0x40010000

08004ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f023 0210 	bic.w	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0320 	bic.w	r3, r3, #32
 8004b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1e      	ldr	r2, [pc, #120]	; (8004b9c <TIM_OC2_SetConfig+0xd4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10d      	bne.n	8004b44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <TIM_OC2_SetConfig+0xd4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d113      	bne.n	8004b74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40010000 	.word	0x40010000

08004ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <TIM_OC3_SetConfig+0xd0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10d      	bne.n	8004c1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <TIM_OC3_SetConfig+0xd0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d113      	bne.n	8004c4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40010000 	.word	0x40010000

08004c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	031b      	lsls	r3, r3, #12
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a10      	ldr	r2, [pc, #64]	; (8004d10 <TIM_OC4_SetConfig+0x9c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d109      	bne.n	8004ce8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	019b      	lsls	r3, r3, #6
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	621a      	str	r2, [r3, #32]
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000

08004d14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	f023 0201 	bic.w	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a24      	ldr	r2, [pc, #144]	; (8004dd0 <TIM_TI1_SetConfig+0xbc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d013      	beq.n	8004d6a <TIM_TI1_SetConfig+0x56>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d00f      	beq.n	8004d6a <TIM_TI1_SetConfig+0x56>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4a21      	ldr	r2, [pc, #132]	; (8004dd4 <TIM_TI1_SetConfig+0xc0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <TIM_TI1_SetConfig+0x56>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a20      	ldr	r2, [pc, #128]	; (8004dd8 <TIM_TI1_SetConfig+0xc4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d007      	beq.n	8004d6a <TIM_TI1_SetConfig+0x56>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <TIM_TI1_SetConfig+0xc8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_TI1_SetConfig+0x56>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <TIM_TI1_SetConfig+0xcc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <TIM_TI1_SetConfig+0x5a>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <TIM_TI1_SetConfig+0x5c>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	e003      	b.n	8004d8e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f023 030a 	bic.w	r3, r3, #10
 8004da8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f003 030a 	and.w	r3, r3, #10
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40014000 	.word	0x40014000

08004de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f023 030a 	bic.w	r3, r3, #10
 8004e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b087      	sub	sp, #28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
 8004e4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0210 	bic.w	r2, r3, #16
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	031b      	lsls	r3, r3, #12
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	621a      	str	r2, [r3, #32]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0210 	bic.w	r2, r3, #16
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	031b      	lsls	r3, r3, #12
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	621a      	str	r2, [r3, #32]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f023 0303 	bic.w	r3, r3, #3
 8004f48:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f58:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	621a      	str	r2, [r3, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fd2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	031b      	lsls	r3, r3, #12
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004fe6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	031b      	lsls	r3, r3, #12
 8004fec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	f043 0307 	orr.w	r3, r3, #7
 8005030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	609a      	str	r2, [r3, #8]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800505e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	021a      	lsls	r2, r3, #8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	431a      	orrs	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4313      	orrs	r3, r2
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	609a      	str	r2, [r3, #8]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	2201      	movs	r2, #1
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1a      	ldr	r2, [r3, #32]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	401a      	ands	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1a      	ldr	r2, [r3, #32]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	fa01 f303 	lsl.w	r3, r1, r3
 80050bc:	431a      	orrs	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e050      	b.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1c      	ldr	r2, [pc, #112]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d013      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a18      	ldr	r2, [pc, #96]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d10c      	bne.n	8005178 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	4313      	orrs	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40014000 	.word	0x40014000

080051ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e042      	b.n	800526c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fc ff52 	bl	80020a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2224      	movs	r2, #36	; 0x24
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fd11 	bl	8005c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800522c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695a      	ldr	r2, [r3, #20]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800523c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800524c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b20      	cmp	r3, #32
 800528c:	d121      	bne.n	80052d2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_UART_Transmit_IT+0x26>
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e01a      	b.n	80052d4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	88fa      	ldrh	r2, [r7, #6]
 80052ae:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2221      	movs	r2, #33	; 0x21
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052cc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d112      	bne.n	8005320 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_UART_Receive_IT+0x26>
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e00b      	b.n	8005322 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	461a      	mov	r2, r3
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 faba 	bl	8005890 <UART_Start_Receive_IT>
 800531c:	4603      	mov	r3, r0
 800531e:	e000      	b.n	8005322 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b0ba      	sub	sp, #232	; 0xe8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800536a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10f      	bne.n	8005392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <HAL_UART_IRQHandler+0x66>
 800537e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fb99 	bl	8005ac2 <UART_Receive_IT>
      return;
 8005390:	e25b      	b.n	800584a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80de 	beq.w	8005558 <HAL_UART_IRQHandler+0x22c>
 800539c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80d1 	beq.w	8005558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00b      	beq.n	80053da <HAL_UART_IRQHandler+0xae>
 80053c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	f043 0201 	orr.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <HAL_UART_IRQHandler+0xd2>
 80053e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f6:	f043 0202 	orr.w	r2, r3, #2
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <HAL_UART_IRQHandler+0xf6>
 800540a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	f043 0204 	orr.w	r2, r3, #4
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d011      	beq.n	8005452 <HAL_UART_IRQHandler+0x126>
 800542e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800543a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	f043 0208 	orr.w	r2, r3, #8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 81f2 	beq.w	8005840 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_UART_IRQHandler+0x14e>
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fb24 	bl	8005ac2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005484:	2b40      	cmp	r3, #64	; 0x40
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <HAL_UART_IRQHandler+0x17a>
 800549e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d04f      	beq.n	8005546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa2c 	bl	8005904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d141      	bne.n	800553e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3314      	adds	r3, #20
 80054c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3314      	adds	r3, #20
 80054e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1d9      	bne.n	80054ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d013      	beq.n	8005536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	4a7e      	ldr	r2, [pc, #504]	; (800570c <HAL_UART_IRQHandler+0x3e0>)
 8005514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551a:	4618      	mov	r0, r3
 800551c:	f7fd f852 	bl	80025c4 <HAL_DMA_Abort_IT>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d016      	beq.n	8005554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005530:	4610      	mov	r0, r2
 8005532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	e00e      	b.n	8005554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f994 	bl	8005864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	e00a      	b.n	8005554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f990 	bl	8005864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005544:	e006      	b.n	8005554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f98c 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005552:	e175      	b.n	8005840 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005554:	bf00      	nop
    return;
 8005556:	e173      	b.n	8005840 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	2b01      	cmp	r3, #1
 800555e:	f040 814f 	bne.w	8005800 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8148 	beq.w	8005800 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8141 	beq.w	8005800 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b40      	cmp	r3, #64	; 0x40
 80055a0:	f040 80b6 	bne.w	8005710 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8145 	beq.w	8005844 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055c2:	429a      	cmp	r2, r3
 80055c4:	f080 813e 	bcs.w	8005844 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055da:	f000 8088 	beq.w	80056ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800560a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800560e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1d9      	bne.n	80055de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3314      	adds	r3, #20
 8005630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800563a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3314      	adds	r3, #20
 800564a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800564e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e1      	bne.n	800562a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3314      	adds	r3, #20
 800566c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3314      	adds	r3, #20
 8005686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800568a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800568c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e3      	bne.n	8005666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056be:	f023 0310 	bic.w	r3, r3, #16
 80056c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	330c      	adds	r3, #12
 80056cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80056d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e3      	bne.n	80056ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fc fefb 	bl	80024e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	b29b      	uxth	r3, r3
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f8b7 	bl	8005878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800570a:	e09b      	b.n	8005844 <HAL_UART_IRQHandler+0x518>
 800570c:	080059cb 	.word	0x080059cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005718:	b29b      	uxth	r3, r3
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 808e 	beq.w	8005848 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800572c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8089 	beq.w	8005848 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800574c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800575a:	647a      	str	r2, [r7, #68]	; 0x44
 800575c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e3      	bne.n	8005736 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	623b      	str	r3, [r7, #32]
   return(result);
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f023 0301 	bic.w	r3, r3, #1
 8005784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005792:	633a      	str	r2, [r7, #48]	; 0x30
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e3      	bne.n	800576e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0310 	bic.w	r3, r3, #16
 80057ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	330c      	adds	r3, #12
 80057d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057d8:	61fa      	str	r2, [r7, #28]
 80057da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	617b      	str	r3, [r7, #20]
   return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e3      	bne.n	80057b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f83d 	bl	8005878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057fe:	e023      	b.n	8005848 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_UART_IRQHandler+0x4f4>
 800580c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f8ea 	bl	80059f2 <UART_Transmit_IT>
    return;
 800581e:	e014      	b.n	800584a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00e      	beq.n	800584a <HAL_UART_IRQHandler+0x51e>
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f92a 	bl	8005a92 <UART_EndTransmit_IT>
    return;
 800583e:	e004      	b.n	800584a <HAL_UART_IRQHandler+0x51e>
    return;
 8005840:	bf00      	nop
 8005842:	e002      	b.n	800584a <HAL_UART_IRQHandler+0x51e>
      return;
 8005844:	bf00      	nop
 8005846:	e000      	b.n	800584a <HAL_UART_IRQHandler+0x51e>
      return;
 8005848:	bf00      	nop
  }
}
 800584a:	37e8      	adds	r7, #232	; 0xe8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2222      	movs	r2, #34	; 0x22
 80058ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0220 	orr.w	r2, r2, #32
 80058f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b095      	sub	sp, #84	; 0x54
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800592c:	643a      	str	r2, [r7, #64]	; 0x40
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e5      	bne.n	800590c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	64bb      	str	r3, [r7, #72]	; 0x48
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e5      	bne.n	8005940 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	2b01      	cmp	r3, #1
 800597a:	d119      	bne.n	80059b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	60bb      	str	r3, [r7, #8]
   return(result);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f023 0310 	bic.w	r3, r3, #16
 8005992:	647b      	str	r3, [r7, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800599c:	61ba      	str	r2, [r7, #24]
 800599e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6979      	ldr	r1, [r7, #20]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	613b      	str	r3, [r7, #16]
   return(result);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e5      	bne.n	800597c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059be:	bf00      	nop
 80059c0:	3754      	adds	r7, #84	; 0x54
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff ff3d 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b21      	cmp	r3, #33	; 0x21
 8005a04:	d13e      	bne.n	8005a84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0e:	d114      	bne.n	8005a3a <UART_Transmit_IT+0x48>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d110      	bne.n	8005a3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	1c9a      	adds	r2, r3, #2
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	621a      	str	r2, [r3, #32]
 8005a38:	e008      	b.n	8005a4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	1c59      	adds	r1, r3, #1
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6211      	str	r1, [r2, #32]
 8005a44:	781a      	ldrb	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10f      	bne.n	8005a80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	e000      	b.n	8005a86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a84:	2302      	movs	r3, #2
  }
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fecc 	bl	8005850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b08c      	sub	sp, #48	; 0x30
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b22      	cmp	r3, #34	; 0x22
 8005ad4:	f040 80ae 	bne.w	8005c34 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae0:	d117      	bne.n	8005b12 <UART_Receive_IT+0x50>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d113      	bne.n	8005b12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	1c9a      	adds	r2, r3, #2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b10:	e026      	b.n	8005b60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b24:	d007      	beq.n	8005b36 <UART_Receive_IT+0x74>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <UART_Receive_IT+0x82>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	e008      	b.n	8005b56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d15d      	bne.n	8005c30 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0220 	bic.w	r2, r2, #32
 8005b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d135      	bne.n	8005c26 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	330c      	adds	r3, #12
 8005bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f023 0310 	bic.w	r3, r3, #16
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be0:	623a      	str	r2, [r7, #32]
 8005be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	69f9      	ldr	r1, [r7, #28]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e5      	bne.n	8005bc0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0310 	and.w	r3, r3, #16
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d10a      	bne.n	8005c18 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff fe2a 	bl	8005878 <HAL_UARTEx_RxEventCallback>
 8005c24:	e002      	b.n	8005c2c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fb fb02 	bl	8001230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e002      	b.n	8005c36 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	e000      	b.n	8005c36 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c34:	2302      	movs	r3, #2
  }
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3730      	adds	r7, #48	; 0x30
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c44:	b0c0      	sub	sp, #256	; 0x100
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5c:	68d9      	ldr	r1, [r3, #12]
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	ea40 0301 	orr.w	r3, r0, r1
 8005c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c98:	f021 010c 	bic.w	r1, r1, #12
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cba:	6999      	ldr	r1, [r3, #24]
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	ea40 0301 	orr.w	r3, r0, r1
 8005cc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b8f      	ldr	r3, [pc, #572]	; (8005f0c <UART_SetConfig+0x2cc>)
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d005      	beq.n	8005ce0 <UART_SetConfig+0xa0>
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b8d      	ldr	r3, [pc, #564]	; (8005f10 <UART_SetConfig+0x2d0>)
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d104      	bne.n	8005cea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ce0:	f7fd ff12 	bl	8003b08 <HAL_RCC_GetPCLK2Freq>
 8005ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ce8:	e003      	b.n	8005cf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cea:	f7fd fef9 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8005cee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfc:	f040 810c 	bne.w	8005f18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d12:	4622      	mov	r2, r4
 8005d14:	462b      	mov	r3, r5
 8005d16:	1891      	adds	r1, r2, r2
 8005d18:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d1a:	415b      	adcs	r3, r3
 8005d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d22:	4621      	mov	r1, r4
 8005d24:	eb12 0801 	adds.w	r8, r2, r1
 8005d28:	4629      	mov	r1, r5
 8005d2a:	eb43 0901 	adc.w	r9, r3, r1
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d42:	4690      	mov	r8, r2
 8005d44:	4699      	mov	r9, r3
 8005d46:	4623      	mov	r3, r4
 8005d48:	eb18 0303 	adds.w	r3, r8, r3
 8005d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d50:	462b      	mov	r3, r5
 8005d52:	eb49 0303 	adc.w	r3, r9, r3
 8005d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d6e:	460b      	mov	r3, r1
 8005d70:	18db      	adds	r3, r3, r3
 8005d72:	653b      	str	r3, [r7, #80]	; 0x50
 8005d74:	4613      	mov	r3, r2
 8005d76:	eb42 0303 	adc.w	r3, r2, r3
 8005d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d84:	f7fa fe7a 	bl	8000a7c <__aeabi_uldivmod>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4b61      	ldr	r3, [pc, #388]	; (8005f14 <UART_SetConfig+0x2d4>)
 8005d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	011c      	lsls	r4, r3, #4
 8005d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005da0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005da4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	1891      	adds	r1, r2, r2
 8005dae:	64b9      	str	r1, [r7, #72]	; 0x48
 8005db0:	415b      	adcs	r3, r3
 8005db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005db8:	4641      	mov	r1, r8
 8005dba:	eb12 0a01 	adds.w	sl, r2, r1
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	eb43 0b01 	adc.w	fp, r3, r1
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dd8:	4692      	mov	sl, r2
 8005dda:	469b      	mov	fp, r3
 8005ddc:	4643      	mov	r3, r8
 8005dde:	eb1a 0303 	adds.w	r3, sl, r3
 8005de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005de6:	464b      	mov	r3, r9
 8005de8:	eb4b 0303 	adc.w	r3, fp, r3
 8005dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e04:	460b      	mov	r3, r1
 8005e06:	18db      	adds	r3, r3, r3
 8005e08:	643b      	str	r3, [r7, #64]	; 0x40
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	eb42 0303 	adc.w	r3, r2, r3
 8005e10:	647b      	str	r3, [r7, #68]	; 0x44
 8005e12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e1a:	f7fa fe2f 	bl	8000a7c <__aeabi_uldivmod>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <UART_SetConfig+0x2d4>)
 8005e26:	fba3 2301 	umull	r2, r3, r3, r1
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	2264      	movs	r2, #100	; 0x64
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
 8005e32:	1acb      	subs	r3, r1, r3
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e3a:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <UART_SetConfig+0x2d4>)
 8005e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e48:	441c      	add	r4, r3
 8005e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	1891      	adds	r1, r2, r2
 8005e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e64:	415b      	adcs	r3, r3
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	1851      	adds	r1, r2, r1
 8005e70:	6339      	str	r1, [r7, #48]	; 0x30
 8005e72:	4649      	mov	r1, r9
 8005e74:	414b      	adcs	r3, r1
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e84:	4659      	mov	r1, fp
 8005e86:	00cb      	lsls	r3, r1, #3
 8005e88:	4651      	mov	r1, sl
 8005e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e8e:	4651      	mov	r1, sl
 8005e90:	00ca      	lsls	r2, r1, #3
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	4642      	mov	r2, r8
 8005e9a:	189b      	adds	r3, r3, r2
 8005e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	eb42 0303 	adc.w	r3, r2, r3
 8005ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005eb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	18db      	adds	r3, r3, r3
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	eb42 0303 	adc.w	r3, r2, r3
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ed6:	f7fa fdd1 	bl	8000a7c <__aeabi_uldivmod>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4b0d      	ldr	r3, [pc, #52]	; (8005f14 <UART_SetConfig+0x2d4>)
 8005ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	2164      	movs	r1, #100	; 0x64
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	3332      	adds	r3, #50	; 0x32
 8005ef2:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <UART_SetConfig+0x2d4>)
 8005ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	f003 0207 	and.w	r2, r3, #7
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4422      	add	r2, r4
 8005f06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f08:	e106      	b.n	8006118 <UART_SetConfig+0x4d8>
 8005f0a:	bf00      	nop
 8005f0c:	40011000 	.word	0x40011000
 8005f10:	40011400 	.word	0x40011400
 8005f14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	1891      	adds	r1, r2, r2
 8005f30:	6239      	str	r1, [r7, #32]
 8005f32:	415b      	adcs	r3, r3
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
 8005f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	1854      	adds	r4, r2, r1
 8005f3e:	4649      	mov	r1, r9
 8005f40:	eb43 0501 	adc.w	r5, r3, r1
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	00eb      	lsls	r3, r5, #3
 8005f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f52:	00e2      	lsls	r2, r4, #3
 8005f54:	4614      	mov	r4, r2
 8005f56:	461d      	mov	r5, r3
 8005f58:	4643      	mov	r3, r8
 8005f5a:	18e3      	adds	r3, r4, r3
 8005f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f60:	464b      	mov	r3, r9
 8005f62:	eb45 0303 	adc.w	r3, r5, r3
 8005f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f86:	4629      	mov	r1, r5
 8005f88:	008b      	lsls	r3, r1, #2
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f90:	4621      	mov	r1, r4
 8005f92:	008a      	lsls	r2, r1, #2
 8005f94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f98:	f7fa fd70 	bl	8000a7c <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4b60      	ldr	r3, [pc, #384]	; (8006124 <UART_SetConfig+0x4e4>)
 8005fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	011c      	lsls	r4, r3, #4
 8005faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	1891      	adds	r1, r2, r2
 8005fc2:	61b9      	str	r1, [r7, #24]
 8005fc4:	415b      	adcs	r3, r3
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fcc:	4641      	mov	r1, r8
 8005fce:	1851      	adds	r1, r2, r1
 8005fd0:	6139      	str	r1, [r7, #16]
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	414b      	adcs	r3, r1
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	00cb      	lsls	r3, r1, #3
 8005fe8:	4651      	mov	r1, sl
 8005fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fee:	4651      	mov	r1, sl
 8005ff0:	00ca      	lsls	r2, r1, #3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	189b      	adds	r3, r3, r2
 8005ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006000:	464b      	mov	r3, r9
 8006002:	460a      	mov	r2, r1
 8006004:	eb42 0303 	adc.w	r3, r2, r3
 8006008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	67bb      	str	r3, [r7, #120]	; 0x78
 8006016:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006024:	4649      	mov	r1, r9
 8006026:	008b      	lsls	r3, r1, #2
 8006028:	4641      	mov	r1, r8
 800602a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800602e:	4641      	mov	r1, r8
 8006030:	008a      	lsls	r2, r1, #2
 8006032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006036:	f7fa fd21 	bl	8000a7c <__aeabi_uldivmod>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	4611      	mov	r1, r2
 8006040:	4b38      	ldr	r3, [pc, #224]	; (8006124 <UART_SetConfig+0x4e4>)
 8006042:	fba3 2301 	umull	r2, r3, r3, r1
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	2264      	movs	r2, #100	; 0x64
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	1acb      	subs	r3, r1, r3
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	3332      	adds	r3, #50	; 0x32
 8006054:	4a33      	ldr	r2, [pc, #204]	; (8006124 <UART_SetConfig+0x4e4>)
 8006056:	fba2 2303 	umull	r2, r3, r2, r3
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006060:	441c      	add	r4, r3
 8006062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006066:	2200      	movs	r2, #0
 8006068:	673b      	str	r3, [r7, #112]	; 0x70
 800606a:	677a      	str	r2, [r7, #116]	; 0x74
 800606c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	1891      	adds	r1, r2, r2
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	415b      	adcs	r3, r3
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006080:	4641      	mov	r1, r8
 8006082:	1851      	adds	r1, r2, r1
 8006084:	6039      	str	r1, [r7, #0]
 8006086:	4649      	mov	r1, r9
 8006088:	414b      	adcs	r3, r1
 800608a:	607b      	str	r3, [r7, #4]
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006098:	4659      	mov	r1, fp
 800609a:	00cb      	lsls	r3, r1, #3
 800609c:	4651      	mov	r1, sl
 800609e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a2:	4651      	mov	r1, sl
 80060a4:	00ca      	lsls	r2, r1, #3
 80060a6:	4610      	mov	r0, r2
 80060a8:	4619      	mov	r1, r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	4642      	mov	r2, r8
 80060ae:	189b      	adds	r3, r3, r2
 80060b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060b2:	464b      	mov	r3, r9
 80060b4:	460a      	mov	r2, r1
 80060b6:	eb42 0303 	adc.w	r3, r2, r3
 80060ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	663b      	str	r3, [r7, #96]	; 0x60
 80060c6:	667a      	str	r2, [r7, #100]	; 0x64
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060d4:	4649      	mov	r1, r9
 80060d6:	008b      	lsls	r3, r1, #2
 80060d8:	4641      	mov	r1, r8
 80060da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060de:	4641      	mov	r1, r8
 80060e0:	008a      	lsls	r2, r1, #2
 80060e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060e6:	f7fa fcc9 	bl	8000a7c <__aeabi_uldivmod>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <UART_SetConfig+0x4e4>)
 80060f0:	fba3 1302 	umull	r1, r3, r3, r2
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	2164      	movs	r1, #100	; 0x64
 80060f8:	fb01 f303 	mul.w	r3, r1, r3
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	3332      	adds	r3, #50	; 0x32
 8006102:	4a08      	ldr	r2, [pc, #32]	; (8006124 <UART_SetConfig+0x4e4>)
 8006104:	fba2 2303 	umull	r2, r3, r2, r3
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	f003 020f 	and.w	r2, r3, #15
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4422      	add	r2, r4
 8006116:	609a      	str	r2, [r3, #8]
}
 8006118:	bf00      	nop
 800611a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800611e:	46bd      	mov	sp, r7
 8006120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006124:	51eb851f 	.word	0x51eb851f

08006128 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800613a:	2b84      	cmp	r3, #132	; 0x84
 800613c:	d005      	beq.n	800614a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800613e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	3303      	adds	r3, #3
 8006148:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800614a:	68fb      	ldr	r3, [r7, #12]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800615c:	f000 fe34 	bl	8006dc8 <vTaskStartScheduler>
  
  return osOK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	bd80      	pop	{r7, pc}

08006166 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006168:	b089      	sub	sp, #36	; 0x24
 800616a:	af04      	add	r7, sp, #16
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d020      	beq.n	80061ba <osThreadCreate+0x54>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01c      	beq.n	80061ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685c      	ldr	r4, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691e      	ldr	r6, [r3, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff ffc8 	bl	8006128 <makeFreeRtosPriority>
 8006198:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061a2:	9202      	str	r2, [sp, #8]
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	9100      	str	r1, [sp, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	4632      	mov	r2, r6
 80061ac:	4629      	mov	r1, r5
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 fc2c 	bl	8006a0c <xTaskCreateStatic>
 80061b4:	4603      	mov	r3, r0
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	e01c      	b.n	80061f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685c      	ldr	r4, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff ffaa 	bl	8006128 <makeFreeRtosPriority>
 80061d4:	4602      	mov	r2, r0
 80061d6:	f107 030c 	add.w	r3, r7, #12
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	9200      	str	r2, [sp, #0]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	4632      	mov	r2, r6
 80061e2:	4629      	mov	r1, r5
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 fc6e 	bl	8006ac6 <xTaskCreate>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d001      	beq.n	80061f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e000      	b.n	80061f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061f4:	68fb      	ldr	r3, [r7, #12]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <osDelay+0x16>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	e000      	b.n	8006216 <osDelay+0x18>
 8006214:	2301      	movs	r3, #1
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fda2 	bl	8006d60 <vTaskDelay>
  
  return osOK;
 800621c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006226:	b580      	push	{r7, lr}
 8006228:	b086      	sub	sp, #24
 800622a:	af02      	add	r7, sp, #8
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00f      	beq.n	8006258 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d10a      	bne.n	8006254 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2203      	movs	r2, #3
 8006244:	9200      	str	r2, [sp, #0]
 8006246:	2200      	movs	r2, #0
 8006248:	2100      	movs	r1, #0
 800624a:	2001      	movs	r0, #1
 800624c:	f000 f93a 	bl	80064c4 <xQueueGenericCreateStatic>
 8006250:	4603      	mov	r3, r0
 8006252:	e016      	b.n	8006282 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	e014      	b.n	8006282 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d110      	bne.n	8006280 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800625e:	2203      	movs	r2, #3
 8006260:	2100      	movs	r1, #0
 8006262:	2001      	movs	r0, #1
 8006264:	f000 f9a6 	bl	80065b4 <xQueueGenericCreate>
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <osSemaphoreCreate+0x56>
 8006270:	2300      	movs	r3, #0
 8006272:	2200      	movs	r2, #0
 8006274:	2100      	movs	r1, #0
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f9f6 	bl	8006668 <xQueueGenericSend>
      return sema;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	e000      	b.n	8006282 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006280:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f103 0208 	add.w	r2, r3, #8
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f103 0208 	add.w	r2, r3, #8
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f103 0208 	add.w	r2, r3, #8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]
}
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d103      	bne.n	800634c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e00c      	b.n	8006366 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3308      	adds	r3, #8
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e002      	b.n	800635a <vListInsert+0x2e>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	429a      	cmp	r2, r3
 8006364:	d2f6      	bcs.n	8006354 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
}
 8006392:	bf00      	nop
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6892      	ldr	r2, [r2, #8]
 80063b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6852      	ldr	r2, [r2, #4]
 80063be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d103      	bne.n	80063d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	1e5a      	subs	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800641e:	f001 fb19 	bl	8007a54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	441a      	add	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644e:	3b01      	subs	r3, #1
 8006450:	68f9      	ldr	r1, [r7, #12]
 8006452:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006454:	fb01 f303 	mul.w	r3, r1, r3
 8006458:	441a      	add	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	22ff      	movs	r2, #255	; 0xff
 8006462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	22ff      	movs	r2, #255	; 0xff
 800646a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d114      	bne.n	800649e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01a      	beq.n	80064b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3310      	adds	r3, #16
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fef3 	bl	800726c <xTaskRemoveFromEventList>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d012      	beq.n	80064b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800648c:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <xQueueGenericReset+0xcc>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	e009      	b.n	80064b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3310      	adds	r3, #16
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff fef1 	bl	800628a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3324      	adds	r3, #36	; 0x24
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff feec 	bl	800628a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064b2:	f001 faff 	bl	8007ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064b6:	2301      	movs	r3, #1
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08e      	sub	sp, #56	; 0x38
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <xQueueGenericCreateStatic+0x52>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <xQueueGenericCreateStatic+0x56>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <xQueueGenericCreateStatic+0x58>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	623b      	str	r3, [r7, #32]
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <xQueueGenericCreateStatic+0x7e>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <xQueueGenericCreateStatic+0x82>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <xQueueGenericCreateStatic+0x84>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	61fb      	str	r3, [r7, #28]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006562:	2348      	movs	r3, #72	; 0x48
 8006564:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b48      	cmp	r3, #72	; 0x48
 800656a:	d00a      	beq.n	8006582 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	61bb      	str	r3, [r7, #24]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006582:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00d      	beq.n	80065aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006596:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	4613      	mov	r3, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f83f 	bl	8006628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3730      	adds	r7, #48	; 0x30
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	; 0x28
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	4613      	mov	r3, r2
 80065c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <xQueueGenericCreate+0x2a>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	613b      	str	r3, [r7, #16]
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	fb02 f303 	mul.w	r3, r2, r3
 80065e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	3348      	adds	r3, #72	; 0x48
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 fb13 	bl	8007c18 <pvPortMalloc>
 80065f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d011      	beq.n	800661e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	3348      	adds	r3, #72	; 0x48
 8006602:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800660c:	79fa      	ldrb	r2, [r7, #7]
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	4613      	mov	r3, r2
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f805 	bl	8006628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800661e:	69bb      	ldr	r3, [r7, #24]
	}
 8006620:	4618      	mov	r0, r3
 8006622:	3720      	adds	r7, #32
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d103      	bne.n	8006644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e002      	b.n	800664a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006656:	2101      	movs	r1, #1
 8006658:	69b8      	ldr	r0, [r7, #24]
 800665a:	f7ff fecb 	bl	80063f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800665e:	bf00      	nop
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08e      	sub	sp, #56	; 0x38
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006676:	2300      	movs	r3, #0
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueGenericSend+0x32>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d103      	bne.n	80066a8 <xQueueGenericSend+0x40>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <xQueueGenericSend+0x44>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <xQueueGenericSend+0x46>
 80066ac:	2300      	movs	r3, #0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <xQueueGenericSend+0x60>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d103      	bne.n	80066d6 <xQueueGenericSend+0x6e>
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <xQueueGenericSend+0x72>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <xQueueGenericSend+0x74>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	623b      	str	r3, [r7, #32]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066f6:	f000 ff79 	bl	80075ec <xTaskGetSchedulerState>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <xQueueGenericSend+0x9e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <xQueueGenericSend+0xa2>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <xQueueGenericSend+0xa4>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <xQueueGenericSend+0xbe>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	61fb      	str	r3, [r7, #28]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006726:	f001 f995 	bl	8007a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <xQueueGenericSend+0xd4>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d129      	bne.n	8006790 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006742:	f000 f88f 	bl	8006864 <prvCopyDataToQueue>
 8006746:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d010      	beq.n	8006772 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	3324      	adds	r3, #36	; 0x24
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fd89 	bl	800726c <xTaskRemoveFromEventList>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d013      	beq.n	8006788 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006760:	4b3f      	ldr	r3, [pc, #252]	; (8006860 <xQueueGenericSend+0x1f8>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	e00a      	b.n	8006788 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006778:	4b39      	ldr	r3, [pc, #228]	; (8006860 <xQueueGenericSend+0x1f8>)
 800677a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006788:	f001 f994 	bl	8007ab4 <vPortExitCritical>
				return pdPASS;
 800678c:	2301      	movs	r3, #1
 800678e:	e063      	b.n	8006858 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006796:	f001 f98d 	bl	8007ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800679a:	2300      	movs	r3, #0
 800679c:	e05c      	b.n	8006858 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800679e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fdc1 	bl	8007330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067ae:	2301      	movs	r3, #1
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067b2:	f001 f97f 	bl	8007ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067b6:	f000 fb71 	bl	8006e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ba:	f001 f94b 	bl	8007a54 <vPortEnterCritical>
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d103      	bne.n	80067d4 <xQueueGenericSend+0x16c>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067da:	b25b      	sxtb	r3, r3
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d103      	bne.n	80067ea <xQueueGenericSend+0x182>
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067ea:	f001 f963 	bl	8007ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067ee:	1d3a      	adds	r2, r7, #4
 80067f0:	f107 0314 	add.w	r3, r7, #20
 80067f4:	4611      	mov	r1, r2
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fdb0 	bl	800735c <xTaskCheckForTimeOut>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d124      	bne.n	800684c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006804:	f000 f8ea 	bl	80069dc <prvIsQueueFull>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d018      	beq.n	8006840 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	3310      	adds	r3, #16
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fd04 	bl	8007224 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800681c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800681e:	f000 f88b 	bl	8006938 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006822:	f000 fb49 	bl	8006eb8 <xTaskResumeAll>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	f47f af7c 	bne.w	8006726 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800682e:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <xQueueGenericSend+0x1f8>)
 8006830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	e772      	b.n	8006726 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006842:	f000 f879 	bl	8006938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006846:	f000 fb37 	bl	8006eb8 <xTaskResumeAll>
 800684a:	e76c      	b.n	8006726 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800684c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800684e:	f000 f873 	bl	8006938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006852:	f000 fb31 	bl	8006eb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006858:	4618      	mov	r0, r3
 800685a:	3738      	adds	r7, #56	; 0x38
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10d      	bne.n	800689e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d14d      	bne.n	8006926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 feca 	bl	8007628 <xTaskPriorityDisinherit>
 8006894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	609a      	str	r2, [r3, #8]
 800689c:	e043      	b.n	8006926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d119      	bne.n	80068d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6858      	ldr	r0, [r3, #4]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ac:	461a      	mov	r2, r3
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	f001 fc46 	bl	8008140 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d32b      	bcc.n	8006926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	e026      	b.n	8006926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68d8      	ldr	r0, [r3, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	461a      	mov	r2, r3
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	f001 fc2c 	bl	8008140 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	425b      	negs	r3, r3
 80068f2:	441a      	add	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d207      	bcs.n	8006914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	425b      	negs	r3, r3
 800690e:	441a      	add	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d105      	bne.n	8006926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	3b01      	subs	r3, #1
 8006924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800692e:	697b      	ldr	r3, [r7, #20]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006940:	f001 f888 	bl	8007a54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800694c:	e011      	b.n	8006972 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	2b00      	cmp	r3, #0
 8006954:	d012      	beq.n	800697c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	3324      	adds	r3, #36	; 0x24
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fc86 	bl	800726c <xTaskRemoveFromEventList>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006966:	f000 fd5b 	bl	8007420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	3b01      	subs	r3, #1
 800696e:	b2db      	uxtb	r3, r3
 8006970:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006976:	2b00      	cmp	r3, #0
 8006978:	dce9      	bgt.n	800694e <prvUnlockQueue+0x16>
 800697a:	e000      	b.n	800697e <prvUnlockQueue+0x46>
					break;
 800697c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	22ff      	movs	r2, #255	; 0xff
 8006982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006986:	f001 f895 	bl	8007ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800698a:	f001 f863 	bl	8007a54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006994:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006996:	e011      	b.n	80069bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d012      	beq.n	80069c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3310      	adds	r3, #16
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fc61 	bl	800726c <xTaskRemoveFromEventList>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069b0:	f000 fd36 	bl	8007420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	dce9      	bgt.n	8006998 <prvUnlockQueue+0x60>
 80069c4:	e000      	b.n	80069c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	22ff      	movs	r2, #255	; 0xff
 80069cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069d0:	f001 f870 	bl	8007ab4 <vPortExitCritical>
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069e4:	f001 f836 	bl	8007a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d102      	bne.n	80069fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069f4:	2301      	movs	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e001      	b.n	80069fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069fe:	f001 f859 	bl	8007ab4 <vPortExitCritical>

	return xReturn;
 8006a02:	68fb      	ldr	r3, [r7, #12]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08e      	sub	sp, #56	; 0x38
 8006a10:	af04      	add	r7, sp, #16
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	623b      	str	r3, [r7, #32]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	61fb      	str	r3, [r7, #28]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a52:	23a0      	movs	r3, #160	; 0xa0
 8006a54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2ba0      	cmp	r3, #160	; 0xa0
 8006a5a:	d00a      	beq.n	8006a72 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	61bb      	str	r3, [r7, #24]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d01e      	beq.n	8006ab8 <xTaskCreateStatic+0xac>
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01b      	beq.n	8006ab8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a92:	2300      	movs	r3, #0
 8006a94:	9303      	str	r3, [sp, #12]
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	9302      	str	r3, [sp, #8]
 8006a9a:	f107 0314 	add.w	r3, r7, #20
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f850 	bl	8006b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ab2:	f000 f8eb 	bl	8006c8c <prvAddNewTaskToReadyList>
 8006ab6:	e001      	b.n	8006abc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006abc:	697b      	ldr	r3, [r7, #20]
	}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3728      	adds	r7, #40	; 0x28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b08c      	sub	sp, #48	; 0x30
 8006aca:	af04      	add	r7, sp, #16
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 f89c 	bl	8007c18 <pvPortMalloc>
 8006ae0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00e      	beq.n	8006b06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ae8:	20a0      	movs	r0, #160	; 0xa0
 8006aea:	f001 f895 	bl	8007c18 <pvPortMalloc>
 8006aee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30
 8006afc:	e005      	b.n	8006b0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006afe:	6978      	ldr	r0, [r7, #20]
 8006b00:	f001 f956 	bl	8007db0 <vPortFree>
 8006b04:	e001      	b.n	8006b0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d017      	beq.n	8006b40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b18:	88fa      	ldrh	r2, [r7, #6]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9303      	str	r3, [sp, #12]
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	9302      	str	r3, [sp, #8]
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f80e 	bl	8006b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b34:	69f8      	ldr	r0, [r7, #28]
 8006b36:	f000 f8a9 	bl	8006c8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	e002      	b.n	8006b46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b40:	f04f 33ff 	mov.w	r3, #4294967295
 8006b44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b46:	69bb      	ldr	r3, [r7, #24]
	}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3720      	adds	r7, #32
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	f023 0307 	bic.w	r3, r3, #7
 8006b76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	617b      	str	r3, [r7, #20]
}
 8006b94:	bf00      	nop
 8006b96:	e7fe      	b.n	8006b96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d01f      	beq.n	8006bde <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	e012      	b.n	8006bca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	7819      	ldrb	r1, [r3, #0]
 8006bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3334      	adds	r3, #52	; 0x34
 8006bb4:	460a      	mov	r2, r1
 8006bb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d006      	beq.n	8006bd2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	61fb      	str	r3, [r7, #28]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	2b0f      	cmp	r3, #15
 8006bce:	d9e9      	bls.n	8006ba4 <prvInitialiseNewTask+0x54>
 8006bd0:	e000      	b.n	8006bd4 <prvInitialiseNewTask+0x84>
			{
				break;
 8006bd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bdc:	e003      	b.n	8006be6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be8:	2b06      	cmp	r3, #6
 8006bea:	d901      	bls.n	8006bf0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bec:	2306      	movs	r3, #6
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bfa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	2200      	movs	r2, #0
 8006c00:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	3304      	adds	r3, #4
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fb5f 	bl	80062ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	3318      	adds	r3, #24
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff fb5a 	bl	80062ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	f1c3 0207 	rsb	r2, r3, #7
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	334c      	adds	r3, #76	; 0x4c
 8006c40:	224c      	movs	r2, #76	; 0x4c
 8006c42:	2100      	movs	r1, #0
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 f9f1 	bl	800802c <memset>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	4a0c      	ldr	r2, [pc, #48]	; (8006c80 <prvInitialiseNewTask+0x130>)
 8006c4e:	651a      	str	r2, [r3, #80]	; 0x50
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	4a0c      	ldr	r2, [pc, #48]	; (8006c84 <prvInitialiseNewTask+0x134>)
 8006c54:	655a      	str	r2, [r3, #84]	; 0x54
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	4a0b      	ldr	r2, [pc, #44]	; (8006c88 <prvInitialiseNewTask+0x138>)
 8006c5a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	68f9      	ldr	r1, [r7, #12]
 8006c60:	69b8      	ldr	r0, [r7, #24]
 8006c62:	f000 fdcd 	bl	8007800 <pxPortInitialiseStack>
 8006c66:	4602      	mov	r2, r0
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c78:	bf00      	nop
 8006c7a:	3720      	adds	r7, #32
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	2000429c 	.word	0x2000429c
 8006c84:	20004304 	.word	0x20004304
 8006c88:	2000436c 	.word	0x2000436c

08006c8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c94:	f000 fede 	bl	8007a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c98:	4b2a      	ldr	r3, [pc, #168]	; (8006d44 <prvAddNewTaskToReadyList+0xb8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	4a29      	ldr	r2, [pc, #164]	; (8006d44 <prvAddNewTaskToReadyList+0xb8>)
 8006ca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ca2:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <prvAddNewTaskToReadyList+0xbc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006caa:	4a27      	ldr	r2, [pc, #156]	; (8006d48 <prvAddNewTaskToReadyList+0xbc>)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cb0:	4b24      	ldr	r3, [pc, #144]	; (8006d44 <prvAddNewTaskToReadyList+0xb8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d110      	bne.n	8006cda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cb8:	f000 fbd6 	bl	8007468 <prvInitialiseTaskLists>
 8006cbc:	e00d      	b.n	8006cda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cbe:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <prvAddNewTaskToReadyList+0xc0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cc6:	4b20      	ldr	r3, [pc, #128]	; (8006d48 <prvAddNewTaskToReadyList+0xbc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d802      	bhi.n	8006cda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cd4:	4a1c      	ldr	r2, [pc, #112]	; (8006d48 <prvAddNewTaskToReadyList+0xbc>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cda:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <prvAddNewTaskToReadyList+0xc4>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	4a1b      	ldr	r2, [pc, #108]	; (8006d50 <prvAddNewTaskToReadyList+0xc4>)
 8006ce2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	2201      	movs	r2, #1
 8006cea:	409a      	lsls	r2, r3
 8006cec:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <prvAddNewTaskToReadyList+0xc8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	4a18      	ldr	r2, [pc, #96]	; (8006d54 <prvAddNewTaskToReadyList+0xc8>)
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <prvAddNewTaskToReadyList+0xcc>)
 8006d04:	441a      	add	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	f7ff fae9 	bl	80062e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d12:	f000 fecf 	bl	8007ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <prvAddNewTaskToReadyList+0xc0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00e      	beq.n	8006d3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <prvAddNewTaskToReadyList+0xbc>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d207      	bcs.n	8006d3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d2c:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <prvAddNewTaskToReadyList+0xd0>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000648 	.word	0x20000648
 8006d48:	20000548 	.word	0x20000548
 8006d4c:	20000654 	.word	0x20000654
 8006d50:	20000664 	.word	0x20000664
 8006d54:	20000650 	.word	0x20000650
 8006d58:	2000054c 	.word	0x2000054c
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d017      	beq.n	8006da2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d72:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <vTaskDelay+0x60>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <vTaskDelay+0x30>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	60bb      	str	r3, [r7, #8]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d90:	f000 f884 	bl	8006e9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d94:	2100      	movs	r1, #0
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fccc 	bl	8007734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d9c:	f000 f88c 	bl	8006eb8 <xTaskResumeAll>
 8006da0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d107      	bne.n	8006db8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <vTaskDelay+0x64>)
 8006daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20000670 	.word	0x20000670
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dd6:	463a      	mov	r2, r7
 8006dd8:	1d39      	adds	r1, r7, #4
 8006dda:	f107 0308 	add.w	r3, r7, #8
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fa fa30 	bl	8001244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	9202      	str	r2, [sp, #8]
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	2300      	movs	r3, #0
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	460a      	mov	r2, r1
 8006df6:	4921      	ldr	r1, [pc, #132]	; (8006e7c <vTaskStartScheduler+0xb4>)
 8006df8:	4821      	ldr	r0, [pc, #132]	; (8006e80 <vTaskStartScheduler+0xb8>)
 8006dfa:	f7ff fe07 	bl	8006a0c <xTaskCreateStatic>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4a20      	ldr	r2, [pc, #128]	; (8006e84 <vTaskStartScheduler+0xbc>)
 8006e02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e04:	4b1f      	ldr	r3, [pc, #124]	; (8006e84 <vTaskStartScheduler+0xbc>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e001      	b.n	8006e16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d11b      	bne.n	8006e54 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	613b      	str	r3, [r7, #16]
}
 8006e2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e30:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <vTaskStartScheduler+0xc0>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	334c      	adds	r3, #76	; 0x4c
 8006e36:	4a15      	ldr	r2, [pc, #84]	; (8006e8c <vTaskStartScheduler+0xc4>)
 8006e38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e3a:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <vTaskStartScheduler+0xc8>)
 8006e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e42:	4b14      	ldr	r3, [pc, #80]	; (8006e94 <vTaskStartScheduler+0xcc>)
 8006e44:	2201      	movs	r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e48:	4b13      	ldr	r3, [pc, #76]	; (8006e98 <vTaskStartScheduler+0xd0>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e4e:	f000 fd5f 	bl	8007910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e52:	e00e      	b.n	8006e72 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5a:	d10a      	bne.n	8006e72 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	60fb      	str	r3, [r7, #12]
}
 8006e6e:	bf00      	nop
 8006e70:	e7fe      	b.n	8006e70 <vTaskStartScheduler+0xa8>
}
 8006e72:	bf00      	nop
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	08008b68 	.word	0x08008b68
 8006e80:	08007439 	.word	0x08007439
 8006e84:	2000066c 	.word	0x2000066c
 8006e88:	20000548 	.word	0x20000548
 8006e8c:	2000005c 	.word	0x2000005c
 8006e90:	20000668 	.word	0x20000668
 8006e94:	20000654 	.word	0x20000654
 8006e98:	2000064c 	.word	0x2000064c

08006e9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ea0:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <vTaskSuspendAll+0x18>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	4a03      	ldr	r2, [pc, #12]	; (8006eb4 <vTaskSuspendAll+0x18>)
 8006ea8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006eaa:	bf00      	nop
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	20000670 	.word	0x20000670

08006eb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ec6:	4b41      	ldr	r3, [pc, #260]	; (8006fcc <xTaskResumeAll+0x114>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	603b      	str	r3, [r7, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ee4:	f000 fdb6 	bl	8007a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ee8:	4b38      	ldr	r3, [pc, #224]	; (8006fcc <xTaskResumeAll+0x114>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	4a37      	ldr	r2, [pc, #220]	; (8006fcc <xTaskResumeAll+0x114>)
 8006ef0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ef2:	4b36      	ldr	r3, [pc, #216]	; (8006fcc <xTaskResumeAll+0x114>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d161      	bne.n	8006fbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006efa:	4b35      	ldr	r3, [pc, #212]	; (8006fd0 <xTaskResumeAll+0x118>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d05d      	beq.n	8006fbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f02:	e02e      	b.n	8006f62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f04:	4b33      	ldr	r3, [pc, #204]	; (8006fd4 <xTaskResumeAll+0x11c>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3318      	adds	r3, #24
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff fa44 	bl	800639e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff fa3f 	bl	800639e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	2201      	movs	r2, #1
 8006f26:	409a      	lsls	r2, r3
 8006f28:	4b2b      	ldr	r3, [pc, #172]	; (8006fd8 <xTaskResumeAll+0x120>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <xTaskResumeAll+0x120>)
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4a27      	ldr	r2, [pc, #156]	; (8006fdc <xTaskResumeAll+0x124>)
 8006f40:	441a      	add	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4619      	mov	r1, r3
 8006f48:	4610      	mov	r0, r2
 8006f4a:	f7ff f9cb 	bl	80062e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f52:	4b23      	ldr	r3, [pc, #140]	; (8006fe0 <xTaskResumeAll+0x128>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d302      	bcc.n	8006f62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006f5c:	4b21      	ldr	r3, [pc, #132]	; (8006fe4 <xTaskResumeAll+0x12c>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f62:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <xTaskResumeAll+0x11c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1cc      	bne.n	8006f04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f70:	f000 fb1c 	bl	80075ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f74:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <xTaskResumeAll+0x130>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d010      	beq.n	8006fa2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f80:	f000 f836 	bl	8006ff0 <xTaskIncrementTick>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006f8a:	4b16      	ldr	r3, [pc, #88]	; (8006fe4 <xTaskResumeAll+0x12c>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1f1      	bne.n	8006f80 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006f9c:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <xTaskResumeAll+0x130>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <xTaskResumeAll+0x12c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d009      	beq.n	8006fbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006faa:	2301      	movs	r3, #1
 8006fac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <xTaskResumeAll+0x134>)
 8006fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fbe:	f000 fd79 	bl	8007ab4 <vPortExitCritical>

	return xAlreadyYielded;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000670 	.word	0x20000670
 8006fd0:	20000648 	.word	0x20000648
 8006fd4:	20000608 	.word	0x20000608
 8006fd8:	20000650 	.word	0x20000650
 8006fdc:	2000054c 	.word	0x2000054c
 8006fe0:	20000548 	.word	0x20000548
 8006fe4:	2000065c 	.word	0x2000065c
 8006fe8:	20000658 	.word	0x20000658
 8006fec:	e000ed04 	.word	0xe000ed04

08006ff0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ffa:	4b4e      	ldr	r3, [pc, #312]	; (8007134 <xTaskIncrementTick+0x144>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f040 808e 	bne.w	8007120 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007004:	4b4c      	ldr	r3, [pc, #304]	; (8007138 <xTaskIncrementTick+0x148>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3301      	adds	r3, #1
 800700a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800700c:	4a4a      	ldr	r2, [pc, #296]	; (8007138 <xTaskIncrementTick+0x148>)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d120      	bne.n	800705a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007018:	4b48      	ldr	r3, [pc, #288]	; (800713c <xTaskIncrementTick+0x14c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <xTaskIncrementTick+0x48>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	603b      	str	r3, [r7, #0]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <xTaskIncrementTick+0x46>
 8007038:	4b40      	ldr	r3, [pc, #256]	; (800713c <xTaskIncrementTick+0x14c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	4b40      	ldr	r3, [pc, #256]	; (8007140 <xTaskIncrementTick+0x150>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a3e      	ldr	r2, [pc, #248]	; (800713c <xTaskIncrementTick+0x14c>)
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	4a3e      	ldr	r2, [pc, #248]	; (8007140 <xTaskIncrementTick+0x150>)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	4b3d      	ldr	r3, [pc, #244]	; (8007144 <xTaskIncrementTick+0x154>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3301      	adds	r3, #1
 8007052:	4a3c      	ldr	r2, [pc, #240]	; (8007144 <xTaskIncrementTick+0x154>)
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	f000 faa9 	bl	80075ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800705a:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <xTaskIncrementTick+0x158>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	429a      	cmp	r2, r3
 8007062:	d348      	bcc.n	80070f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007064:	4b35      	ldr	r3, [pc, #212]	; (800713c <xTaskIncrementTick+0x14c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d104      	bne.n	8007078 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706e:	4b36      	ldr	r3, [pc, #216]	; (8007148 <xTaskIncrementTick+0x158>)
 8007070:	f04f 32ff 	mov.w	r2, #4294967295
 8007074:	601a      	str	r2, [r3, #0]
					break;
 8007076:	e03e      	b.n	80070f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007078:	4b30      	ldr	r3, [pc, #192]	; (800713c <xTaskIncrementTick+0x14c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	d203      	bcs.n	8007098 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007090:	4a2d      	ldr	r2, [pc, #180]	; (8007148 <xTaskIncrementTick+0x158>)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007096:	e02e      	b.n	80070f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	3304      	adds	r3, #4
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff f97e 	bl	800639e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d004      	beq.n	80070b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	3318      	adds	r3, #24
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff f975 	bl	800639e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	2201      	movs	r2, #1
 80070ba:	409a      	lsls	r2, r3
 80070bc:	4b23      	ldr	r3, [pc, #140]	; (800714c <xTaskIncrementTick+0x15c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	4a22      	ldr	r2, [pc, #136]	; (800714c <xTaskIncrementTick+0x15c>)
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ca:	4613      	mov	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4a1f      	ldr	r2, [pc, #124]	; (8007150 <xTaskIncrementTick+0x160>)
 80070d4:	441a      	add	r2, r3
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	3304      	adds	r3, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f7ff f901 	bl	80062e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e6:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <xTaskIncrementTick+0x164>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d3b9      	bcc.n	8007064 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070f0:	2301      	movs	r3, #1
 80070f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070f4:	e7b6      	b.n	8007064 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070f6:	4b17      	ldr	r3, [pc, #92]	; (8007154 <xTaskIncrementTick+0x164>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	4914      	ldr	r1, [pc, #80]	; (8007150 <xTaskIncrementTick+0x160>)
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d901      	bls.n	8007112 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800710e:	2301      	movs	r3, #1
 8007110:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007112:	4b11      	ldr	r3, [pc, #68]	; (8007158 <xTaskIncrementTick+0x168>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d007      	beq.n	800712a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800711a:	2301      	movs	r3, #1
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	e004      	b.n	800712a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007120:	4b0e      	ldr	r3, [pc, #56]	; (800715c <xTaskIncrementTick+0x16c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	4a0d      	ldr	r2, [pc, #52]	; (800715c <xTaskIncrementTick+0x16c>)
 8007128:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800712a:	697b      	ldr	r3, [r7, #20]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000670 	.word	0x20000670
 8007138:	2000064c 	.word	0x2000064c
 800713c:	20000600 	.word	0x20000600
 8007140:	20000604 	.word	0x20000604
 8007144:	20000660 	.word	0x20000660
 8007148:	20000668 	.word	0x20000668
 800714c:	20000650 	.word	0x20000650
 8007150:	2000054c 	.word	0x2000054c
 8007154:	20000548 	.word	0x20000548
 8007158:	2000065c 	.word	0x2000065c
 800715c:	20000658 	.word	0x20000658

08007160 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007166:	4b29      	ldr	r3, [pc, #164]	; (800720c <vTaskSwitchContext+0xac>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800716e:	4b28      	ldr	r3, [pc, #160]	; (8007210 <vTaskSwitchContext+0xb0>)
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007174:	e044      	b.n	8007200 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007176:	4b26      	ldr	r3, [pc, #152]	; (8007210 <vTaskSwitchContext+0xb0>)
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800717c:	4b25      	ldr	r3, [pc, #148]	; (8007214 <vTaskSwitchContext+0xb4>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	fab3 f383 	clz	r3, r3
 8007188:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800718a:	7afb      	ldrb	r3, [r7, #11]
 800718c:	f1c3 031f 	rsb	r3, r3, #31
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	4921      	ldr	r1, [pc, #132]	; (8007218 <vTaskSwitchContext+0xb8>)
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10a      	bne.n	80071bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	607b      	str	r3, [r7, #4]
}
 80071b8:	bf00      	nop
 80071ba:	e7fe      	b.n	80071ba <vTaskSwitchContext+0x5a>
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4a14      	ldr	r2, [pc, #80]	; (8007218 <vTaskSwitchContext+0xb8>)
 80071c8:	4413      	add	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	3308      	adds	r3, #8
 80071de:	429a      	cmp	r2, r3
 80071e0:	d104      	bne.n	80071ec <vTaskSwitchContext+0x8c>
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	605a      	str	r2, [r3, #4]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	4a0a      	ldr	r2, [pc, #40]	; (800721c <vTaskSwitchContext+0xbc>)
 80071f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071f6:	4b09      	ldr	r3, [pc, #36]	; (800721c <vTaskSwitchContext+0xbc>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	334c      	adds	r3, #76	; 0x4c
 80071fc:	4a08      	ldr	r2, [pc, #32]	; (8007220 <vTaskSwitchContext+0xc0>)
 80071fe:	6013      	str	r3, [r2, #0]
}
 8007200:	bf00      	nop
 8007202:	371c      	adds	r7, #28
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	20000670 	.word	0x20000670
 8007210:	2000065c 	.word	0x2000065c
 8007214:	20000650 	.word	0x20000650
 8007218:	2000054c 	.word	0x2000054c
 800721c:	20000548 	.word	0x20000548
 8007220:	2000005c 	.word	0x2000005c

08007224 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60fb      	str	r3, [r7, #12]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800724a:	4b07      	ldr	r3, [pc, #28]	; (8007268 <vTaskPlaceOnEventList+0x44>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3318      	adds	r3, #24
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff f86a 	bl	800632c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007258:	2101      	movs	r1, #1
 800725a:	6838      	ldr	r0, [r7, #0]
 800725c:	f000 fa6a 	bl	8007734 <prvAddCurrentTaskToDelayedList>
}
 8007260:	bf00      	nop
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	20000548 	.word	0x20000548

0800726c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	60fb      	str	r3, [r7, #12]
}
 8007294:	bf00      	nop
 8007296:	e7fe      	b.n	8007296 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	3318      	adds	r3, #24
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff f87e 	bl	800639e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a2:	4b1d      	ldr	r3, [pc, #116]	; (8007318 <xTaskRemoveFromEventList+0xac>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d11c      	bne.n	80072e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff f875 	bl	800639e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	2201      	movs	r2, #1
 80072ba:	409a      	lsls	r2, r3
 80072bc:	4b17      	ldr	r3, [pc, #92]	; (800731c <xTaskRemoveFromEventList+0xb0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	4a16      	ldr	r2, [pc, #88]	; (800731c <xTaskRemoveFromEventList+0xb0>)
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4a13      	ldr	r2, [pc, #76]	; (8007320 <xTaskRemoveFromEventList+0xb4>)
 80072d4:	441a      	add	r2, r3
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3304      	adds	r3, #4
 80072da:	4619      	mov	r1, r3
 80072dc:	4610      	mov	r0, r2
 80072de:	f7ff f801 	bl	80062e4 <vListInsertEnd>
 80072e2:	e005      	b.n	80072f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	3318      	adds	r3, #24
 80072e8:	4619      	mov	r1, r3
 80072ea:	480e      	ldr	r0, [pc, #56]	; (8007324 <xTaskRemoveFromEventList+0xb8>)
 80072ec:	f7fe fffa 	bl	80062e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f4:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <xTaskRemoveFromEventList+0xbc>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d905      	bls.n	800730a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072fe:	2301      	movs	r3, #1
 8007300:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007302:	4b0a      	ldr	r3, [pc, #40]	; (800732c <xTaskRemoveFromEventList+0xc0>)
 8007304:	2201      	movs	r2, #1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e001      	b.n	800730e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800730e:	697b      	ldr	r3, [r7, #20]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20000670 	.word	0x20000670
 800731c:	20000650 	.word	0x20000650
 8007320:	2000054c 	.word	0x2000054c
 8007324:	20000608 	.word	0x20000608
 8007328:	20000548 	.word	0x20000548
 800732c:	2000065c 	.word	0x2000065c

08007330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007338:	4b06      	ldr	r3, [pc, #24]	; (8007354 <vTaskInternalSetTimeOutState+0x24>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007340:	4b05      	ldr	r3, [pc, #20]	; (8007358 <vTaskInternalSetTimeOutState+0x28>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	605a      	str	r2, [r3, #4]
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	20000660 	.word	0x20000660
 8007358:	2000064c 	.word	0x2000064c

0800735c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	613b      	str	r3, [r7, #16]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	60fb      	str	r3, [r7, #12]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800739e:	f000 fb59 	bl	8007a54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073a2:	4b1d      	ldr	r3, [pc, #116]	; (8007418 <xTaskCheckForTimeOut+0xbc>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d102      	bne.n	80073c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	e023      	b.n	800740a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	4b15      	ldr	r3, [pc, #84]	; (800741c <xTaskCheckForTimeOut+0xc0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d007      	beq.n	80073de <xTaskCheckForTimeOut+0x82>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d302      	bcc.n	80073de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	61fb      	str	r3, [r7, #28]
 80073dc:	e015      	b.n	800740a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d20b      	bcs.n	8007400 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	1ad2      	subs	r2, r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff ff9b 	bl	8007330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61fb      	str	r3, [r7, #28]
 80073fe:	e004      	b.n	800740a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007406:	2301      	movs	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800740a:	f000 fb53 	bl	8007ab4 <vPortExitCritical>

	return xReturn;
 800740e:	69fb      	ldr	r3, [r7, #28]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3720      	adds	r7, #32
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	2000064c 	.word	0x2000064c
 800741c:	20000660 	.word	0x20000660

08007420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007424:	4b03      	ldr	r3, [pc, #12]	; (8007434 <vTaskMissedYield+0x14>)
 8007426:	2201      	movs	r2, #1
 8007428:	601a      	str	r2, [r3, #0]
}
 800742a:	bf00      	nop
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	2000065c 	.word	0x2000065c

08007438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007440:	f000 f852 	bl	80074e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007444:	4b06      	ldr	r3, [pc, #24]	; (8007460 <prvIdleTask+0x28>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d9f9      	bls.n	8007440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <prvIdleTask+0x2c>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800745c:	e7f0      	b.n	8007440 <prvIdleTask+0x8>
 800745e:	bf00      	nop
 8007460:	2000054c 	.word	0x2000054c
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800746e:	2300      	movs	r3, #0
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	e00c      	b.n	800748e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4a12      	ldr	r2, [pc, #72]	; (80074c8 <prvInitialiseTaskLists+0x60>)
 8007480:	4413      	add	r3, r2
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe ff01 	bl	800628a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3301      	adds	r3, #1
 800748c:	607b      	str	r3, [r7, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b06      	cmp	r3, #6
 8007492:	d9ef      	bls.n	8007474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007494:	480d      	ldr	r0, [pc, #52]	; (80074cc <prvInitialiseTaskLists+0x64>)
 8007496:	f7fe fef8 	bl	800628a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800749a:	480d      	ldr	r0, [pc, #52]	; (80074d0 <prvInitialiseTaskLists+0x68>)
 800749c:	f7fe fef5 	bl	800628a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074a0:	480c      	ldr	r0, [pc, #48]	; (80074d4 <prvInitialiseTaskLists+0x6c>)
 80074a2:	f7fe fef2 	bl	800628a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074a6:	480c      	ldr	r0, [pc, #48]	; (80074d8 <prvInitialiseTaskLists+0x70>)
 80074a8:	f7fe feef 	bl	800628a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074ac:	480b      	ldr	r0, [pc, #44]	; (80074dc <prvInitialiseTaskLists+0x74>)
 80074ae:	f7fe feec 	bl	800628a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074b2:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <prvInitialiseTaskLists+0x78>)
 80074b4:	4a05      	ldr	r2, [pc, #20]	; (80074cc <prvInitialiseTaskLists+0x64>)
 80074b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <prvInitialiseTaskLists+0x7c>)
 80074ba:	4a05      	ldr	r2, [pc, #20]	; (80074d0 <prvInitialiseTaskLists+0x68>)
 80074bc:	601a      	str	r2, [r3, #0]
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	2000054c 	.word	0x2000054c
 80074cc:	200005d8 	.word	0x200005d8
 80074d0:	200005ec 	.word	0x200005ec
 80074d4:	20000608 	.word	0x20000608
 80074d8:	2000061c 	.word	0x2000061c
 80074dc:	20000634 	.word	0x20000634
 80074e0:	20000600 	.word	0x20000600
 80074e4:	20000604 	.word	0x20000604

080074e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074ee:	e019      	b.n	8007524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074f0:	f000 fab0 	bl	8007a54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f4:	4b10      	ldr	r3, [pc, #64]	; (8007538 <prvCheckTasksWaitingTermination+0x50>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe ff4c 	bl	800639e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007506:	4b0d      	ldr	r3, [pc, #52]	; (800753c <prvCheckTasksWaitingTermination+0x54>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3b01      	subs	r3, #1
 800750c:	4a0b      	ldr	r2, [pc, #44]	; (800753c <prvCheckTasksWaitingTermination+0x54>)
 800750e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <prvCheckTasksWaitingTermination+0x58>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3b01      	subs	r3, #1
 8007516:	4a0a      	ldr	r2, [pc, #40]	; (8007540 <prvCheckTasksWaitingTermination+0x58>)
 8007518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800751a:	f000 facb 	bl	8007ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f810 	bl	8007544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007524:	4b06      	ldr	r3, [pc, #24]	; (8007540 <prvCheckTasksWaitingTermination+0x58>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e1      	bne.n	80074f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	2000061c 	.word	0x2000061c
 800753c:	20000648 	.word	0x20000648
 8007540:	20000630 	.word	0x20000630

08007544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	334c      	adds	r3, #76	; 0x4c
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fd73 	bl	800803c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800755c:	2b00      	cmp	r3, #0
 800755e:	d108      	bne.n	8007572 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fc23 	bl	8007db0 <vPortFree>
				vPortFree( pxTCB );
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fc20 	bl	8007db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007570:	e018      	b.n	80075a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007578:	2b01      	cmp	r3, #1
 800757a:	d103      	bne.n	8007584 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fc17 	bl	8007db0 <vPortFree>
	}
 8007582:	e00f      	b.n	80075a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800758a:	2b02      	cmp	r3, #2
 800758c:	d00a      	beq.n	80075a4 <prvDeleteTCB+0x60>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	60fb      	str	r3, [r7, #12]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <prvDeleteTCB+0x5e>
	}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075b2:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <prvResetNextTaskUnblockTime+0x38>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d104      	bne.n	80075c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075bc:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <prvResetNextTaskUnblockTime+0x3c>)
 80075be:	f04f 32ff 	mov.w	r2, #4294967295
 80075c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075c4:	e008      	b.n	80075d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <prvResetNextTaskUnblockTime+0x38>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	4a04      	ldr	r2, [pc, #16]	; (80075e8 <prvResetNextTaskUnblockTime+0x3c>)
 80075d6:	6013      	str	r3, [r2, #0]
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	20000600 	.word	0x20000600
 80075e8:	20000668 	.word	0x20000668

080075ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075f2:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <xTaskGetSchedulerState+0x34>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d102      	bne.n	8007600 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075fa:	2301      	movs	r3, #1
 80075fc:	607b      	str	r3, [r7, #4]
 80075fe:	e008      	b.n	8007612 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007600:	4b08      	ldr	r3, [pc, #32]	; (8007624 <xTaskGetSchedulerState+0x38>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007608:	2302      	movs	r3, #2
 800760a:	607b      	str	r3, [r7, #4]
 800760c:	e001      	b.n	8007612 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800760e:	2300      	movs	r3, #0
 8007610:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007612:	687b      	ldr	r3, [r7, #4]
	}
 8007614:	4618      	mov	r0, r3
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	20000654 	.word	0x20000654
 8007624:	20000670 	.word	0x20000670

08007628 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d06e      	beq.n	800771c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800763e:	4b3a      	ldr	r3, [pc, #232]	; (8007728 <xTaskPriorityDisinherit+0x100>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	429a      	cmp	r2, r3
 8007646:	d00a      	beq.n	800765e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	60fb      	str	r3, [r7, #12]
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	60bb      	str	r3, [r7, #8]
}
 8007678:	bf00      	nop
 800767a:	e7fe      	b.n	800767a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007680:	1e5a      	subs	r2, r3, #1
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768e:	429a      	cmp	r2, r3
 8007690:	d044      	beq.n	800771c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007696:	2b00      	cmp	r3, #0
 8007698:	d140      	bne.n	800771c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	3304      	adds	r3, #4
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fe7d 	bl	800639e <uxListRemove>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d115      	bne.n	80076d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ae:	491f      	ldr	r1, [pc, #124]	; (800772c <xTaskPriorityDisinherit+0x104>)
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <xTaskPriorityDisinherit+0xae>
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	2201      	movs	r2, #1
 80076c6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ca:	43da      	mvns	r2, r3
 80076cc:	4b18      	ldr	r3, [pc, #96]	; (8007730 <xTaskPriorityDisinherit+0x108>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4013      	ands	r3, r2
 80076d2:	4a17      	ldr	r2, [pc, #92]	; (8007730 <xTaskPriorityDisinherit+0x108>)
 80076d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	f1c3 0207 	rsb	r2, r3, #7
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ee:	2201      	movs	r2, #1
 80076f0:	409a      	lsls	r2, r3
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <xTaskPriorityDisinherit+0x108>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	4a0d      	ldr	r2, [pc, #52]	; (8007730 <xTaskPriorityDisinherit+0x108>)
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007700:	4613      	mov	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4a08      	ldr	r2, [pc, #32]	; (800772c <xTaskPriorityDisinherit+0x104>)
 800770a:	441a      	add	r2, r3
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	3304      	adds	r3, #4
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f7fe fde6 	bl	80062e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800771c:	697b      	ldr	r3, [r7, #20]
	}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000548 	.word	0x20000548
 800772c:	2000054c 	.word	0x2000054c
 8007730:	20000650 	.word	0x20000650

08007734 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800773e:	4b29      	ldr	r3, [pc, #164]	; (80077e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007744:	4b28      	ldr	r3, [pc, #160]	; (80077e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3304      	adds	r3, #4
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fe27 	bl	800639e <uxListRemove>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007756:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	2201      	movs	r2, #1
 800775e:	fa02 f303 	lsl.w	r3, r2, r3
 8007762:	43da      	mvns	r2, r3
 8007764:	4b21      	ldr	r3, [pc, #132]	; (80077ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4013      	ands	r3, r2
 800776a:	4a20      	ldr	r2, [pc, #128]	; (80077ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800776c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007774:	d10a      	bne.n	800778c <prvAddCurrentTaskToDelayedList+0x58>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800777c:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3304      	adds	r3, #4
 8007782:	4619      	mov	r1, r3
 8007784:	481a      	ldr	r0, [pc, #104]	; (80077f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007786:	f7fe fdad 	bl	80062e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800778a:	e026      	b.n	80077da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007794:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d209      	bcs.n	80077b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a4:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7fe fdbb 	bl	800632c <vListInsert>
}
 80077b6:	e010      	b.n	80077da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b8:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3304      	adds	r3, #4
 80077c2:	4619      	mov	r1, r3
 80077c4:	4610      	mov	r0, r2
 80077c6:	f7fe fdb1 	bl	800632c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077ca:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d202      	bcs.n	80077da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077d4:	4a09      	ldr	r2, [pc, #36]	; (80077fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6013      	str	r3, [r2, #0]
}
 80077da:	bf00      	nop
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	2000064c 	.word	0x2000064c
 80077e8:	20000548 	.word	0x20000548
 80077ec:	20000650 	.word	0x20000650
 80077f0:	20000634 	.word	0x20000634
 80077f4:	20000604 	.word	0x20000604
 80077f8:	20000600 	.word	0x20000600
 80077fc:	20000668 	.word	0x20000668

08007800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3b04      	subs	r3, #4
 8007810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3b04      	subs	r3, #4
 800781e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f023 0201 	bic.w	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3b04      	subs	r3, #4
 800782e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007830:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <pxPortInitialiseStack+0x64>)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3b14      	subs	r3, #20
 800783a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3b04      	subs	r3, #4
 8007846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f06f 0202 	mvn.w	r2, #2
 800784e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3b20      	subs	r3, #32
 8007854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007856:	68fb      	ldr	r3, [r7, #12]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	08007869 	.word	0x08007869

08007868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800786e:	2300      	movs	r3, #0
 8007870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007872:	4b12      	ldr	r3, [pc, #72]	; (80078bc <prvTaskExitError+0x54>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d00a      	beq.n	8007892 <prvTaskExitError+0x2a>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	60fb      	str	r3, [r7, #12]
}
 800788e:	bf00      	nop
 8007890:	e7fe      	b.n	8007890 <prvTaskExitError+0x28>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	60bb      	str	r3, [r7, #8]
}
 80078a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078a6:	bf00      	nop
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0fc      	beq.n	80078a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	2000000c 	.word	0x2000000c

080078c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <pxCurrentTCBConst2>)
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	6808      	ldr	r0, [r1, #0]
 80078c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ca:	f380 8809 	msr	PSP, r0
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f380 8811 	msr	BASEPRI, r0
 80078da:	4770      	bx	lr
 80078dc:	f3af 8000 	nop.w

080078e0 <pxCurrentTCBConst2>:
 80078e0:	20000548 	.word	0x20000548
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop

080078e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078e8:	4808      	ldr	r0, [pc, #32]	; (800790c <prvPortStartFirstTask+0x24>)
 80078ea:	6800      	ldr	r0, [r0, #0]
 80078ec:	6800      	ldr	r0, [r0, #0]
 80078ee:	f380 8808 	msr	MSP, r0
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8814 	msr	CONTROL, r0
 80078fa:	b662      	cpsie	i
 80078fc:	b661      	cpsie	f
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	df00      	svc	0
 8007908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800790a:	bf00      	nop
 800790c:	e000ed08 	.word	0xe000ed08

08007910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007916:	4b46      	ldr	r3, [pc, #280]	; (8007a30 <xPortStartScheduler+0x120>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a46      	ldr	r2, [pc, #280]	; (8007a34 <xPortStartScheduler+0x124>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d10a      	bne.n	8007936 <xPortStartScheduler+0x26>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	613b      	str	r3, [r7, #16]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007936:	4b3e      	ldr	r3, [pc, #248]	; (8007a30 <xPortStartScheduler+0x120>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a3f      	ldr	r2, [pc, #252]	; (8007a38 <xPortStartScheduler+0x128>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d10a      	bne.n	8007956 <xPortStartScheduler+0x46>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	60fb      	str	r3, [r7, #12]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007956:	4b39      	ldr	r3, [pc, #228]	; (8007a3c <xPortStartScheduler+0x12c>)
 8007958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	22ff      	movs	r2, #255	; 0xff
 8007966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007978:	b2da      	uxtb	r2, r3
 800797a:	4b31      	ldr	r3, [pc, #196]	; (8007a40 <xPortStartScheduler+0x130>)
 800797c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800797e:	4b31      	ldr	r3, [pc, #196]	; (8007a44 <xPortStartScheduler+0x134>)
 8007980:	2207      	movs	r2, #7
 8007982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007984:	e009      	b.n	800799a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007986:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <xPortStartScheduler+0x134>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	4a2d      	ldr	r2, [pc, #180]	; (8007a44 <xPortStartScheduler+0x134>)
 800798e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	b2db      	uxtb	r3, r3
 8007998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a2:	2b80      	cmp	r3, #128	; 0x80
 80079a4:	d0ef      	beq.n	8007986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079a6:	4b27      	ldr	r3, [pc, #156]	; (8007a44 <xPortStartScheduler+0x134>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f1c3 0307 	rsb	r3, r3, #7
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d00a      	beq.n	80079c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60bb      	str	r3, [r7, #8]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079c8:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <xPortStartScheduler+0x134>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <xPortStartScheduler+0x134>)
 80079d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <xPortStartScheduler+0x134>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079da:	4a1a      	ldr	r2, [pc, #104]	; (8007a44 <xPortStartScheduler+0x134>)
 80079dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079e6:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <xPortStartScheduler+0x138>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <xPortStartScheduler+0x138>)
 80079ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079f2:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <xPortStartScheduler+0x138>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a14      	ldr	r2, [pc, #80]	; (8007a48 <xPortStartScheduler+0x138>)
 80079f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079fe:	f000 f8dd 	bl	8007bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a02:	4b12      	ldr	r3, [pc, #72]	; (8007a4c <xPortStartScheduler+0x13c>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a08:	f000 f8fc 	bl	8007c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a0c:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <xPortStartScheduler+0x140>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a0f      	ldr	r2, [pc, #60]	; (8007a50 <xPortStartScheduler+0x140>)
 8007a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a18:	f7ff ff66 	bl	80078e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a1c:	f7ff fba0 	bl	8007160 <vTaskSwitchContext>
	prvTaskExitError();
 8007a20:	f7ff ff22 	bl	8007868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	e000ed00 	.word	0xe000ed00
 8007a34:	410fc271 	.word	0x410fc271
 8007a38:	410fc270 	.word	0x410fc270
 8007a3c:	e000e400 	.word	0xe000e400
 8007a40:	20000674 	.word	0x20000674
 8007a44:	20000678 	.word	0x20000678
 8007a48:	e000ed20 	.word	0xe000ed20
 8007a4c:	2000000c 	.word	0x2000000c
 8007a50:	e000ef34 	.word	0xe000ef34

08007a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	607b      	str	r3, [r7, #4]
}
 8007a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <vPortEnterCritical+0x58>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	4a0d      	ldr	r2, [pc, #52]	; (8007aac <vPortEnterCritical+0x58>)
 8007a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a78:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <vPortEnterCritical+0x58>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d10f      	bne.n	8007aa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a80:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <vPortEnterCritical+0x5c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	603b      	str	r3, [r7, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <vPortEnterCritical+0x4a>
	}
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	2000000c 	.word	0x2000000c
 8007ab0:	e000ed04 	.word	0xe000ed04

08007ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007aba:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <vPortExitCritical+0x50>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <vPortExitCritical+0x24>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	607b      	str	r3, [r7, #4]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <vPortExitCritical+0x50>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <vPortExitCritical+0x50>)
 8007ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ae2:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <vPortExitCritical+0x50>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <vPortExitCritical+0x42>
 8007aea:	2300      	movs	r3, #0
 8007aec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	2000000c 	.word	0x2000000c
	...

08007b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b10:	f3ef 8009 	mrs	r0, PSP
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <pxCurrentTCBConst>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	f01e 0f10 	tst.w	lr, #16
 8007b20:	bf08      	it	eq
 8007b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	6010      	str	r0, [r2, #0]
 8007b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b34:	f380 8811 	msr	BASEPRI, r0
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f7ff fb0e 	bl	8007160 <vTaskSwitchContext>
 8007b44:	f04f 0000 	mov.w	r0, #0
 8007b48:	f380 8811 	msr	BASEPRI, r0
 8007b4c:	bc09      	pop	{r0, r3}
 8007b4e:	6819      	ldr	r1, [r3, #0]
 8007b50:	6808      	ldr	r0, [r1, #0]
 8007b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b56:	f01e 0f10 	tst.w	lr, #16
 8007b5a:	bf08      	it	eq
 8007b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b60:	f380 8809 	msr	PSP, r0
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	f3af 8000 	nop.w

08007b70 <pxCurrentTCBConst>:
 8007b70:	20000548 	.word	0x20000548
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	607b      	str	r3, [r7, #4]
}
 8007b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b92:	f7ff fa2d 	bl	8006ff0 <xTaskIncrementTick>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b9c:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <SysTick_Handler+0x40>)
 8007b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	f383 8811 	msr	BASEPRI, r3
}
 8007bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <vPortSetupTimerInterrupt+0x34>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <vPortSetupTimerInterrupt+0x38>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <vPortSetupTimerInterrupt+0x3c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <vPortSetupTimerInterrupt+0x40>)
 8007bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd6:	099b      	lsrs	r3, r3, #6
 8007bd8:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <vPortSetupTimerInterrupt+0x44>)
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bde:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <vPortSetupTimerInterrupt+0x34>)
 8007be0:	2207      	movs	r2, #7
 8007be2:	601a      	str	r2, [r3, #0]
}
 8007be4:	bf00      	nop
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	e000e010 	.word	0xe000e010
 8007bf4:	e000e018 	.word	0xe000e018
 8007bf8:	20000000 	.word	0x20000000
 8007bfc:	10624dd3 	.word	0x10624dd3
 8007c00:	e000e014 	.word	0xe000e014

08007c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c14 <vPortEnableVFP+0x10>
 8007c08:	6801      	ldr	r1, [r0, #0]
 8007c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c0e:	6001      	str	r1, [r0, #0]
 8007c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c12:	bf00      	nop
 8007c14:	e000ed88 	.word	0xe000ed88

08007c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08a      	sub	sp, #40	; 0x28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c24:	f7ff f93a 	bl	8006e9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c28:	4b5b      	ldr	r3, [pc, #364]	; (8007d98 <pvPortMalloc+0x180>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c30:	f000 f920 	bl	8007e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c34:	4b59      	ldr	r3, [pc, #356]	; (8007d9c <pvPortMalloc+0x184>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f040 8093 	bne.w	8007d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01d      	beq.n	8007c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c48:	2208      	movs	r2, #8
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d014      	beq.n	8007c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f023 0307 	bic.w	r3, r3, #7
 8007c60:	3308      	adds	r3, #8
 8007c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <pvPortMalloc+0x6c>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	617b      	str	r3, [r7, #20]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d06e      	beq.n	8007d68 <pvPortMalloc+0x150>
 8007c8a:	4b45      	ldr	r3, [pc, #276]	; (8007da0 <pvPortMalloc+0x188>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d869      	bhi.n	8007d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c94:	4b43      	ldr	r3, [pc, #268]	; (8007da4 <pvPortMalloc+0x18c>)
 8007c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c98:	4b42      	ldr	r3, [pc, #264]	; (8007da4 <pvPortMalloc+0x18c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c9e:	e004      	b.n	8007caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d903      	bls.n	8007cbc <pvPortMalloc+0xa4>
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1f1      	bne.n	8007ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cbc:	4b36      	ldr	r3, [pc, #216]	; (8007d98 <pvPortMalloc+0x180>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d050      	beq.n	8007d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2208      	movs	r2, #8
 8007ccc:	4413      	add	r3, r2
 8007cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	1ad2      	subs	r2, r2, r3
 8007ce0:	2308      	movs	r3, #8
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d91f      	bls.n	8007d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4413      	add	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <pvPortMalloc+0xf8>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	613b      	str	r3, [r7, #16]
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	1ad2      	subs	r2, r2, r3
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d22:	69b8      	ldr	r0, [r7, #24]
 8007d24:	f000 f908 	bl	8007f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d28:	4b1d      	ldr	r3, [pc, #116]	; (8007da0 <pvPortMalloc+0x188>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	4a1b      	ldr	r2, [pc, #108]	; (8007da0 <pvPortMalloc+0x188>)
 8007d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d36:	4b1a      	ldr	r3, [pc, #104]	; (8007da0 <pvPortMalloc+0x188>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	4b1b      	ldr	r3, [pc, #108]	; (8007da8 <pvPortMalloc+0x190>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d203      	bcs.n	8007d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d42:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <pvPortMalloc+0x188>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a18      	ldr	r2, [pc, #96]	; (8007da8 <pvPortMalloc+0x190>)
 8007d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <pvPortMalloc+0x184>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	431a      	orrs	r2, r3
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d5e:	4b13      	ldr	r3, [pc, #76]	; (8007dac <pvPortMalloc+0x194>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3301      	adds	r3, #1
 8007d64:	4a11      	ldr	r2, [pc, #68]	; (8007dac <pvPortMalloc+0x194>)
 8007d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d68:	f7ff f8a6 	bl	8006eb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f003 0307 	and.w	r3, r3, #7
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <pvPortMalloc+0x174>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	60fb      	str	r3, [r7, #12]
}
 8007d88:	bf00      	nop
 8007d8a:	e7fe      	b.n	8007d8a <pvPortMalloc+0x172>
	return pvReturn;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3728      	adds	r7, #40	; 0x28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20004284 	.word	0x20004284
 8007d9c:	20004298 	.word	0x20004298
 8007da0:	20004288 	.word	0x20004288
 8007da4:	2000427c 	.word	0x2000427c
 8007da8:	2000428c 	.word	0x2000428c
 8007dac:	20004290 	.word	0x20004290

08007db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d04d      	beq.n	8007e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	425b      	negs	r3, r3
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	4413      	add	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	4b24      	ldr	r3, [pc, #144]	; (8007e68 <vPortFree+0xb8>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10a      	bne.n	8007df4 <vPortFree+0x44>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	60fb      	str	r3, [r7, #12]
}
 8007df0:	bf00      	nop
 8007df2:	e7fe      	b.n	8007df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <vPortFree+0x62>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	60bb      	str	r3, [r7, #8]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <vPortFree+0xb8>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01e      	beq.n	8007e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d11a      	bne.n	8007e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	4b0e      	ldr	r3, [pc, #56]	; (8007e68 <vPortFree+0xb8>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	43db      	mvns	r3, r3
 8007e32:	401a      	ands	r2, r3
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e38:	f7ff f830 	bl	8006e9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <vPortFree+0xbc>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4413      	add	r3, r2
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <vPortFree+0xbc>)
 8007e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e4a:	6938      	ldr	r0, [r7, #16]
 8007e4c:	f000 f874 	bl	8007f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e50:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <vPortFree+0xc0>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3301      	adds	r3, #1
 8007e56:	4a06      	ldr	r2, [pc, #24]	; (8007e70 <vPortFree+0xc0>)
 8007e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e5a:	f7ff f82d 	bl	8006eb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e5e:	bf00      	nop
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20004298 	.word	0x20004298
 8007e6c:	20004288 	.word	0x20004288
 8007e70:	20004294 	.word	0x20004294

08007e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e80:	4b27      	ldr	r3, [pc, #156]	; (8007f20 <prvHeapInit+0xac>)
 8007e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00c      	beq.n	8007ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3307      	adds	r3, #7
 8007e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0307 	bic.w	r3, r3, #7
 8007e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <prvHeapInit+0xac>)
 8007ea4:	4413      	add	r3, r2
 8007ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007eac:	4a1d      	ldr	r2, [pc, #116]	; (8007f24 <prvHeapInit+0xb0>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007eb2:	4b1c      	ldr	r3, [pc, #112]	; (8007f24 <prvHeapInit+0xb0>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	1a9b      	subs	r3, r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0307 	bic.w	r3, r3, #7
 8007ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <prvHeapInit+0xb4>)
 8007ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ed6:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <prvHeapInit+0xb4>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2200      	movs	r2, #0
 8007edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ede:	4b12      	ldr	r3, [pc, #72]	; (8007f28 <prvHeapInit+0xb4>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	1ad2      	subs	r2, r2, r3
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ef4:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <prvHeapInit+0xb4>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <prvHeapInit+0xb8>)
 8007f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <prvHeapInit+0xbc>)
 8007f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f0c:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <prvHeapInit+0xc0>)
 8007f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f12:	601a      	str	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	2000067c 	.word	0x2000067c
 8007f24:	2000427c 	.word	0x2000427c
 8007f28:	20004284 	.word	0x20004284
 8007f2c:	2000428c 	.word	0x2000428c
 8007f30:	20004288 	.word	0x20004288
 8007f34:	20004298 	.word	0x20004298

08007f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f40:	4b28      	ldr	r3, [pc, #160]	; (8007fe4 <prvInsertBlockIntoFreeList+0xac>)
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	e002      	b.n	8007f4c <prvInsertBlockIntoFreeList+0x14>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d8f7      	bhi.n	8007f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	4413      	add	r3, r2
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d108      	bne.n	8007f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	441a      	add	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	441a      	add	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d118      	bne.n	8007fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4b15      	ldr	r3, [pc, #84]	; (8007fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d00d      	beq.n	8007fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	441a      	add	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	e008      	b.n	8007fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e003      	b.n	8007fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d002      	beq.n	8007fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	2000427c 	.word	0x2000427c
 8007fe8:	20004284 	.word	0x20004284

08007fec <siprintf>:
 8007fec:	b40e      	push	{r1, r2, r3}
 8007fee:	b500      	push	{lr}
 8007ff0:	b09c      	sub	sp, #112	; 0x70
 8007ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ff4:	9002      	str	r0, [sp, #8]
 8007ff6:	9006      	str	r0, [sp, #24]
 8007ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ffc:	4809      	ldr	r0, [pc, #36]	; (8008024 <siprintf+0x38>)
 8007ffe:	9107      	str	r1, [sp, #28]
 8008000:	9104      	str	r1, [sp, #16]
 8008002:	4909      	ldr	r1, [pc, #36]	; (8008028 <siprintf+0x3c>)
 8008004:	f853 2b04 	ldr.w	r2, [r3], #4
 8008008:	9105      	str	r1, [sp, #20]
 800800a:	6800      	ldr	r0, [r0, #0]
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	a902      	add	r1, sp, #8
 8008010:	f000 f9f6 	bl	8008400 <_svfiprintf_r>
 8008014:	9b02      	ldr	r3, [sp, #8]
 8008016:	2200      	movs	r2, #0
 8008018:	701a      	strb	r2, [r3, #0]
 800801a:	b01c      	add	sp, #112	; 0x70
 800801c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008020:	b003      	add	sp, #12
 8008022:	4770      	bx	lr
 8008024:	2000005c 	.word	0x2000005c
 8008028:	ffff0208 	.word	0xffff0208

0800802c <memset>:
 800802c:	4402      	add	r2, r0
 800802e:	4603      	mov	r3, r0
 8008030:	4293      	cmp	r3, r2
 8008032:	d100      	bne.n	8008036 <memset+0xa>
 8008034:	4770      	bx	lr
 8008036:	f803 1b01 	strb.w	r1, [r3], #1
 800803a:	e7f9      	b.n	8008030 <memset+0x4>

0800803c <_reclaim_reent>:
 800803c:	4b29      	ldr	r3, [pc, #164]	; (80080e4 <_reclaim_reent+0xa8>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4283      	cmp	r3, r0
 8008042:	b570      	push	{r4, r5, r6, lr}
 8008044:	4604      	mov	r4, r0
 8008046:	d04b      	beq.n	80080e0 <_reclaim_reent+0xa4>
 8008048:	69c3      	ldr	r3, [r0, #28]
 800804a:	b143      	cbz	r3, 800805e <_reclaim_reent+0x22>
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d144      	bne.n	80080dc <_reclaim_reent+0xa0>
 8008052:	69e3      	ldr	r3, [r4, #28]
 8008054:	6819      	ldr	r1, [r3, #0]
 8008056:	b111      	cbz	r1, 800805e <_reclaim_reent+0x22>
 8008058:	4620      	mov	r0, r4
 800805a:	f000 f87f 	bl	800815c <_free_r>
 800805e:	6961      	ldr	r1, [r4, #20]
 8008060:	b111      	cbz	r1, 8008068 <_reclaim_reent+0x2c>
 8008062:	4620      	mov	r0, r4
 8008064:	f000 f87a 	bl	800815c <_free_r>
 8008068:	69e1      	ldr	r1, [r4, #28]
 800806a:	b111      	cbz	r1, 8008072 <_reclaim_reent+0x36>
 800806c:	4620      	mov	r0, r4
 800806e:	f000 f875 	bl	800815c <_free_r>
 8008072:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008074:	b111      	cbz	r1, 800807c <_reclaim_reent+0x40>
 8008076:	4620      	mov	r0, r4
 8008078:	f000 f870 	bl	800815c <_free_r>
 800807c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800807e:	b111      	cbz	r1, 8008086 <_reclaim_reent+0x4a>
 8008080:	4620      	mov	r0, r4
 8008082:	f000 f86b 	bl	800815c <_free_r>
 8008086:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008088:	b111      	cbz	r1, 8008090 <_reclaim_reent+0x54>
 800808a:	4620      	mov	r0, r4
 800808c:	f000 f866 	bl	800815c <_free_r>
 8008090:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008092:	b111      	cbz	r1, 800809a <_reclaim_reent+0x5e>
 8008094:	4620      	mov	r0, r4
 8008096:	f000 f861 	bl	800815c <_free_r>
 800809a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800809c:	b111      	cbz	r1, 80080a4 <_reclaim_reent+0x68>
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 f85c 	bl	800815c <_free_r>
 80080a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80080a6:	b111      	cbz	r1, 80080ae <_reclaim_reent+0x72>
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 f857 	bl	800815c <_free_r>
 80080ae:	6a23      	ldr	r3, [r4, #32]
 80080b0:	b1b3      	cbz	r3, 80080e0 <_reclaim_reent+0xa4>
 80080b2:	4620      	mov	r0, r4
 80080b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080b8:	4718      	bx	r3
 80080ba:	5949      	ldr	r1, [r1, r5]
 80080bc:	b941      	cbnz	r1, 80080d0 <_reclaim_reent+0x94>
 80080be:	3504      	adds	r5, #4
 80080c0:	69e3      	ldr	r3, [r4, #28]
 80080c2:	2d80      	cmp	r5, #128	; 0x80
 80080c4:	68d9      	ldr	r1, [r3, #12]
 80080c6:	d1f8      	bne.n	80080ba <_reclaim_reent+0x7e>
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 f847 	bl	800815c <_free_r>
 80080ce:	e7c0      	b.n	8008052 <_reclaim_reent+0x16>
 80080d0:	680e      	ldr	r6, [r1, #0]
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 f842 	bl	800815c <_free_r>
 80080d8:	4631      	mov	r1, r6
 80080da:	e7ef      	b.n	80080bc <_reclaim_reent+0x80>
 80080dc:	2500      	movs	r5, #0
 80080de:	e7ef      	b.n	80080c0 <_reclaim_reent+0x84>
 80080e0:	bd70      	pop	{r4, r5, r6, pc}
 80080e2:	bf00      	nop
 80080e4:	2000005c 	.word	0x2000005c

080080e8 <__errno>:
 80080e8:	4b01      	ldr	r3, [pc, #4]	; (80080f0 <__errno+0x8>)
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	2000005c 	.word	0x2000005c

080080f4 <__libc_init_array>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	4d0d      	ldr	r5, [pc, #52]	; (800812c <__libc_init_array+0x38>)
 80080f8:	4c0d      	ldr	r4, [pc, #52]	; (8008130 <__libc_init_array+0x3c>)
 80080fa:	1b64      	subs	r4, r4, r5
 80080fc:	10a4      	asrs	r4, r4, #2
 80080fe:	2600      	movs	r6, #0
 8008100:	42a6      	cmp	r6, r4
 8008102:	d109      	bne.n	8008118 <__libc_init_array+0x24>
 8008104:	4d0b      	ldr	r5, [pc, #44]	; (8008134 <__libc_init_array+0x40>)
 8008106:	4c0c      	ldr	r4, [pc, #48]	; (8008138 <__libc_init_array+0x44>)
 8008108:	f000 fc6a 	bl	80089e0 <_init>
 800810c:	1b64      	subs	r4, r4, r5
 800810e:	10a4      	asrs	r4, r4, #2
 8008110:	2600      	movs	r6, #0
 8008112:	42a6      	cmp	r6, r4
 8008114:	d105      	bne.n	8008122 <__libc_init_array+0x2e>
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	f855 3b04 	ldr.w	r3, [r5], #4
 800811c:	4798      	blx	r3
 800811e:	3601      	adds	r6, #1
 8008120:	e7ee      	b.n	8008100 <__libc_init_array+0xc>
 8008122:	f855 3b04 	ldr.w	r3, [r5], #4
 8008126:	4798      	blx	r3
 8008128:	3601      	adds	r6, #1
 800812a:	e7f2      	b.n	8008112 <__libc_init_array+0x1e>
 800812c:	08008bc4 	.word	0x08008bc4
 8008130:	08008bc4 	.word	0x08008bc4
 8008134:	08008bc4 	.word	0x08008bc4
 8008138:	08008bc8 	.word	0x08008bc8

0800813c <__retarget_lock_acquire_recursive>:
 800813c:	4770      	bx	lr

0800813e <__retarget_lock_release_recursive>:
 800813e:	4770      	bx	lr

08008140 <memcpy>:
 8008140:	440a      	add	r2, r1
 8008142:	4291      	cmp	r1, r2
 8008144:	f100 33ff 	add.w	r3, r0, #4294967295
 8008148:	d100      	bne.n	800814c <memcpy+0xc>
 800814a:	4770      	bx	lr
 800814c:	b510      	push	{r4, lr}
 800814e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008156:	4291      	cmp	r1, r2
 8008158:	d1f9      	bne.n	800814e <memcpy+0xe>
 800815a:	bd10      	pop	{r4, pc}

0800815c <_free_r>:
 800815c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800815e:	2900      	cmp	r1, #0
 8008160:	d044      	beq.n	80081ec <_free_r+0x90>
 8008162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008166:	9001      	str	r0, [sp, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	f1a1 0404 	sub.w	r4, r1, #4
 800816e:	bfb8      	it	lt
 8008170:	18e4      	addlt	r4, r4, r3
 8008172:	f000 f8df 	bl	8008334 <__malloc_lock>
 8008176:	4a1e      	ldr	r2, [pc, #120]	; (80081f0 <_free_r+0x94>)
 8008178:	9801      	ldr	r0, [sp, #4]
 800817a:	6813      	ldr	r3, [r2, #0]
 800817c:	b933      	cbnz	r3, 800818c <_free_r+0x30>
 800817e:	6063      	str	r3, [r4, #4]
 8008180:	6014      	str	r4, [r2, #0]
 8008182:	b003      	add	sp, #12
 8008184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008188:	f000 b8da 	b.w	8008340 <__malloc_unlock>
 800818c:	42a3      	cmp	r3, r4
 800818e:	d908      	bls.n	80081a2 <_free_r+0x46>
 8008190:	6825      	ldr	r5, [r4, #0]
 8008192:	1961      	adds	r1, r4, r5
 8008194:	428b      	cmp	r3, r1
 8008196:	bf01      	itttt	eq
 8008198:	6819      	ldreq	r1, [r3, #0]
 800819a:	685b      	ldreq	r3, [r3, #4]
 800819c:	1949      	addeq	r1, r1, r5
 800819e:	6021      	streq	r1, [r4, #0]
 80081a0:	e7ed      	b.n	800817e <_free_r+0x22>
 80081a2:	461a      	mov	r2, r3
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	b10b      	cbz	r3, 80081ac <_free_r+0x50>
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	d9fa      	bls.n	80081a2 <_free_r+0x46>
 80081ac:	6811      	ldr	r1, [r2, #0]
 80081ae:	1855      	adds	r5, r2, r1
 80081b0:	42a5      	cmp	r5, r4
 80081b2:	d10b      	bne.n	80081cc <_free_r+0x70>
 80081b4:	6824      	ldr	r4, [r4, #0]
 80081b6:	4421      	add	r1, r4
 80081b8:	1854      	adds	r4, r2, r1
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	6011      	str	r1, [r2, #0]
 80081be:	d1e0      	bne.n	8008182 <_free_r+0x26>
 80081c0:	681c      	ldr	r4, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	6053      	str	r3, [r2, #4]
 80081c6:	440c      	add	r4, r1
 80081c8:	6014      	str	r4, [r2, #0]
 80081ca:	e7da      	b.n	8008182 <_free_r+0x26>
 80081cc:	d902      	bls.n	80081d4 <_free_r+0x78>
 80081ce:	230c      	movs	r3, #12
 80081d0:	6003      	str	r3, [r0, #0]
 80081d2:	e7d6      	b.n	8008182 <_free_r+0x26>
 80081d4:	6825      	ldr	r5, [r4, #0]
 80081d6:	1961      	adds	r1, r4, r5
 80081d8:	428b      	cmp	r3, r1
 80081da:	bf04      	itt	eq
 80081dc:	6819      	ldreq	r1, [r3, #0]
 80081de:	685b      	ldreq	r3, [r3, #4]
 80081e0:	6063      	str	r3, [r4, #4]
 80081e2:	bf04      	itt	eq
 80081e4:	1949      	addeq	r1, r1, r5
 80081e6:	6021      	streq	r1, [r4, #0]
 80081e8:	6054      	str	r4, [r2, #4]
 80081ea:	e7ca      	b.n	8008182 <_free_r+0x26>
 80081ec:	b003      	add	sp, #12
 80081ee:	bd30      	pop	{r4, r5, pc}
 80081f0:	200043dc 	.word	0x200043dc

080081f4 <sbrk_aligned>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	4e0e      	ldr	r6, [pc, #56]	; (8008230 <sbrk_aligned+0x3c>)
 80081f8:	460c      	mov	r4, r1
 80081fa:	6831      	ldr	r1, [r6, #0]
 80081fc:	4605      	mov	r5, r0
 80081fe:	b911      	cbnz	r1, 8008206 <sbrk_aligned+0x12>
 8008200:	f000 fba6 	bl	8008950 <_sbrk_r>
 8008204:	6030      	str	r0, [r6, #0]
 8008206:	4621      	mov	r1, r4
 8008208:	4628      	mov	r0, r5
 800820a:	f000 fba1 	bl	8008950 <_sbrk_r>
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	d00a      	beq.n	8008228 <sbrk_aligned+0x34>
 8008212:	1cc4      	adds	r4, r0, #3
 8008214:	f024 0403 	bic.w	r4, r4, #3
 8008218:	42a0      	cmp	r0, r4
 800821a:	d007      	beq.n	800822c <sbrk_aligned+0x38>
 800821c:	1a21      	subs	r1, r4, r0
 800821e:	4628      	mov	r0, r5
 8008220:	f000 fb96 	bl	8008950 <_sbrk_r>
 8008224:	3001      	adds	r0, #1
 8008226:	d101      	bne.n	800822c <sbrk_aligned+0x38>
 8008228:	f04f 34ff 	mov.w	r4, #4294967295
 800822c:	4620      	mov	r0, r4
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	200043e0 	.word	0x200043e0

08008234 <_malloc_r>:
 8008234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008238:	1ccd      	adds	r5, r1, #3
 800823a:	f025 0503 	bic.w	r5, r5, #3
 800823e:	3508      	adds	r5, #8
 8008240:	2d0c      	cmp	r5, #12
 8008242:	bf38      	it	cc
 8008244:	250c      	movcc	r5, #12
 8008246:	2d00      	cmp	r5, #0
 8008248:	4607      	mov	r7, r0
 800824a:	db01      	blt.n	8008250 <_malloc_r+0x1c>
 800824c:	42a9      	cmp	r1, r5
 800824e:	d905      	bls.n	800825c <_malloc_r+0x28>
 8008250:	230c      	movs	r3, #12
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	2600      	movs	r6, #0
 8008256:	4630      	mov	r0, r6
 8008258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800825c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008330 <_malloc_r+0xfc>
 8008260:	f000 f868 	bl	8008334 <__malloc_lock>
 8008264:	f8d8 3000 	ldr.w	r3, [r8]
 8008268:	461c      	mov	r4, r3
 800826a:	bb5c      	cbnz	r4, 80082c4 <_malloc_r+0x90>
 800826c:	4629      	mov	r1, r5
 800826e:	4638      	mov	r0, r7
 8008270:	f7ff ffc0 	bl	80081f4 <sbrk_aligned>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	4604      	mov	r4, r0
 8008278:	d155      	bne.n	8008326 <_malloc_r+0xf2>
 800827a:	f8d8 4000 	ldr.w	r4, [r8]
 800827e:	4626      	mov	r6, r4
 8008280:	2e00      	cmp	r6, #0
 8008282:	d145      	bne.n	8008310 <_malloc_r+0xdc>
 8008284:	2c00      	cmp	r4, #0
 8008286:	d048      	beq.n	800831a <_malloc_r+0xe6>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	4631      	mov	r1, r6
 800828c:	4638      	mov	r0, r7
 800828e:	eb04 0903 	add.w	r9, r4, r3
 8008292:	f000 fb5d 	bl	8008950 <_sbrk_r>
 8008296:	4581      	cmp	r9, r0
 8008298:	d13f      	bne.n	800831a <_malloc_r+0xe6>
 800829a:	6821      	ldr	r1, [r4, #0]
 800829c:	1a6d      	subs	r5, r5, r1
 800829e:	4629      	mov	r1, r5
 80082a0:	4638      	mov	r0, r7
 80082a2:	f7ff ffa7 	bl	80081f4 <sbrk_aligned>
 80082a6:	3001      	adds	r0, #1
 80082a8:	d037      	beq.n	800831a <_malloc_r+0xe6>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	442b      	add	r3, r5
 80082ae:	6023      	str	r3, [r4, #0]
 80082b0:	f8d8 3000 	ldr.w	r3, [r8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d038      	beq.n	800832a <_malloc_r+0xf6>
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	42a2      	cmp	r2, r4
 80082bc:	d12b      	bne.n	8008316 <_malloc_r+0xe2>
 80082be:	2200      	movs	r2, #0
 80082c0:	605a      	str	r2, [r3, #4]
 80082c2:	e00f      	b.n	80082e4 <_malloc_r+0xb0>
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	1b52      	subs	r2, r2, r5
 80082c8:	d41f      	bmi.n	800830a <_malloc_r+0xd6>
 80082ca:	2a0b      	cmp	r2, #11
 80082cc:	d917      	bls.n	80082fe <_malloc_r+0xca>
 80082ce:	1961      	adds	r1, r4, r5
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	6025      	str	r5, [r4, #0]
 80082d4:	bf18      	it	ne
 80082d6:	6059      	strne	r1, [r3, #4]
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	bf08      	it	eq
 80082dc:	f8c8 1000 	streq.w	r1, [r8]
 80082e0:	5162      	str	r2, [r4, r5]
 80082e2:	604b      	str	r3, [r1, #4]
 80082e4:	4638      	mov	r0, r7
 80082e6:	f104 060b 	add.w	r6, r4, #11
 80082ea:	f000 f829 	bl	8008340 <__malloc_unlock>
 80082ee:	f026 0607 	bic.w	r6, r6, #7
 80082f2:	1d23      	adds	r3, r4, #4
 80082f4:	1af2      	subs	r2, r6, r3
 80082f6:	d0ae      	beq.n	8008256 <_malloc_r+0x22>
 80082f8:	1b9b      	subs	r3, r3, r6
 80082fa:	50a3      	str	r3, [r4, r2]
 80082fc:	e7ab      	b.n	8008256 <_malloc_r+0x22>
 80082fe:	42a3      	cmp	r3, r4
 8008300:	6862      	ldr	r2, [r4, #4]
 8008302:	d1dd      	bne.n	80082c0 <_malloc_r+0x8c>
 8008304:	f8c8 2000 	str.w	r2, [r8]
 8008308:	e7ec      	b.n	80082e4 <_malloc_r+0xb0>
 800830a:	4623      	mov	r3, r4
 800830c:	6864      	ldr	r4, [r4, #4]
 800830e:	e7ac      	b.n	800826a <_malloc_r+0x36>
 8008310:	4634      	mov	r4, r6
 8008312:	6876      	ldr	r6, [r6, #4]
 8008314:	e7b4      	b.n	8008280 <_malloc_r+0x4c>
 8008316:	4613      	mov	r3, r2
 8008318:	e7cc      	b.n	80082b4 <_malloc_r+0x80>
 800831a:	230c      	movs	r3, #12
 800831c:	603b      	str	r3, [r7, #0]
 800831e:	4638      	mov	r0, r7
 8008320:	f000 f80e 	bl	8008340 <__malloc_unlock>
 8008324:	e797      	b.n	8008256 <_malloc_r+0x22>
 8008326:	6025      	str	r5, [r4, #0]
 8008328:	e7dc      	b.n	80082e4 <_malloc_r+0xb0>
 800832a:	605b      	str	r3, [r3, #4]
 800832c:	deff      	udf	#255	; 0xff
 800832e:	bf00      	nop
 8008330:	200043dc 	.word	0x200043dc

08008334 <__malloc_lock>:
 8008334:	4801      	ldr	r0, [pc, #4]	; (800833c <__malloc_lock+0x8>)
 8008336:	f7ff bf01 	b.w	800813c <__retarget_lock_acquire_recursive>
 800833a:	bf00      	nop
 800833c:	200043d8 	.word	0x200043d8

08008340 <__malloc_unlock>:
 8008340:	4801      	ldr	r0, [pc, #4]	; (8008348 <__malloc_unlock+0x8>)
 8008342:	f7ff befc 	b.w	800813e <__retarget_lock_release_recursive>
 8008346:	bf00      	nop
 8008348:	200043d8 	.word	0x200043d8

0800834c <__ssputs_r>:
 800834c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008350:	688e      	ldr	r6, [r1, #8]
 8008352:	461f      	mov	r7, r3
 8008354:	42be      	cmp	r6, r7
 8008356:	680b      	ldr	r3, [r1, #0]
 8008358:	4682      	mov	sl, r0
 800835a:	460c      	mov	r4, r1
 800835c:	4690      	mov	r8, r2
 800835e:	d82c      	bhi.n	80083ba <__ssputs_r+0x6e>
 8008360:	898a      	ldrh	r2, [r1, #12]
 8008362:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008366:	d026      	beq.n	80083b6 <__ssputs_r+0x6a>
 8008368:	6965      	ldr	r5, [r4, #20]
 800836a:	6909      	ldr	r1, [r1, #16]
 800836c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008370:	eba3 0901 	sub.w	r9, r3, r1
 8008374:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008378:	1c7b      	adds	r3, r7, #1
 800837a:	444b      	add	r3, r9
 800837c:	106d      	asrs	r5, r5, #1
 800837e:	429d      	cmp	r5, r3
 8008380:	bf38      	it	cc
 8008382:	461d      	movcc	r5, r3
 8008384:	0553      	lsls	r3, r2, #21
 8008386:	d527      	bpl.n	80083d8 <__ssputs_r+0x8c>
 8008388:	4629      	mov	r1, r5
 800838a:	f7ff ff53 	bl	8008234 <_malloc_r>
 800838e:	4606      	mov	r6, r0
 8008390:	b360      	cbz	r0, 80083ec <__ssputs_r+0xa0>
 8008392:	6921      	ldr	r1, [r4, #16]
 8008394:	464a      	mov	r2, r9
 8008396:	f7ff fed3 	bl	8008140 <memcpy>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	6126      	str	r6, [r4, #16]
 80083a8:	6165      	str	r5, [r4, #20]
 80083aa:	444e      	add	r6, r9
 80083ac:	eba5 0509 	sub.w	r5, r5, r9
 80083b0:	6026      	str	r6, [r4, #0]
 80083b2:	60a5      	str	r5, [r4, #8]
 80083b4:	463e      	mov	r6, r7
 80083b6:	42be      	cmp	r6, r7
 80083b8:	d900      	bls.n	80083bc <__ssputs_r+0x70>
 80083ba:	463e      	mov	r6, r7
 80083bc:	6820      	ldr	r0, [r4, #0]
 80083be:	4632      	mov	r2, r6
 80083c0:	4641      	mov	r1, r8
 80083c2:	f000 faab 	bl	800891c <memmove>
 80083c6:	68a3      	ldr	r3, [r4, #8]
 80083c8:	1b9b      	subs	r3, r3, r6
 80083ca:	60a3      	str	r3, [r4, #8]
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	4433      	add	r3, r6
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	2000      	movs	r0, #0
 80083d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d8:	462a      	mov	r2, r5
 80083da:	f000 fac9 	bl	8008970 <_realloc_r>
 80083de:	4606      	mov	r6, r0
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1e0      	bne.n	80083a6 <__ssputs_r+0x5a>
 80083e4:	6921      	ldr	r1, [r4, #16]
 80083e6:	4650      	mov	r0, sl
 80083e8:	f7ff feb8 	bl	800815c <_free_r>
 80083ec:	230c      	movs	r3, #12
 80083ee:	f8ca 3000 	str.w	r3, [sl]
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295
 80083fe:	e7e9      	b.n	80083d4 <__ssputs_r+0x88>

08008400 <_svfiprintf_r>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	4698      	mov	r8, r3
 8008406:	898b      	ldrh	r3, [r1, #12]
 8008408:	061b      	lsls	r3, r3, #24
 800840a:	b09d      	sub	sp, #116	; 0x74
 800840c:	4607      	mov	r7, r0
 800840e:	460d      	mov	r5, r1
 8008410:	4614      	mov	r4, r2
 8008412:	d50e      	bpl.n	8008432 <_svfiprintf_r+0x32>
 8008414:	690b      	ldr	r3, [r1, #16]
 8008416:	b963      	cbnz	r3, 8008432 <_svfiprintf_r+0x32>
 8008418:	2140      	movs	r1, #64	; 0x40
 800841a:	f7ff ff0b 	bl	8008234 <_malloc_r>
 800841e:	6028      	str	r0, [r5, #0]
 8008420:	6128      	str	r0, [r5, #16]
 8008422:	b920      	cbnz	r0, 800842e <_svfiprintf_r+0x2e>
 8008424:	230c      	movs	r3, #12
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	f04f 30ff 	mov.w	r0, #4294967295
 800842c:	e0d0      	b.n	80085d0 <_svfiprintf_r+0x1d0>
 800842e:	2340      	movs	r3, #64	; 0x40
 8008430:	616b      	str	r3, [r5, #20]
 8008432:	2300      	movs	r3, #0
 8008434:	9309      	str	r3, [sp, #36]	; 0x24
 8008436:	2320      	movs	r3, #32
 8008438:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800843c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008440:	2330      	movs	r3, #48	; 0x30
 8008442:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80085e8 <_svfiprintf_r+0x1e8>
 8008446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800844a:	f04f 0901 	mov.w	r9, #1
 800844e:	4623      	mov	r3, r4
 8008450:	469a      	mov	sl, r3
 8008452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008456:	b10a      	cbz	r2, 800845c <_svfiprintf_r+0x5c>
 8008458:	2a25      	cmp	r2, #37	; 0x25
 800845a:	d1f9      	bne.n	8008450 <_svfiprintf_r+0x50>
 800845c:	ebba 0b04 	subs.w	fp, sl, r4
 8008460:	d00b      	beq.n	800847a <_svfiprintf_r+0x7a>
 8008462:	465b      	mov	r3, fp
 8008464:	4622      	mov	r2, r4
 8008466:	4629      	mov	r1, r5
 8008468:	4638      	mov	r0, r7
 800846a:	f7ff ff6f 	bl	800834c <__ssputs_r>
 800846e:	3001      	adds	r0, #1
 8008470:	f000 80a9 	beq.w	80085c6 <_svfiprintf_r+0x1c6>
 8008474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008476:	445a      	add	r2, fp
 8008478:	9209      	str	r2, [sp, #36]	; 0x24
 800847a:	f89a 3000 	ldrb.w	r3, [sl]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 80a1 	beq.w	80085c6 <_svfiprintf_r+0x1c6>
 8008484:	2300      	movs	r3, #0
 8008486:	f04f 32ff 	mov.w	r2, #4294967295
 800848a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800848e:	f10a 0a01 	add.w	sl, sl, #1
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	9307      	str	r3, [sp, #28]
 8008496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800849a:	931a      	str	r3, [sp, #104]	; 0x68
 800849c:	4654      	mov	r4, sl
 800849e:	2205      	movs	r2, #5
 80084a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a4:	4850      	ldr	r0, [pc, #320]	; (80085e8 <_svfiprintf_r+0x1e8>)
 80084a6:	f7f7 feab 	bl	8000200 <memchr>
 80084aa:	9a04      	ldr	r2, [sp, #16]
 80084ac:	b9d8      	cbnz	r0, 80084e6 <_svfiprintf_r+0xe6>
 80084ae:	06d0      	lsls	r0, r2, #27
 80084b0:	bf44      	itt	mi
 80084b2:	2320      	movmi	r3, #32
 80084b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b8:	0711      	lsls	r1, r2, #28
 80084ba:	bf44      	itt	mi
 80084bc:	232b      	movmi	r3, #43	; 0x2b
 80084be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084c2:	f89a 3000 	ldrb.w	r3, [sl]
 80084c6:	2b2a      	cmp	r3, #42	; 0x2a
 80084c8:	d015      	beq.n	80084f6 <_svfiprintf_r+0xf6>
 80084ca:	9a07      	ldr	r2, [sp, #28]
 80084cc:	4654      	mov	r4, sl
 80084ce:	2000      	movs	r0, #0
 80084d0:	f04f 0c0a 	mov.w	ip, #10
 80084d4:	4621      	mov	r1, r4
 80084d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084da:	3b30      	subs	r3, #48	; 0x30
 80084dc:	2b09      	cmp	r3, #9
 80084de:	d94d      	bls.n	800857c <_svfiprintf_r+0x17c>
 80084e0:	b1b0      	cbz	r0, 8008510 <_svfiprintf_r+0x110>
 80084e2:	9207      	str	r2, [sp, #28]
 80084e4:	e014      	b.n	8008510 <_svfiprintf_r+0x110>
 80084e6:	eba0 0308 	sub.w	r3, r0, r8
 80084ea:	fa09 f303 	lsl.w	r3, r9, r3
 80084ee:	4313      	orrs	r3, r2
 80084f0:	9304      	str	r3, [sp, #16]
 80084f2:	46a2      	mov	sl, r4
 80084f4:	e7d2      	b.n	800849c <_svfiprintf_r+0x9c>
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	1d19      	adds	r1, r3, #4
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	9103      	str	r1, [sp, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	bfbb      	ittet	lt
 8008502:	425b      	neglt	r3, r3
 8008504:	f042 0202 	orrlt.w	r2, r2, #2
 8008508:	9307      	strge	r3, [sp, #28]
 800850a:	9307      	strlt	r3, [sp, #28]
 800850c:	bfb8      	it	lt
 800850e:	9204      	strlt	r2, [sp, #16]
 8008510:	7823      	ldrb	r3, [r4, #0]
 8008512:	2b2e      	cmp	r3, #46	; 0x2e
 8008514:	d10c      	bne.n	8008530 <_svfiprintf_r+0x130>
 8008516:	7863      	ldrb	r3, [r4, #1]
 8008518:	2b2a      	cmp	r3, #42	; 0x2a
 800851a:	d134      	bne.n	8008586 <_svfiprintf_r+0x186>
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	1d1a      	adds	r2, r3, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	9203      	str	r2, [sp, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	bfb8      	it	lt
 8008528:	f04f 33ff 	movlt.w	r3, #4294967295
 800852c:	3402      	adds	r4, #2
 800852e:	9305      	str	r3, [sp, #20]
 8008530:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80085f8 <_svfiprintf_r+0x1f8>
 8008534:	7821      	ldrb	r1, [r4, #0]
 8008536:	2203      	movs	r2, #3
 8008538:	4650      	mov	r0, sl
 800853a:	f7f7 fe61 	bl	8000200 <memchr>
 800853e:	b138      	cbz	r0, 8008550 <_svfiprintf_r+0x150>
 8008540:	9b04      	ldr	r3, [sp, #16]
 8008542:	eba0 000a 	sub.w	r0, r0, sl
 8008546:	2240      	movs	r2, #64	; 0x40
 8008548:	4082      	lsls	r2, r0
 800854a:	4313      	orrs	r3, r2
 800854c:	3401      	adds	r4, #1
 800854e:	9304      	str	r3, [sp, #16]
 8008550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008554:	4825      	ldr	r0, [pc, #148]	; (80085ec <_svfiprintf_r+0x1ec>)
 8008556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800855a:	2206      	movs	r2, #6
 800855c:	f7f7 fe50 	bl	8000200 <memchr>
 8008560:	2800      	cmp	r0, #0
 8008562:	d038      	beq.n	80085d6 <_svfiprintf_r+0x1d6>
 8008564:	4b22      	ldr	r3, [pc, #136]	; (80085f0 <_svfiprintf_r+0x1f0>)
 8008566:	bb1b      	cbnz	r3, 80085b0 <_svfiprintf_r+0x1b0>
 8008568:	9b03      	ldr	r3, [sp, #12]
 800856a:	3307      	adds	r3, #7
 800856c:	f023 0307 	bic.w	r3, r3, #7
 8008570:	3308      	adds	r3, #8
 8008572:	9303      	str	r3, [sp, #12]
 8008574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008576:	4433      	add	r3, r6
 8008578:	9309      	str	r3, [sp, #36]	; 0x24
 800857a:	e768      	b.n	800844e <_svfiprintf_r+0x4e>
 800857c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008580:	460c      	mov	r4, r1
 8008582:	2001      	movs	r0, #1
 8008584:	e7a6      	b.n	80084d4 <_svfiprintf_r+0xd4>
 8008586:	2300      	movs	r3, #0
 8008588:	3401      	adds	r4, #1
 800858a:	9305      	str	r3, [sp, #20]
 800858c:	4619      	mov	r1, r3
 800858e:	f04f 0c0a 	mov.w	ip, #10
 8008592:	4620      	mov	r0, r4
 8008594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008598:	3a30      	subs	r2, #48	; 0x30
 800859a:	2a09      	cmp	r2, #9
 800859c:	d903      	bls.n	80085a6 <_svfiprintf_r+0x1a6>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d0c6      	beq.n	8008530 <_svfiprintf_r+0x130>
 80085a2:	9105      	str	r1, [sp, #20]
 80085a4:	e7c4      	b.n	8008530 <_svfiprintf_r+0x130>
 80085a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80085aa:	4604      	mov	r4, r0
 80085ac:	2301      	movs	r3, #1
 80085ae:	e7f0      	b.n	8008592 <_svfiprintf_r+0x192>
 80085b0:	ab03      	add	r3, sp, #12
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	462a      	mov	r2, r5
 80085b6:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <_svfiprintf_r+0x1f4>)
 80085b8:	a904      	add	r1, sp, #16
 80085ba:	4638      	mov	r0, r7
 80085bc:	f3af 8000 	nop.w
 80085c0:	1c42      	adds	r2, r0, #1
 80085c2:	4606      	mov	r6, r0
 80085c4:	d1d6      	bne.n	8008574 <_svfiprintf_r+0x174>
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	065b      	lsls	r3, r3, #25
 80085ca:	f53f af2d 	bmi.w	8008428 <_svfiprintf_r+0x28>
 80085ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085d0:	b01d      	add	sp, #116	; 0x74
 80085d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d6:	ab03      	add	r3, sp, #12
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	462a      	mov	r2, r5
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <_svfiprintf_r+0x1f4>)
 80085de:	a904      	add	r1, sp, #16
 80085e0:	4638      	mov	r0, r7
 80085e2:	f000 f879 	bl	80086d8 <_printf_i>
 80085e6:	e7eb      	b.n	80085c0 <_svfiprintf_r+0x1c0>
 80085e8:	08008b88 	.word	0x08008b88
 80085ec:	08008b92 	.word	0x08008b92
 80085f0:	00000000 	.word	0x00000000
 80085f4:	0800834d 	.word	0x0800834d
 80085f8:	08008b8e 	.word	0x08008b8e

080085fc <_printf_common>:
 80085fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	4616      	mov	r6, r2
 8008602:	4699      	mov	r9, r3
 8008604:	688a      	ldr	r2, [r1, #8]
 8008606:	690b      	ldr	r3, [r1, #16]
 8008608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800860c:	4293      	cmp	r3, r2
 800860e:	bfb8      	it	lt
 8008610:	4613      	movlt	r3, r2
 8008612:	6033      	str	r3, [r6, #0]
 8008614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008618:	4607      	mov	r7, r0
 800861a:	460c      	mov	r4, r1
 800861c:	b10a      	cbz	r2, 8008622 <_printf_common+0x26>
 800861e:	3301      	adds	r3, #1
 8008620:	6033      	str	r3, [r6, #0]
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	0699      	lsls	r1, r3, #26
 8008626:	bf42      	ittt	mi
 8008628:	6833      	ldrmi	r3, [r6, #0]
 800862a:	3302      	addmi	r3, #2
 800862c:	6033      	strmi	r3, [r6, #0]
 800862e:	6825      	ldr	r5, [r4, #0]
 8008630:	f015 0506 	ands.w	r5, r5, #6
 8008634:	d106      	bne.n	8008644 <_printf_common+0x48>
 8008636:	f104 0a19 	add.w	sl, r4, #25
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	6832      	ldr	r2, [r6, #0]
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	42ab      	cmp	r3, r5
 8008642:	dc26      	bgt.n	8008692 <_printf_common+0x96>
 8008644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008648:	1e13      	subs	r3, r2, #0
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	bf18      	it	ne
 800864e:	2301      	movne	r3, #1
 8008650:	0692      	lsls	r2, r2, #26
 8008652:	d42b      	bmi.n	80086ac <_printf_common+0xb0>
 8008654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008658:	4649      	mov	r1, r9
 800865a:	4638      	mov	r0, r7
 800865c:	47c0      	blx	r8
 800865e:	3001      	adds	r0, #1
 8008660:	d01e      	beq.n	80086a0 <_printf_common+0xa4>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	6922      	ldr	r2, [r4, #16]
 8008666:	f003 0306 	and.w	r3, r3, #6
 800866a:	2b04      	cmp	r3, #4
 800866c:	bf02      	ittt	eq
 800866e:	68e5      	ldreq	r5, [r4, #12]
 8008670:	6833      	ldreq	r3, [r6, #0]
 8008672:	1aed      	subeq	r5, r5, r3
 8008674:	68a3      	ldr	r3, [r4, #8]
 8008676:	bf0c      	ite	eq
 8008678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800867c:	2500      	movne	r5, #0
 800867e:	4293      	cmp	r3, r2
 8008680:	bfc4      	itt	gt
 8008682:	1a9b      	subgt	r3, r3, r2
 8008684:	18ed      	addgt	r5, r5, r3
 8008686:	2600      	movs	r6, #0
 8008688:	341a      	adds	r4, #26
 800868a:	42b5      	cmp	r5, r6
 800868c:	d11a      	bne.n	80086c4 <_printf_common+0xc8>
 800868e:	2000      	movs	r0, #0
 8008690:	e008      	b.n	80086a4 <_printf_common+0xa8>
 8008692:	2301      	movs	r3, #1
 8008694:	4652      	mov	r2, sl
 8008696:	4649      	mov	r1, r9
 8008698:	4638      	mov	r0, r7
 800869a:	47c0      	blx	r8
 800869c:	3001      	adds	r0, #1
 800869e:	d103      	bne.n	80086a8 <_printf_common+0xac>
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295
 80086a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a8:	3501      	adds	r5, #1
 80086aa:	e7c6      	b.n	800863a <_printf_common+0x3e>
 80086ac:	18e1      	adds	r1, r4, r3
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	2030      	movs	r0, #48	; 0x30
 80086b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086b6:	4422      	add	r2, r4
 80086b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086c0:	3302      	adds	r3, #2
 80086c2:	e7c7      	b.n	8008654 <_printf_common+0x58>
 80086c4:	2301      	movs	r3, #1
 80086c6:	4622      	mov	r2, r4
 80086c8:	4649      	mov	r1, r9
 80086ca:	4638      	mov	r0, r7
 80086cc:	47c0      	blx	r8
 80086ce:	3001      	adds	r0, #1
 80086d0:	d0e6      	beq.n	80086a0 <_printf_common+0xa4>
 80086d2:	3601      	adds	r6, #1
 80086d4:	e7d9      	b.n	800868a <_printf_common+0x8e>
	...

080086d8 <_printf_i>:
 80086d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086dc:	7e0f      	ldrb	r7, [r1, #24]
 80086de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086e0:	2f78      	cmp	r7, #120	; 0x78
 80086e2:	4691      	mov	r9, r2
 80086e4:	4680      	mov	r8, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	469a      	mov	sl, r3
 80086ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086ee:	d807      	bhi.n	8008700 <_printf_i+0x28>
 80086f0:	2f62      	cmp	r7, #98	; 0x62
 80086f2:	d80a      	bhi.n	800870a <_printf_i+0x32>
 80086f4:	2f00      	cmp	r7, #0
 80086f6:	f000 80d4 	beq.w	80088a2 <_printf_i+0x1ca>
 80086fa:	2f58      	cmp	r7, #88	; 0x58
 80086fc:	f000 80c0 	beq.w	8008880 <_printf_i+0x1a8>
 8008700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008708:	e03a      	b.n	8008780 <_printf_i+0xa8>
 800870a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800870e:	2b15      	cmp	r3, #21
 8008710:	d8f6      	bhi.n	8008700 <_printf_i+0x28>
 8008712:	a101      	add	r1, pc, #4	; (adr r1, 8008718 <_printf_i+0x40>)
 8008714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008718:	08008771 	.word	0x08008771
 800871c:	08008785 	.word	0x08008785
 8008720:	08008701 	.word	0x08008701
 8008724:	08008701 	.word	0x08008701
 8008728:	08008701 	.word	0x08008701
 800872c:	08008701 	.word	0x08008701
 8008730:	08008785 	.word	0x08008785
 8008734:	08008701 	.word	0x08008701
 8008738:	08008701 	.word	0x08008701
 800873c:	08008701 	.word	0x08008701
 8008740:	08008701 	.word	0x08008701
 8008744:	08008889 	.word	0x08008889
 8008748:	080087b1 	.word	0x080087b1
 800874c:	08008843 	.word	0x08008843
 8008750:	08008701 	.word	0x08008701
 8008754:	08008701 	.word	0x08008701
 8008758:	080088ab 	.word	0x080088ab
 800875c:	08008701 	.word	0x08008701
 8008760:	080087b1 	.word	0x080087b1
 8008764:	08008701 	.word	0x08008701
 8008768:	08008701 	.word	0x08008701
 800876c:	0800884b 	.word	0x0800884b
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	1d1a      	adds	r2, r3, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	602a      	str	r2, [r5, #0]
 8008778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800877c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008780:	2301      	movs	r3, #1
 8008782:	e09f      	b.n	80088c4 <_printf_i+0x1ec>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	682b      	ldr	r3, [r5, #0]
 8008788:	0607      	lsls	r7, r0, #24
 800878a:	f103 0104 	add.w	r1, r3, #4
 800878e:	6029      	str	r1, [r5, #0]
 8008790:	d501      	bpl.n	8008796 <_printf_i+0xbe>
 8008792:	681e      	ldr	r6, [r3, #0]
 8008794:	e003      	b.n	800879e <_printf_i+0xc6>
 8008796:	0646      	lsls	r6, r0, #25
 8008798:	d5fb      	bpl.n	8008792 <_printf_i+0xba>
 800879a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800879e:	2e00      	cmp	r6, #0
 80087a0:	da03      	bge.n	80087aa <_printf_i+0xd2>
 80087a2:	232d      	movs	r3, #45	; 0x2d
 80087a4:	4276      	negs	r6, r6
 80087a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087aa:	485a      	ldr	r0, [pc, #360]	; (8008914 <_printf_i+0x23c>)
 80087ac:	230a      	movs	r3, #10
 80087ae:	e012      	b.n	80087d6 <_printf_i+0xfe>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	6820      	ldr	r0, [r4, #0]
 80087b4:	1d19      	adds	r1, r3, #4
 80087b6:	6029      	str	r1, [r5, #0]
 80087b8:	0605      	lsls	r5, r0, #24
 80087ba:	d501      	bpl.n	80087c0 <_printf_i+0xe8>
 80087bc:	681e      	ldr	r6, [r3, #0]
 80087be:	e002      	b.n	80087c6 <_printf_i+0xee>
 80087c0:	0641      	lsls	r1, r0, #25
 80087c2:	d5fb      	bpl.n	80087bc <_printf_i+0xe4>
 80087c4:	881e      	ldrh	r6, [r3, #0]
 80087c6:	4853      	ldr	r0, [pc, #332]	; (8008914 <_printf_i+0x23c>)
 80087c8:	2f6f      	cmp	r7, #111	; 0x6f
 80087ca:	bf0c      	ite	eq
 80087cc:	2308      	moveq	r3, #8
 80087ce:	230a      	movne	r3, #10
 80087d0:	2100      	movs	r1, #0
 80087d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087d6:	6865      	ldr	r5, [r4, #4]
 80087d8:	60a5      	str	r5, [r4, #8]
 80087da:	2d00      	cmp	r5, #0
 80087dc:	bfa2      	ittt	ge
 80087de:	6821      	ldrge	r1, [r4, #0]
 80087e0:	f021 0104 	bicge.w	r1, r1, #4
 80087e4:	6021      	strge	r1, [r4, #0]
 80087e6:	b90e      	cbnz	r6, 80087ec <_printf_i+0x114>
 80087e8:	2d00      	cmp	r5, #0
 80087ea:	d04b      	beq.n	8008884 <_printf_i+0x1ac>
 80087ec:	4615      	mov	r5, r2
 80087ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80087f2:	fb03 6711 	mls	r7, r3, r1, r6
 80087f6:	5dc7      	ldrb	r7, [r0, r7]
 80087f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087fc:	4637      	mov	r7, r6
 80087fe:	42bb      	cmp	r3, r7
 8008800:	460e      	mov	r6, r1
 8008802:	d9f4      	bls.n	80087ee <_printf_i+0x116>
 8008804:	2b08      	cmp	r3, #8
 8008806:	d10b      	bne.n	8008820 <_printf_i+0x148>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	07de      	lsls	r6, r3, #31
 800880c:	d508      	bpl.n	8008820 <_printf_i+0x148>
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	6861      	ldr	r1, [r4, #4]
 8008812:	4299      	cmp	r1, r3
 8008814:	bfde      	ittt	le
 8008816:	2330      	movle	r3, #48	; 0x30
 8008818:	f805 3c01 	strble.w	r3, [r5, #-1]
 800881c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008820:	1b52      	subs	r2, r2, r5
 8008822:	6122      	str	r2, [r4, #16]
 8008824:	f8cd a000 	str.w	sl, [sp]
 8008828:	464b      	mov	r3, r9
 800882a:	aa03      	add	r2, sp, #12
 800882c:	4621      	mov	r1, r4
 800882e:	4640      	mov	r0, r8
 8008830:	f7ff fee4 	bl	80085fc <_printf_common>
 8008834:	3001      	adds	r0, #1
 8008836:	d14a      	bne.n	80088ce <_printf_i+0x1f6>
 8008838:	f04f 30ff 	mov.w	r0, #4294967295
 800883c:	b004      	add	sp, #16
 800883e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	f043 0320 	orr.w	r3, r3, #32
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	4833      	ldr	r0, [pc, #204]	; (8008918 <_printf_i+0x240>)
 800884c:	2778      	movs	r7, #120	; 0x78
 800884e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	6829      	ldr	r1, [r5, #0]
 8008856:	061f      	lsls	r7, r3, #24
 8008858:	f851 6b04 	ldr.w	r6, [r1], #4
 800885c:	d402      	bmi.n	8008864 <_printf_i+0x18c>
 800885e:	065f      	lsls	r7, r3, #25
 8008860:	bf48      	it	mi
 8008862:	b2b6      	uxthmi	r6, r6
 8008864:	07df      	lsls	r7, r3, #31
 8008866:	bf48      	it	mi
 8008868:	f043 0320 	orrmi.w	r3, r3, #32
 800886c:	6029      	str	r1, [r5, #0]
 800886e:	bf48      	it	mi
 8008870:	6023      	strmi	r3, [r4, #0]
 8008872:	b91e      	cbnz	r6, 800887c <_printf_i+0x1a4>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	f023 0320 	bic.w	r3, r3, #32
 800887a:	6023      	str	r3, [r4, #0]
 800887c:	2310      	movs	r3, #16
 800887e:	e7a7      	b.n	80087d0 <_printf_i+0xf8>
 8008880:	4824      	ldr	r0, [pc, #144]	; (8008914 <_printf_i+0x23c>)
 8008882:	e7e4      	b.n	800884e <_printf_i+0x176>
 8008884:	4615      	mov	r5, r2
 8008886:	e7bd      	b.n	8008804 <_printf_i+0x12c>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	6826      	ldr	r6, [r4, #0]
 800888c:	6961      	ldr	r1, [r4, #20]
 800888e:	1d18      	adds	r0, r3, #4
 8008890:	6028      	str	r0, [r5, #0]
 8008892:	0635      	lsls	r5, r6, #24
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	d501      	bpl.n	800889c <_printf_i+0x1c4>
 8008898:	6019      	str	r1, [r3, #0]
 800889a:	e002      	b.n	80088a2 <_printf_i+0x1ca>
 800889c:	0670      	lsls	r0, r6, #25
 800889e:	d5fb      	bpl.n	8008898 <_printf_i+0x1c0>
 80088a0:	8019      	strh	r1, [r3, #0]
 80088a2:	2300      	movs	r3, #0
 80088a4:	6123      	str	r3, [r4, #16]
 80088a6:	4615      	mov	r5, r2
 80088a8:	e7bc      	b.n	8008824 <_printf_i+0x14c>
 80088aa:	682b      	ldr	r3, [r5, #0]
 80088ac:	1d1a      	adds	r2, r3, #4
 80088ae:	602a      	str	r2, [r5, #0]
 80088b0:	681d      	ldr	r5, [r3, #0]
 80088b2:	6862      	ldr	r2, [r4, #4]
 80088b4:	2100      	movs	r1, #0
 80088b6:	4628      	mov	r0, r5
 80088b8:	f7f7 fca2 	bl	8000200 <memchr>
 80088bc:	b108      	cbz	r0, 80088c2 <_printf_i+0x1ea>
 80088be:	1b40      	subs	r0, r0, r5
 80088c0:	6060      	str	r0, [r4, #4]
 80088c2:	6863      	ldr	r3, [r4, #4]
 80088c4:	6123      	str	r3, [r4, #16]
 80088c6:	2300      	movs	r3, #0
 80088c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088cc:	e7aa      	b.n	8008824 <_printf_i+0x14c>
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	462a      	mov	r2, r5
 80088d2:	4649      	mov	r1, r9
 80088d4:	4640      	mov	r0, r8
 80088d6:	47d0      	blx	sl
 80088d8:	3001      	adds	r0, #1
 80088da:	d0ad      	beq.n	8008838 <_printf_i+0x160>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	079b      	lsls	r3, r3, #30
 80088e0:	d413      	bmi.n	800890a <_printf_i+0x232>
 80088e2:	68e0      	ldr	r0, [r4, #12]
 80088e4:	9b03      	ldr	r3, [sp, #12]
 80088e6:	4298      	cmp	r0, r3
 80088e8:	bfb8      	it	lt
 80088ea:	4618      	movlt	r0, r3
 80088ec:	e7a6      	b.n	800883c <_printf_i+0x164>
 80088ee:	2301      	movs	r3, #1
 80088f0:	4632      	mov	r2, r6
 80088f2:	4649      	mov	r1, r9
 80088f4:	4640      	mov	r0, r8
 80088f6:	47d0      	blx	sl
 80088f8:	3001      	adds	r0, #1
 80088fa:	d09d      	beq.n	8008838 <_printf_i+0x160>
 80088fc:	3501      	adds	r5, #1
 80088fe:	68e3      	ldr	r3, [r4, #12]
 8008900:	9903      	ldr	r1, [sp, #12]
 8008902:	1a5b      	subs	r3, r3, r1
 8008904:	42ab      	cmp	r3, r5
 8008906:	dcf2      	bgt.n	80088ee <_printf_i+0x216>
 8008908:	e7eb      	b.n	80088e2 <_printf_i+0x20a>
 800890a:	2500      	movs	r5, #0
 800890c:	f104 0619 	add.w	r6, r4, #25
 8008910:	e7f5      	b.n	80088fe <_printf_i+0x226>
 8008912:	bf00      	nop
 8008914:	08008b99 	.word	0x08008b99
 8008918:	08008baa 	.word	0x08008baa

0800891c <memmove>:
 800891c:	4288      	cmp	r0, r1
 800891e:	b510      	push	{r4, lr}
 8008920:	eb01 0402 	add.w	r4, r1, r2
 8008924:	d902      	bls.n	800892c <memmove+0x10>
 8008926:	4284      	cmp	r4, r0
 8008928:	4623      	mov	r3, r4
 800892a:	d807      	bhi.n	800893c <memmove+0x20>
 800892c:	1e43      	subs	r3, r0, #1
 800892e:	42a1      	cmp	r1, r4
 8008930:	d008      	beq.n	8008944 <memmove+0x28>
 8008932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800893a:	e7f8      	b.n	800892e <memmove+0x12>
 800893c:	4402      	add	r2, r0
 800893e:	4601      	mov	r1, r0
 8008940:	428a      	cmp	r2, r1
 8008942:	d100      	bne.n	8008946 <memmove+0x2a>
 8008944:	bd10      	pop	{r4, pc}
 8008946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800894a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800894e:	e7f7      	b.n	8008940 <memmove+0x24>

08008950 <_sbrk_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4d06      	ldr	r5, [pc, #24]	; (800896c <_sbrk_r+0x1c>)
 8008954:	2300      	movs	r3, #0
 8008956:	4604      	mov	r4, r0
 8008958:	4608      	mov	r0, r1
 800895a:	602b      	str	r3, [r5, #0]
 800895c:	f7f9 f92c 	bl	8001bb8 <_sbrk>
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d102      	bne.n	800896a <_sbrk_r+0x1a>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	b103      	cbz	r3, 800896a <_sbrk_r+0x1a>
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	200043d4 	.word	0x200043d4

08008970 <_realloc_r>:
 8008970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008974:	4680      	mov	r8, r0
 8008976:	4614      	mov	r4, r2
 8008978:	460e      	mov	r6, r1
 800897a:	b921      	cbnz	r1, 8008986 <_realloc_r+0x16>
 800897c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008980:	4611      	mov	r1, r2
 8008982:	f7ff bc57 	b.w	8008234 <_malloc_r>
 8008986:	b92a      	cbnz	r2, 8008994 <_realloc_r+0x24>
 8008988:	f7ff fbe8 	bl	800815c <_free_r>
 800898c:	4625      	mov	r5, r4
 800898e:	4628      	mov	r0, r5
 8008990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008994:	f000 f81b 	bl	80089ce <_malloc_usable_size_r>
 8008998:	4284      	cmp	r4, r0
 800899a:	4607      	mov	r7, r0
 800899c:	d802      	bhi.n	80089a4 <_realloc_r+0x34>
 800899e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089a2:	d812      	bhi.n	80089ca <_realloc_r+0x5a>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4640      	mov	r0, r8
 80089a8:	f7ff fc44 	bl	8008234 <_malloc_r>
 80089ac:	4605      	mov	r5, r0
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d0ed      	beq.n	800898e <_realloc_r+0x1e>
 80089b2:	42bc      	cmp	r4, r7
 80089b4:	4622      	mov	r2, r4
 80089b6:	4631      	mov	r1, r6
 80089b8:	bf28      	it	cs
 80089ba:	463a      	movcs	r2, r7
 80089bc:	f7ff fbc0 	bl	8008140 <memcpy>
 80089c0:	4631      	mov	r1, r6
 80089c2:	4640      	mov	r0, r8
 80089c4:	f7ff fbca 	bl	800815c <_free_r>
 80089c8:	e7e1      	b.n	800898e <_realloc_r+0x1e>
 80089ca:	4635      	mov	r5, r6
 80089cc:	e7df      	b.n	800898e <_realloc_r+0x1e>

080089ce <_malloc_usable_size_r>:
 80089ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089d2:	1f18      	subs	r0, r3, #4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	bfbc      	itt	lt
 80089d8:	580b      	ldrlt	r3, [r1, r0]
 80089da:	18c0      	addlt	r0, r0, r3
 80089dc:	4770      	bx	lr
	...

080089e0 <_init>:
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	bf00      	nop
 80089e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e6:	bc08      	pop	{r3}
 80089e8:	469e      	mov	lr, r3
 80089ea:	4770      	bx	lr

080089ec <_fini>:
 80089ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ee:	bf00      	nop
 80089f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f2:	bc08      	pop	{r3}
 80089f4:	469e      	mov	lr, r3
 80089f6:	4770      	bx	lr
