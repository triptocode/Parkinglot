
test_sem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009368  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08009508  08009508  00019508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c0  080097c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080097c0  080097c0  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c8  080097c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080097d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004390  20000074  08009844  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004404  08009844  00024404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a326  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003de1  00000000  00000000  0003a40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0003e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001132  00000000  00000000  0003f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000196f2  00000000  00000000  0004092a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b993  00000000  00000000  0005a01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a194  00000000  00000000  000759af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006508  00000000  00000000  0010fb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0011604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094f0 	.word	0x080094f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080094f0 	.word	0x080094f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <LCD_init>:

#include "I2C_LCD.h"



void LCD_init() {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    HAL_Delay(15);
 8000d6c:	200f      	movs	r0, #15
 8000d6e:	f001 fb6b 	bl	8002448 <HAL_Delay>
    LCD_send_cmd(0x30);
 8000d72:	2030      	movs	r0, #48	; 0x30
 8000d74:	f000 f854 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(5);
 8000d78:	2005      	movs	r0, #5
 8000d7a:	f001 fb65 	bl	8002448 <HAL_Delay>
    LCD_send_cmd(0x30);
 8000d7e:	2030      	movs	r0, #48	; 0x30
 8000d80:	f000 f84e 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f001 fb5f 	bl	8002448 <HAL_Delay>
    LCD_send_cmd(0x30);
 8000d8a:	2030      	movs	r0, #48	; 0x30
 8000d8c:	f000 f848 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000d90:	200a      	movs	r0, #10
 8000d92:	f001 fb59 	bl	8002448 <HAL_Delay>
    LCD_send_cmd(0x20);
 8000d96:	2020      	movs	r0, #32
 8000d98:	f000 f842 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f001 fb53 	bl	8002448 <HAL_Delay>

    LCD_send_cmd(0x28);
 8000da2:	2028      	movs	r0, #40	; 0x28
 8000da4:	f000 f83c 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000da8:	200a      	movs	r0, #10
 8000daa:	f001 fb4d 	bl	8002448 <HAL_Delay>
    LCD_send_cmd(0x08);
 8000dae:	2008      	movs	r0, #8
 8000db0:	f000 f836 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000db4:	200a      	movs	r0, #10
 8000db6:	f001 fb47 	bl	8002448 <HAL_Delay>
    LCD_send_cmd(0x01);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 f830 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000dc0:	200a      	movs	r0, #10
 8000dc2:	f001 fb41 	bl	8002448 <HAL_Delay>
    LCD_send_cmd(0x0c);
 8000dc6:	200c      	movs	r0, #12
 8000dc8:	f000 f82a 	bl	8000e20 <LCD_send_cmd>
    HAL_Delay(10);
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f001 fb3b 	bl	8002448 <HAL_Delay>
    LCD_send_cmd(0x06);
 8000dd2:	2006      	movs	r0, #6
 8000dd4:	f000 f824 	bl	8000e20 <LCD_send_cmd>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <LCD_put_cursor>:
    LCD_send_cmd(0x08);
    for (int8_t i = 0; i < 70; i++) {
        LCD_send_data('\0');
    }
}
void LCD_put_cursor(uint8_t row, uint8_t col) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	4613      	mov	r3, r2
 8000dea:	71bb      	strb	r3, [r7, #6]
    if (row == 0) {
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d104      	bne.n	8000dfc <LCD_put_cursor+0x20>
        col |= 0x80;
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000df8:	71bb      	strb	r3, [r7, #6]
 8000dfa:	e006      	b.n	8000e0a <LCD_put_cursor+0x2e>
    }
    else if (row == 1) {
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d103      	bne.n	8000e0a <LCD_put_cursor+0x2e>
        col |= 0xc0;
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e08:	71bb      	strb	r3, [r7, #6]
    }

    HAL_Delay(10);
 8000e0a:	200a      	movs	r0, #10
 8000e0c:	f001 fb1c 	bl	8002448 <HAL_Delay>
    LCD_send_cmd(col);
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f804 	bl	8000e20 <LCD_send_cmd>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LCD_send_cmd>:

void LCD_send_cmd(uint8_t cmd) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd_t[4];
    uint8_t cmd_h, cmd_l;

    cmd_h = cmd & 0xf0;
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f023 030f 	bic.w	r3, r3, #15
 8000e30:	73fb      	strb	r3, [r7, #15]
    cmd_l = cmd << 4 & 0xf0;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	73bb      	strb	r3, [r7, #14]

    cmd_t[0] = cmd_h | 0x0c;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	f043 030c 	orr.w	r3, r3, #12
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	723b      	strb	r3, [r7, #8]
    cmd_t[1] = cmd_h | 0x08;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	727b      	strb	r3, [r7, #9]
    cmd_t[2] = cmd_l | 0x0c;
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	f043 030c 	orr.w	r3, r3, #12
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	72bb      	strb	r3, [r7, #10]
    cmd_t[3] = cmd_l | 0x08;
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, cmd_t, sizeof(cmd_t), 4);
 8000e60:	f107 0208 	add.w	r2, r7, #8
 8000e64:	2304      	movs	r3, #4
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2304      	movs	r3, #4
 8000e6a:	214e      	movs	r1, #78	; 0x4e
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <LCD_send_cmd+0x5c>)
 8000e6e:	f001 ff65 	bl	8002d3c <HAL_I2C_Master_Transmit>
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200003a4 	.word	0x200003a4

08000e80 <LCD_send_data>:
void LCD_send_data(char data) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
    uint8_t data_t[4];
    uint8_t data_h, data_l;

    data_h = data & 0xf0;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f023 030f 	bic.w	r3, r3, #15
 8000e90:	73fb      	strb	r3, [r7, #15]
    data_l = data << 4 & 0xf0;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_h | 0x0d;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f043 030d 	orr.w	r3, r3, #13
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_h | 0x09;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	f043 0309 	orr.w	r3, r3, #9
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0d;
 8000eac:	7bbb      	ldrb	r3, [r7, #14]
 8000eae:	f043 030d 	orr.w	r3, r3, #13
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	f043 0309 	orr.w	r3, r3, #9
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, data_t, sizeof(data_t), 4);
 8000ec0:	f107 0208 	add.w	r2, r7, #8
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2304      	movs	r3, #4
 8000eca:	214e      	movs	r1, #78	; 0x4e
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <LCD_send_data+0x5c>)
 8000ece:	f001 ff35 	bl	8002d3c <HAL_I2C_Master_Transmit>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200003a4 	.word	0x200003a4

08000ee0 <LCD_send_str>:
void LCD_send_str(char *str) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000ee8:	e006      	b.n	8000ef8 <LCD_send_str+0x18>
        LCD_send_data(*str++);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ffc4 	bl	8000e80 <LCD_send_data>
    while (*str) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f4      	bne.n	8000eea <LCD_send_str+0xa>
    }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <delay>:
osSemaphoreId hBinarySemHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void delay (uint16_t time)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <delay+0x30>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim2) < time);
 8000f1e:	bf00      	nop
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <delay+0x30>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d3f9      	bcc.n	8000f20 <delay+0x14>
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000444 	.word	0x20000444

08000f40 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7f1b      	ldrb	r3, [r3, #28]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 8083 	bne.w	8001058 <HAL_TIM_IC_CaptureCallback+0x118>
//	if (htim == &htim2)
	{
		if (Is_First_Captured_left==0) // if the first value is not captured
 8000f52:	4b89      	ldr	r3, [pc, #548]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d11a      	bne.n	8000f90 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_VAL_left_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f003 fd17 	bl	8004990 <HAL_TIM_ReadCapturedValue>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a85      	ldr	r2, [pc, #532]	; (800117c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000f66:	6013      	str	r3, [r2, #0]
			Is_First_Captured_left = 1;  // set the first captured as true
 8000f68:	4b83      	ldr	r3, [pc, #524]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6a1a      	ldr	r2, [r3, #32]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 020a 	bic.w	r2, r2, #10
 8000f7c:	621a      	str	r2, [r3, #32]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6a1a      	ldr	r2, [r3, #32]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0202 	orr.w	r2, r2, #2
 8000f8c:	621a      	str	r2, [r3, #32]
 8000f8e:	e063      	b.n	8001058 <HAL_TIM_IC_CaptureCallback+0x118>
		}

		else if (Is_First_Captured_left==1)   // if the first is already captured
 8000f90:	4b79      	ldr	r3, [pc, #484]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d15f      	bne.n	8001058 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			IC_Val_left_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f98:	2100      	movs	r1, #0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f003 fcf8 	bl	8004990 <HAL_TIM_ReadCapturedValue>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a77      	ldr	r2, [pc, #476]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fa4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val_left_2 > IC_VAL_left_1)
 8000fae:	4b74      	ldr	r3, [pc, #464]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b72      	ldr	r3, [pc, #456]	; (800117c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d907      	bls.n	8000fca <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference_left = IC_Val_left_2-IC_VAL_left_1;
 8000fba:	4b71      	ldr	r3, [pc, #452]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b6f      	ldr	r3, [pc, #444]	; (800117c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	4a6f      	ldr	r2, [pc, #444]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x244>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	e00f      	b.n	8000fea <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if (IC_VAL_left_1 > IC_Val_left_2)
 8000fca:	4b6c      	ldr	r3, [pc, #432]	; (800117c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d909      	bls.n	8000fea <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference_left = (0xffff - IC_VAL_left_1) + IC_Val_left_2;
 8000fd6:	4b6a      	ldr	r3, [pc, #424]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b68      	ldr	r3, [pc, #416]	; (800117c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000fe4:	33ff      	adds	r3, #255	; 0xff
 8000fe6:	4a67      	ldr	r2, [pc, #412]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x244>)
 8000fe8:	6013      	str	r3, [r2, #0]
			}

			Distance_left = Difference_left * .034/2;
 8000fea:	4b66      	ldr	r3, [pc, #408]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x244>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa90 	bl	8000514 <__aeabi_ui2d>
 8000ff4:	a35e      	add	r3, pc, #376	; (adr r3, 8001170 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffa:	f7ff fb05 	bl	8000608 <__aeabi_dmul>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800100e:	f7ff fc25 	bl	800085c <__aeabi_ddiv>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fd07 	bl	8000a2c <__aeabi_d2uiz>
 800101e:	4603      	mov	r3, r0
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b59      	ldr	r3, [pc, #356]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001024:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_left = 0; // set it back to false
 8001026:	4b54      	ldr	r3, [pc, #336]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6a1a      	ldr	r2, [r3, #32]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 020a 	bic.w	r2, r2, #10
 800103a:	621a      	str	r2, [r3, #32]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6a12      	ldr	r2, [r2, #32]
 8001046:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001048:	4b50      	ldr	r3, [pc, #320]	; (800118c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	4b4f      	ldr	r3, [pc, #316]	; (800118c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0202 	bic.w	r2, r2, #2
 8001056:	60da      	str	r2, [r3, #12]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7f1b      	ldrb	r3, [r3, #28]
 800105c:	2b04      	cmp	r3, #4
 800105e:	f040 8083 	bne.w	8001168 <HAL_TIM_IC_CaptureCallback+0x228>
//	if (htim == &htim3)
	{
		if (Is_First_Captured_right==0) // if the first value is not captured
 8001062:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d11a      	bne.n	80010a0 <HAL_TIM_IC_CaptureCallback+0x160>
		{
			IC_Val_right_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 800106a:	2108      	movs	r1, #8
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f003 fc8f 	bl	8004990 <HAL_TIM_ReadCapturedValue>
 8001072:	4603      	mov	r3, r0
 8001074:	4a47      	ldr	r2, [pc, #284]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001076:	6013      	str	r3, [r2, #0]
			Is_First_Captured_right = 1;  // set the first captured as true
 8001078:	4b45      	ldr	r3, [pc, #276]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x250>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6a1a      	ldr	r2, [r3, #32]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800108c:	621a      	str	r2, [r3, #32]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800109c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
		}
	}
}
 800109e:	e063      	b.n	8001168 <HAL_TIM_IC_CaptureCallback+0x228>
		else if (Is_First_Captured_right==1)   // if the first is already captured
 80010a0:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x250>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d15f      	bne.n	8001168 <HAL_TIM_IC_CaptureCallback+0x228>
			IC_Val_right_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80010a8:	2108      	movs	r1, #8
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f003 fc70 	bl	8004990 <HAL_TIM_ReadCapturedValue>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a39      	ldr	r2, [pc, #228]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010b4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val_right_2 > IC_Val_right_1)
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x254>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d907      	bls.n	80010da <HAL_TIM_IC_CaptureCallback+0x19a>
				Difference_right = IC_Val_right_2-IC_Val_right_1;
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x254>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	4a31      	ldr	r2, [pc, #196]	; (800119c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e00f      	b.n	80010fa <HAL_TIM_IC_CaptureCallback+0x1ba>
			else if (IC_Val_right_1 > IC_Val_right_2)
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x254>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d909      	bls.n	80010fa <HAL_TIM_IC_CaptureCallback+0x1ba>
				Difference_right = (0xffff - IC_Val_right_1) + IC_Val_right_2;
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x254>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80010f4:	33ff      	adds	r3, #255	; 0xff
 80010f6:	4a29      	ldr	r2, [pc, #164]	; (800119c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80010f8:	6013      	str	r3, [r2, #0]
			Distance_right = Difference_right * .034/2;
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa08 	bl	8000514 <__aeabi_ui2d>
 8001104:	a31a      	add	r3, pc, #104	; (adr r3, 8001170 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff fa7d 	bl	8000608 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111e:	f7ff fb9d 	bl	800085c <__aeabi_ddiv>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fc7f 	bl	8000a2c <__aeabi_d2uiz>
 800112e:	4603      	mov	r3, r0
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001134:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_right = 0; // set it back to false
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a1a      	ldr	r2, [r3, #32]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800114a:	621a      	str	r2, [r3, #32]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a12      	ldr	r2, [r2, #32]
 8001156:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0208 	bic.w	r2, r2, #8
 8001166:	60da      	str	r2, [r3, #12]
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	b020c49c 	.word	0xb020c49c
 8001174:	3fa16872 	.word	0x3fa16872
 8001178:	2000009c 	.word	0x2000009c
 800117c:	20000090 	.word	0x20000090
 8001180:	20000094 	.word	0x20000094
 8001184:	20000098 	.word	0x20000098
 8001188:	2000009d 	.word	0x2000009d
 800118c:	20000444 	.word	0x20000444
 8001190:	200000ac 	.word	0x200000ac
 8001194:	200000a0 	.word	0x200000a0
 8001198:	200000a4 	.word	0x200000a4
 800119c:	200000a8 	.word	0x200000a8
 80011a0:	200000ad 	.word	0x200000ad

080011a4 <HCSR04_Read_Left>:

void HCSR04_Read_Left (void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <HCSR04_Read_Left+0x38>)
 80011b0:	f001 fc66 	bl	8002a80 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80011b4:	200a      	movs	r0, #10
 80011b6:	f7ff fea9 	bl	8000f0c <delay>
	HAL_GPIO_WritePin(TRIG_PORT_LEFT, TRIG_PIN_LEFT, GPIO_PIN_RESET);  // pull the TRIG pin low
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c0:	4806      	ldr	r0, [pc, #24]	; (80011dc <HCSR04_Read_Left+0x38>)
 80011c2:	f001 fc5d 	bl	8002a80 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HCSR04_Read_Left+0x3c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <HCSR04_Read_Left+0x3c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f042 0202 	orr.w	r2, r2, #2
 80011d4:	60da      	str	r2, [r3, #12]
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020000 	.word	0x40020000
 80011e0:	20000444 	.word	0x20000444

080011e4 <HCSR04_Read_Right>:

void HCSR04_Read_Right (void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	480a      	ldr	r0, [pc, #40]	; (8001218 <HCSR04_Read_Right+0x34>)
 80011ee:	f001 fc47 	bl	8002a80 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80011f2:	200a      	movs	r0, #10
 80011f4:	f7ff fe8a 	bl	8000f0c <delay>
	HAL_GPIO_WritePin(TRIG_PORT_RIGHT, TRIG_PIN_RIGHT, GPIO_PIN_RESET);  // pull the TRIG pin low
 80011f8:	2200      	movs	r2, #0
 80011fa:	2120      	movs	r1, #32
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <HCSR04_Read_Right+0x34>)
 80011fe:	f001 fc3f 	bl	8002a80 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC3);
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HCSR04_Read_Right+0x38>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HCSR04_Read_Right+0x38>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0208 	orr.w	r2, r2, #8
 8001210:	60da      	str	r2, [r3, #12]
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40020400 	.word	0x40020400
 800121c:	20000444 	.word	0x20000444

08001220 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
//	if(huart->Instance==USART1) // Checking Uart Debug
//	{
//		HAL_UART_Receive_IT(&huart1, txData, sizeof(txData));
//		HAL_UART_Transmit_IT(&huart1, txData, sizeof(txData));
//	}
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4a07      	ldr	r2, [pc, #28]	; (8001260 <vApplicationGetIdleTaskMemory+0x2c>)
 8001244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <vApplicationGetIdleTaskMemory+0x30>)
 800124a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000104 	.word	0x20000104
 8001264:	200001a4 	.word	0x200001a4

08001268 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b0a6      	sub	sp, #152	; 0x98
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	4843      	ldr	r0, [pc, #268]	; (8001380 <MX_FREERTOS_Init+0x118>)
 8001272:	f002 ff5d 	bl	8004130 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001276:	2108      	movs	r1, #8
 8001278:	4841      	ldr	r0, [pc, #260]	; (8001380 <MX_FREERTOS_Init+0x118>)
 800127a:	f002 ff59 	bl	8004130 <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800127e:	2100      	movs	r1, #0
 8001280:	4840      	ldr	r0, [pc, #256]	; (8001384 <MX_FREERTOS_Init+0x11c>)
 8001282:	f002 fe4b 	bl	8003f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001286:	2104      	movs	r1, #4
 8001288:	483e      	ldr	r0, [pc, #248]	; (8001384 <MX_FREERTOS_Init+0x11c>)
 800128a:	f002 fe47 	bl	8003f1c <HAL_TIM_PWM_Start>

  LCD_init();
 800128e:	f7ff fd6b 	bl	8000d68 <LCD_init>

  TIM3->CCR1 = 110;
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <MX_FREERTOS_Init+0x120>)
 8001294:	226e      	movs	r2, #110	; 0x6e
 8001296:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 110;
 8001298:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <MX_FREERTOS_Init+0x120>)
 800129a:	226e      	movs	r2, #110	; 0x6e
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of hBinarySem */
  osSemaphoreDef(hBinarySem);
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  hBinarySemHandle = osSemaphoreCreate(osSemaphore(hBinarySem), 1);
 80012aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012ae:	2101      	movs	r1, #1
 80012b0:	4618      	mov	r0, r3
 80012b2:	f005 f870 	bl	8006396 <osSemaphoreCreate>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a34      	ldr	r2, [pc, #208]	; (800138c <MX_FREERTOS_Init+0x124>)
 80012ba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of hSemTask */
  osThreadDef(hSemTask, UltraSonicTask, osPriorityNormal, 0, 256);
 80012bc:	4b34      	ldr	r3, [pc, #208]	; (8001390 <MX_FREERTOS_Init+0x128>)
 80012be:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80012c2:	461d      	mov	r5, r3
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTaskHandle = osThreadCreate(osThread(hSemTask), NULL);
 80012d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f004 fffd 	bl	80062d6 <osThreadCreate>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a2d      	ldr	r2, [pc, #180]	; (8001394 <MX_FREERTOS_Init+0x12c>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask2 */
  osThreadDef(hSemTask2, ServoMotorTask, osPriorityNormal, 0, 256);
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <MX_FREERTOS_Init+0x130>)
 80012e4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80012e8:	461d      	mov	r5, r3
 80012ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask2Handle = osThreadCreate(osThread(hSemTask2), NULL);
 80012f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f004 ffea 	bl	80062d6 <osThreadCreate>
 8001302:	4603      	mov	r3, r0
 8001304:	4a25      	ldr	r2, [pc, #148]	; (800139c <MX_FREERTOS_Init+0x134>)
 8001306:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask3 */
  osThreadDef(hSemTask3, LcdTask, osPriorityNormal, 0, 256);
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <MX_FREERTOS_Init+0x138>)
 800130a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800130e:	461d      	mov	r5, r3
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask3Handle = osThreadCreate(osThread(hSemTask3), NULL);
 800131c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f004 ffd7 	bl	80062d6 <osThreadCreate>
 8001328:	4603      	mov	r3, r0
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <MX_FREERTOS_Init+0x13c>)
 800132c:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask4 */
  osThreadDef(hSemTask4, ManagerTask, osPriorityNormal, 0, 256);
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_FREERTOS_Init+0x140>)
 8001330:	f107 0420 	add.w	r4, r7, #32
 8001334:	461d      	mov	r5, r3
 8001336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask4Handle = osThreadCreate(osThread(hSemTask4), NULL);
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f004 ffc4 	bl	80062d6 <osThreadCreate>
 800134e:	4603      	mov	r3, r0
 8001350:	4a16      	ldr	r2, [pc, #88]	; (80013ac <MX_FREERTOS_Init+0x144>)
 8001352:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask5 */
  osThreadDef(hSemTask5, RaspTask, osPriorityNormal, 0, 256);
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_FREERTOS_Init+0x148>)
 8001356:	1d3c      	adds	r4, r7, #4
 8001358:	461d      	mov	r5, r3
 800135a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTask5Handle = osThreadCreate(osThread(hSemTask5), NULL);
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f004 ffb3 	bl	80062d6 <osThreadCreate>
 8001370:	4603      	mov	r3, r0
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <MX_FREERTOS_Init+0x14c>)
 8001374:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001376:	bf00      	nop
 8001378:	3798      	adds	r7, #152	; 0x98
 800137a:	46bd      	mov	sp, r7
 800137c:	bdb0      	pop	{r4, r5, r7, pc}
 800137e:	bf00      	nop
 8001380:	20000444 	.word	0x20000444
 8001384:	2000048c 	.word	0x2000048c
 8001388:	40000400 	.word	0x40000400
 800138c:	20000100 	.word	0x20000100
 8001390:	08009514 	.word	0x08009514
 8001394:	200000ec 	.word	0x200000ec
 8001398:	0800953c 	.word	0x0800953c
 800139c:	200000f0 	.word	0x200000f0
 80013a0:	08009564 	.word	0x08009564
 80013a4:	200000f4 	.word	0x200000f4
 80013a8:	0800958c 	.word	0x0800958c
 80013ac:	200000f8 	.word	0x200000f8
 80013b0:	080095b4 	.word	0x080095b4
 80013b4:	200000fc 	.word	0x200000fc

080013b8 <UltraSonicTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UltraSonicTask */
void UltraSonicTask(void const * argument)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltraSonicTask */
  /* Infinite loop */
  for(;;)
  {
	  /* ***********Ultra Sonic Check Task*********** */
	  HCSR04_Read_Left();
 80013c0:	f7ff fef0 	bl	80011a4 <HCSR04_Read_Left>
	  osDelay(100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f004 ffd2 	bl	800636e <osDelay>
	  HCSR04_Read_Right();
 80013ca:	f7ff ff0b 	bl	80011e4 <HCSR04_Read_Right>
	  osDelay(100);
 80013ce:	2064      	movs	r0, #100	; 0x64
 80013d0:	f004 ffcd 	bl	800636e <osDelay>
	  HCSR04_Read_Left();
 80013d4:	e7f4      	b.n	80013c0 <UltraSonicTask+0x8>
	...

080013d8 <ServoMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ServoMotorTask */
void ServoMotorTask(void const * argument)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ServoMotorTask */
  /* Infinite loop */
  for(;;)
  {
	if(strstr(rasp_rx_number_plate, "IASS") != NULL)
 80013e0:	493b      	ldr	r1, [pc, #236]	; (80014d0 <ServoMotorTask+0xf8>)
 80013e2:	483c      	ldr	r0, [pc, #240]	; (80014d4 <ServoMotorTask+0xfc>)
 80013e4:	f006 ff10 	bl	8008208 <strstr>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d023      	beq.n	8001436 <ServoMotorTask+0x5e>
    {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f4:	4838      	ldr	r0, [pc, #224]	; (80014d8 <ServoMotorTask+0x100>)
 80013f6:	f001 fb43 	bl	8002a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2120      	movs	r1, #32
 80013fe:	4837      	ldr	r0, [pc, #220]	; (80014dc <ServoMotorTask+0x104>)
 8001400:	f001 fb3e 	bl	8002a80 <HAL_GPIO_WritePin>
    	TIM3->CCR1 = 55;
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <ServoMotorTask+0x108>)
 8001406:	2237      	movs	r2, #55	; 0x37
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
    	osDelay(3000);
 800140a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800140e:	f004 ffae 	bl	800636e <osDelay>
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	e007      	b.n	8001428 <ServoMotorTask+0x50>
		{
			rasp_rx_number_plate[i] = '\0';
 8001418:	4a2e      	ldr	r2, [pc, #184]	; (80014d4 <ServoMotorTask+0xfc>)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3301      	adds	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b0d      	cmp	r3, #13
 800142c:	d9f4      	bls.n	8001418 <ServoMotorTask+0x40>
		}
		phone_state = DETECT;
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <ServoMotorTask+0x10c>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	e00f      	b.n	8001456 <ServoMotorTask+0x7e>
    }
    else if(Distance_left > 10)
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <ServoMotorTask+0x110>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d90b      	bls.n	8001456 <ServoMotorTask+0x7e>
    {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001444:	4824      	ldr	r0, [pc, #144]	; (80014d8 <ServoMotorTask+0x100>)
 8001446:	f001 fb1b 	bl	8002a80 <HAL_GPIO_WritePin>
    	TIM3->CCR1 = 110;
 800144a:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <ServoMotorTask+0x108>)
 800144c:	226e      	movs	r2, #110	; 0x6e
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
    	osDelay(100);
 8001450:	2064      	movs	r0, #100	; 0x64
 8001452:	f004 ff8c 	bl	800636e <osDelay>
    }

	if(strstr(rasp_rx_number_plate, "OASS") != NULL)
 8001456:	4925      	ldr	r1, [pc, #148]	; (80014ec <ServoMotorTask+0x114>)
 8001458:	481e      	ldr	r0, [pc, #120]	; (80014d4 <ServoMotorTask+0xfc>)
 800145a:	f006 fed5 	bl	8008208 <strstr>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d023      	beq.n	80014ac <ServoMotorTask+0xd4>
    {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146a:	481b      	ldr	r0, [pc, #108]	; (80014d8 <ServoMotorTask+0x100>)
 800146c:	f001 fb08 	bl	8002a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2120      	movs	r1, #32
 8001474:	4819      	ldr	r0, [pc, #100]	; (80014dc <ServoMotorTask+0x104>)
 8001476:	f001 fb03 	bl	8002a80 <HAL_GPIO_WritePin>
    	TIM3->CCR2 = 55;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <ServoMotorTask+0x108>)
 800147c:	2237      	movs	r2, #55	; 0x37
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
    	osDelay(3000);
 8001480:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001484:	f004 ff73 	bl	800636e <osDelay>
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	e007      	b.n	800149e <ServoMotorTask+0xc6>
		{
			rasp_rx_number_plate[i] = '\0';
 800148e:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <ServoMotorTask+0xfc>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4413      	add	r3, r2
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(rasp_rx_number_plate); ++i)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	3301      	adds	r3, #1
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b0d      	cmp	r3, #13
 80014a2:	d9f4      	bls.n	800148e <ServoMotorTask+0xb6>
		}
		phone_state = DETECT;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <ServoMotorTask+0x10c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e799      	b.n	80013e0 <ServoMotorTask+0x8>
    }
	else if(Distance_right > 10)
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <ServoMotorTask+0x118>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b0a      	cmp	r3, #10
 80014b2:	d995      	bls.n	80013e0 <ServoMotorTask+0x8>
    {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <ServoMotorTask+0x100>)
 80014bc:	f001 fae0 	bl	8002a80 <HAL_GPIO_WritePin>
    	TIM3->CCR2 = 110;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <ServoMotorTask+0x108>)
 80014c2:	226e      	movs	r2, #110	; 0x6e
 80014c4:	639a      	str	r2, [r3, #56]	; 0x38
    	osDelay(100);
 80014c6:	2064      	movs	r0, #100	; 0x64
 80014c8:	f004 ff51 	bl	800636e <osDelay>
	if(strstr(rasp_rx_number_plate, "IASS") != NULL)
 80014cc:	e788      	b.n	80013e0 <ServoMotorTask+0x8>
 80014ce:	bf00      	nop
 80014d0:	080095d0 	.word	0x080095d0
 80014d4:	200000cc 	.word	0x200000cc
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40000400 	.word	0x40000400
 80014e4:	200000e7 	.word	0x200000e7
 80014e8:	2000009d 	.word	0x2000009d
 80014ec:	080095d8 	.word	0x080095d8
 80014f0:	200000ad 	.word	0x200000ad

080014f4 <LcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LcdTask */
void LcdTask(void const * argument)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]


	  /* algorithm change need */

//	count++;
	sprintf(buff, "Parking Manager ");
 80014fc:	4923      	ldr	r1, [pc, #140]	; (800158c <LcdTask+0x98>)
 80014fe:	4824      	ldr	r0, [pc, #144]	; (8001590 <LcdTask+0x9c>)
 8001500:	f006 fe2c 	bl	800815c <siprintf>
	LCD_put_cursor(0, 0);
 8001504:	2100      	movs	r1, #0
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fc68 	bl	8000ddc <LCD_put_cursor>
	LCD_send_str(buff);
 800150c:	4820      	ldr	r0, [pc, #128]	; (8001590 <LcdTask+0x9c>)
 800150e:	f7ff fce7 	bl	8000ee0 <LCD_send_str>
	sprintf(buff, "                ");
 8001512:	4920      	ldr	r1, [pc, #128]	; (8001594 <LcdTask+0xa0>)
 8001514:	481e      	ldr	r0, [pc, #120]	; (8001590 <LcdTask+0x9c>)
 8001516:	f006 fe21 	bl	800815c <siprintf>
	LCD_put_cursor(1, 0);
 800151a:	2100      	movs	r1, #0
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff fc5d 	bl	8000ddc <LCD_put_cursor>
	LCD_send_str(buff);
 8001522:	481b      	ldr	r0, [pc, #108]	; (8001590 <LcdTask+0x9c>)
 8001524:	f7ff fcdc 	bl	8000ee0 <LCD_send_str>
	if (lcd_state == DETECT && (Distance_left < 10 || Distance_right < 10))
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <LcdTask+0xa4>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d128      	bne.n	8001582 <LcdTask+0x8e>
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <LcdTask+0xa8>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b09      	cmp	r3, #9
 8001536:	d903      	bls.n	8001540 <LcdTask+0x4c>
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <LcdTask+0xac>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b09      	cmp	r3, #9
 800153e:	d820      	bhi.n	8001582 <LcdTask+0x8e>
	{
		osDelay(3500);
 8001540:	f640 50ac 	movw	r0, #3500	; 0xdac
 8001544:	f004 ff13 	bl	800636e <osDelay>
		sprintf(buff, "Welcome         ");
 8001548:	4916      	ldr	r1, [pc, #88]	; (80015a4 <LcdTask+0xb0>)
 800154a:	4811      	ldr	r0, [pc, #68]	; (8001590 <LcdTask+0x9c>)
 800154c:	f006 fe06 	bl	800815c <siprintf>
		LCD_put_cursor(0, 0);
 8001550:	2100      	movs	r1, #0
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fc42 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff);
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LcdTask+0x9c>)
 800155a:	f7ff fcc1 	bl	8000ee0 <LCD_send_str>
		sprintf(buff, pasing_number_plate);
 800155e:	4912      	ldr	r1, [pc, #72]	; (80015a8 <LcdTask+0xb4>)
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <LcdTask+0x9c>)
 8001562:	f006 fdfb 	bl	800815c <siprintf>
		LCD_put_cursor(1, 0);
 8001566:	2100      	movs	r1, #0
 8001568:	2001      	movs	r0, #1
 800156a:	f7ff fc37 	bl	8000ddc <LCD_put_cursor>
		LCD_send_str(buff);
 800156e:	4808      	ldr	r0, [pc, #32]	; (8001590 <LcdTask+0x9c>)
 8001570:	f7ff fcb6 	bl	8000ee0 <LCD_send_str>
		lcd_state = KEEP;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <LcdTask+0xa4>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
		osDelay(3000);
 800157a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800157e:	f004 fef6 	bl	800636e <osDelay>
	}

	osDelay(500);
 8001582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001586:	f004 fef2 	bl	800636e <osDelay>
	sprintf(buff, "Parking Manager ");
 800158a:	e7b7      	b.n	80014fc <LcdTask+0x8>
 800158c:	080095e0 	.word	0x080095e0
 8001590:	200000b0 	.word	0x200000b0
 8001594:	080095f4 	.word	0x080095f4
 8001598:	20000000 	.word	0x20000000
 800159c:	2000009d 	.word	0x2000009d
 80015a0:	200000ad 	.word	0x200000ad
 80015a4:	08009608 	.word	0x08009608
 80015a8:	200000dc 	.word	0x200000dc

080015ac <ManagerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ManagerTask */
void ManagerTask(void const * argument)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
//		osDelay(10);
//		HAL_UART_Transmit_IT(&huart1, pasing_number_plate, sizeof(pasing_number_plate));
//		osDelay(100);
//		phone_state = KEEP;
//	}
	if (strstr(rasp_rx_number_plate, "IAIL") != NULL )
 80015b4:	4920      	ldr	r1, [pc, #128]	; (8001638 <ManagerTask+0x8c>)
 80015b6:	4821      	ldr	r0, [pc, #132]	; (800163c <ManagerTask+0x90>)
 80015b8:	f006 fe26 	bl	8008208 <strstr>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d018      	beq.n	80015f4 <ManagerTask+0x48>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET); // red led on
 80015c2:	2201      	movs	r2, #1
 80015c4:	2120      	movs	r1, #32
 80015c6:	481e      	ldr	r0, [pc, #120]	; (8001640 <ManagerTask+0x94>)
 80015c8:	f001 fa5a 	bl	8002a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET); // green led off
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d2:	481c      	ldr	r0, [pc, #112]	; (8001644 <ManagerTask+0x98>)
 80015d4:	f001 fa54 	bl	8002a80 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_IT(&huart1, Fail, sizeof(Fail));
 80015d8:	2205      	movs	r2, #5
 80015da:	491b      	ldr	r1, [pc, #108]	; (8001648 <ManagerTask+0x9c>)
 80015dc:	481b      	ldr	r0, [pc, #108]	; (800164c <ManagerTask+0xa0>)
 80015de:	f003 ff01 	bl	80053e4 <HAL_UART_Transmit_IT>
		osDelay(3000);
 80015e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015e6:	f004 fec2 	bl	800636e <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); // red led off
 80015ea:	2200      	movs	r2, #0
 80015ec:	2120      	movs	r1, #32
 80015ee:	4814      	ldr	r0, [pc, #80]	; (8001640 <ManagerTask+0x94>)
 80015f0:	f001 fa46 	bl	8002a80 <HAL_GPIO_WritePin>
		// phone_tx_Data input
//		HAL_UART_Transmit_IT(&huart1, pasing_number_plate, sizeof(pasing_number_plate));
//		osDelay(100);
	}
	if (strstr(rasp_rx_number_plate, "OAIL") != NULL)
 80015f4:	4916      	ldr	r1, [pc, #88]	; (8001650 <ManagerTask+0xa4>)
 80015f6:	4811      	ldr	r0, [pc, #68]	; (800163c <ManagerTask+0x90>)
 80015f8:	f006 fe06 	bl	8008208 <strstr>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0d8      	beq.n	80015b4 <ManagerTask+0x8>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET); // red led
 8001602:	2201      	movs	r2, #1
 8001604:	2120      	movs	r1, #32
 8001606:	480e      	ldr	r0, [pc, #56]	; (8001640 <ManagerTask+0x94>)
 8001608:	f001 fa3a 	bl	8002a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET); // green led off
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001612:	480c      	ldr	r0, [pc, #48]	; (8001644 <ManagerTask+0x98>)
 8001614:	f001 fa34 	bl	8002a80 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_IT(&huart1, Fail, sizeof(Fail));
 8001618:	2205      	movs	r2, #5
 800161a:	490b      	ldr	r1, [pc, #44]	; (8001648 <ManagerTask+0x9c>)
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <ManagerTask+0xa0>)
 800161e:	f003 fee1 	bl	80053e4 <HAL_UART_Transmit_IT>
		osDelay(3000);
 8001622:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001626:	f004 fea2 	bl	800636e <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); // red led off
 800162a:	2200      	movs	r2, #0
 800162c:	2120      	movs	r1, #32
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <ManagerTask+0x94>)
 8001630:	f001 fa26 	bl	8002a80 <HAL_GPIO_WritePin>
	if (strstr(rasp_rx_number_plate, "IAIL") != NULL )
 8001634:	e7be      	b.n	80015b4 <ManagerTask+0x8>
 8001636:	bf00      	nop
 8001638:	0800961c 	.word	0x0800961c
 800163c:	200000cc 	.word	0x200000cc
 8001640:	40020000 	.word	0x40020000
 8001644:	40020800 	.word	0x40020800
 8001648:	2000000c 	.word	0x2000000c
 800164c:	200004d4 	.word	0x200004d4
 8001650:	08009624 	.word	0x08009624

08001654 <RaspTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RaspTask */
void RaspTask(void const * argument)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RaspTask */
  /* Infinite loop */
  for(;;)
  {
	  /* ***********Sending Data to Rasp Task*********** */
		if (Distance_left < 10 && curState_Left == DETECT)
 800165c:	4b67      	ldr	r3, [pc, #412]	; (80017fc <RaspTask+0x1a8>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b09      	cmp	r3, #9
 8001662:	d822      	bhi.n	80016aa <RaspTask+0x56>
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <RaspTask+0x1ac>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d11e      	bne.n	80016aa <RaspTask+0x56>
		{
			rasp_tx_dist1_Data[0] = 'I';
 800166c:	4b65      	ldr	r3, [pc, #404]	; (8001804 <RaspTask+0x1b0>)
 800166e:	2249      	movs	r2, #73	; 0x49
 8001670:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart6, rasp_tx_dist1_Data, sizeof(rasp_tx_dist1_Data));
 8001672:	2201      	movs	r2, #1
 8001674:	4963      	ldr	r1, [pc, #396]	; (8001804 <RaspTask+0x1b0>)
 8001676:	4864      	ldr	r0, [pc, #400]	; (8001808 <RaspTask+0x1b4>)
 8001678:	f003 feb4 	bl	80053e4 <HAL_UART_Transmit_IT>
			osDelay(2000);
 800167c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001680:	f004 fe75 	bl	800636e <osDelay>
			HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
 8001684:	220e      	movs	r2, #14
 8001686:	4961      	ldr	r1, [pc, #388]	; (800180c <RaspTask+0x1b8>)
 8001688:	485f      	ldr	r0, [pc, #380]	; (8001808 <RaspTask+0x1b4>)
 800168a:	f003 fee1 	bl	8005450 <HAL_UART_Receive_IT>
			cnt_left++;
 800168e:	4b60      	ldr	r3, [pc, #384]	; (8001810 <RaspTask+0x1bc>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <RaspTask+0x1bc>)
 8001698:	701a      	strb	r2, [r3, #0]
			osDelay(1500);
 800169a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800169e:	f004 fe66 	bl	800636e <osDelay>

			curState_Left = KEEP;
 80016a2:	4b57      	ldr	r3, [pc, #348]	; (8001800 <RaspTask+0x1ac>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	e02e      	b.n	8001708 <RaspTask+0xb4>

		}
		else if (Distance_left < 10 && curState_Left == KEEP)
 80016aa:	4b54      	ldr	r3, [pc, #336]	; (80017fc <RaspTask+0x1a8>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b09      	cmp	r3, #9
 80016b0:	d80c      	bhi.n	80016cc <RaspTask+0x78>
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <RaspTask+0x1ac>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d108      	bne.n	80016cc <RaspTask+0x78>
		{
			HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
 80016ba:	220e      	movs	r2, #14
 80016bc:	4953      	ldr	r1, [pc, #332]	; (800180c <RaspTask+0x1b8>)
 80016be:	4852      	ldr	r0, [pc, #328]	; (8001808 <RaspTask+0x1b4>)
 80016c0:	f003 fec6 	bl	8005450 <HAL_UART_Receive_IT>
//				HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
//				osDelay(1500);
//				cnt_left_in++;
//			}

			osDelay(100);
 80016c4:	2064      	movs	r0, #100	; 0x64
 80016c6:	f004 fe52 	bl	800636e <osDelay>
 80016ca:	e01d      	b.n	8001708 <RaspTask+0xb4>
		}
		else if(Distance_left > 10 && curState_Left == KEEP)
 80016cc:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <RaspTask+0x1a8>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b0a      	cmp	r3, #10
 80016d2:	d919      	bls.n	8001708 <RaspTask+0xb4>
 80016d4:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <RaspTask+0x1ac>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d115      	bne.n	8001708 <RaspTask+0xb4>
		{

			curState_Left = DETECT;
 80016dc:	4b48      	ldr	r3, [pc, #288]	; (8001800 <RaspTask+0x1ac>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
			lcd_state = DETECT;
 80016e2:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <RaspTask+0x1c0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, Pass, sizeof(Pass));
 80016e8:	2205      	movs	r2, #5
 80016ea:	494b      	ldr	r1, [pc, #300]	; (8001818 <RaspTask+0x1c4>)
 80016ec:	484b      	ldr	r0, [pc, #300]	; (800181c <RaspTask+0x1c8>)
 80016ee:	f003 fe79 	bl	80053e4 <HAL_UART_Transmit_IT>
			osDelay(10);
 80016f2:	200a      	movs	r0, #10
 80016f4:	f004 fe3b 	bl	800636e <osDelay>
			HAL_UART_Transmit_IT(&huart1, pasing_number_plate, sizeof(pasing_number_plate));
 80016f8:	2209      	movs	r2, #9
 80016fa:	4949      	ldr	r1, [pc, #292]	; (8001820 <RaspTask+0x1cc>)
 80016fc:	4847      	ldr	r0, [pc, #284]	; (800181c <RaspTask+0x1c8>)
 80016fe:	f003 fe71 	bl	80053e4 <HAL_UART_Transmit_IT>
			osDelay(100);
 8001702:	2064      	movs	r0, #100	; 0x64
 8001704:	f004 fe33 	bl	800636e <osDelay>





		if (Distance_right < 10 && curState_Right == DETECT )
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <RaspTask+0x1d0>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b09      	cmp	r3, #9
 800170e:	d822      	bhi.n	8001756 <RaspTask+0x102>
 8001710:	4b45      	ldr	r3, [pc, #276]	; (8001828 <RaspTask+0x1d4>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d11e      	bne.n	8001756 <RaspTask+0x102>
		{
			rasp_tx_dist2_Data[0] = 'O';
 8001718:	4b44      	ldr	r3, [pc, #272]	; (800182c <RaspTask+0x1d8>)
 800171a:	224f      	movs	r2, #79	; 0x4f
 800171c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart6, rasp_tx_dist2_Data, sizeof(rasp_tx_dist2_Data));
 800171e:	2201      	movs	r2, #1
 8001720:	4942      	ldr	r1, [pc, #264]	; (800182c <RaspTask+0x1d8>)
 8001722:	4839      	ldr	r0, [pc, #228]	; (8001808 <RaspTask+0x1b4>)
 8001724:	f003 fe5e 	bl	80053e4 <HAL_UART_Transmit_IT>
			osDelay(2000);
 8001728:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800172c:	f004 fe1f 	bl	800636e <osDelay>
			HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
 8001730:	220e      	movs	r2, #14
 8001732:	4936      	ldr	r1, [pc, #216]	; (800180c <RaspTask+0x1b8>)
 8001734:	4834      	ldr	r0, [pc, #208]	; (8001808 <RaspTask+0x1b4>)
 8001736:	f003 fe8b 	bl	8005450 <HAL_UART_Receive_IT>
			cnt_right++;
 800173a:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <RaspTask+0x1dc>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <RaspTask+0x1dc>)
 8001744:	701a      	strb	r2, [r3, #0]
			osDelay(1500);
 8001746:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800174a:	f004 fe10 	bl	800636e <osDelay>

			curState_Right = KEEP;
 800174e:	4b36      	ldr	r3, [pc, #216]	; (8001828 <RaspTask+0x1d4>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	e02e      	b.n	80017b4 <RaspTask+0x160>
//				HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
//				cnt_right_in++;
//			}

		}
		else if (Distance_right < 10 && curState_Right == KEEP)
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <RaspTask+0x1d0>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b09      	cmp	r3, #9
 800175c:	d80c      	bhi.n	8001778 <RaspTask+0x124>
 800175e:	4b32      	ldr	r3, [pc, #200]	; (8001828 <RaspTask+0x1d4>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <RaspTask+0x124>
		{
			HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
 8001766:	220e      	movs	r2, #14
 8001768:	4928      	ldr	r1, [pc, #160]	; (800180c <RaspTask+0x1b8>)
 800176a:	4827      	ldr	r0, [pc, #156]	; (8001808 <RaspTask+0x1b4>)
 800176c:	f003 fe70 	bl	8005450 <HAL_UART_Receive_IT>
			osDelay(100);
 8001770:	2064      	movs	r0, #100	; 0x64
 8001772:	f004 fdfc 	bl	800636e <osDelay>
 8001776:	e01d      	b.n	80017b4 <RaspTask+0x160>
		}
		else if (Distance_right > 10 && curState_Right == KEEP)
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <RaspTask+0x1d0>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b0a      	cmp	r3, #10
 800177e:	d919      	bls.n	80017b4 <RaspTask+0x160>
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <RaspTask+0x1d4>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d115      	bne.n	80017b4 <RaspTask+0x160>
		{

			curState_Right = DETECT;
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <RaspTask+0x1d4>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
			lcd_state = DETECT;
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <RaspTask+0x1c0>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, Pass, sizeof(Pass));
 8001794:	2205      	movs	r2, #5
 8001796:	4920      	ldr	r1, [pc, #128]	; (8001818 <RaspTask+0x1c4>)
 8001798:	4820      	ldr	r0, [pc, #128]	; (800181c <RaspTask+0x1c8>)
 800179a:	f003 fe23 	bl	80053e4 <HAL_UART_Transmit_IT>
			osDelay(10);
 800179e:	200a      	movs	r0, #10
 80017a0:	f004 fde5 	bl	800636e <osDelay>
			HAL_UART_Transmit_IT(&huart1, pasing_number_plate, sizeof(pasing_number_plate));
 80017a4:	2209      	movs	r2, #9
 80017a6:	491e      	ldr	r1, [pc, #120]	; (8001820 <RaspTask+0x1cc>)
 80017a8:	481c      	ldr	r0, [pc, #112]	; (800181c <RaspTask+0x1c8>)
 80017aa:	f003 fe1b 	bl	80053e4 <HAL_UART_Transmit_IT>
			osDelay(100);
 80017ae:	2064      	movs	r0, #100	; 0x64
 80017b0:	f004 fddd 	bl	800636e <osDelay>
		}

	    //HAL_UART_Receive_IT(&huart6, rasp_rx_number_plate, sizeof(rasp_rx_number_plate));
	    sscanf(rasp_rx_number_plate, "IASS %8[^\n]", pasing_number_plate);
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <RaspTask+0x1cc>)
 80017b6:	491f      	ldr	r1, [pc, #124]	; (8001834 <RaspTask+0x1e0>)
 80017b8:	4814      	ldr	r0, [pc, #80]	; (800180c <RaspTask+0x1b8>)
 80017ba:	f006 fcef 	bl	800819c <siscanf>
	    sscanf(rasp_rx_number_plate, "OASS %8[^\n]", pasing_number_plate);
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <RaspTask+0x1cc>)
 80017c0:	491d      	ldr	r1, [pc, #116]	; (8001838 <RaspTask+0x1e4>)
 80017c2:	4812      	ldr	r0, [pc, #72]	; (800180c <RaspTask+0x1b8>)
 80017c4:	f006 fcea 	bl	800819c <siscanf>

	    if(strstr(rasp_rx_number_plate, "IASS") == NULL && strstr(rasp_rx_number_plate, "OASS") == NULL)
 80017c8:	491c      	ldr	r1, [pc, #112]	; (800183c <RaspTask+0x1e8>)
 80017ca:	4810      	ldr	r0, [pc, #64]	; (800180c <RaspTask+0x1b8>)
 80017cc:	f006 fd1c 	bl	8008208 <strstr>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10b      	bne.n	80017ee <RaspTask+0x19a>
 80017d6:	491a      	ldr	r1, [pc, #104]	; (8001840 <RaspTask+0x1ec>)
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <RaspTask+0x1b8>)
 80017da:	f006 fd15 	bl	8008208 <strstr>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d104      	bne.n	80017ee <RaspTask+0x19a>
	    {
		  memset(rasp_rx_number_plate, 0, sizeof(rasp_rx_number_plate));
 80017e4:	220e      	movs	r2, #14
 80017e6:	2100      	movs	r1, #0
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <RaspTask+0x1b8>)
 80017ea:	f006 fd05 	bl	80081f8 <memset>
	    }

	    rasp_tx_dist1_Data[0] = '\0';
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <RaspTask+0x1b0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
	    rasp_tx_dist2_Data[0] = '\0';
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <RaspTask+0x1d8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
		if (Distance_left < 10 && curState_Left == DETECT)
 80017fa:	e72f      	b.n	800165c <RaspTask+0x8>
 80017fc:	2000009d 	.word	0x2000009d
 8001800:	200000e5 	.word	0x200000e5
 8001804:	200000c4 	.word	0x200000c4
 8001808:	2000051c 	.word	0x2000051c
 800180c:	200000cc 	.word	0x200000cc
 8001810:	200000e8 	.word	0x200000e8
 8001814:	20000000 	.word	0x20000000
 8001818:	20000004 	.word	0x20000004
 800181c:	200004d4 	.word	0x200004d4
 8001820:	200000dc 	.word	0x200000dc
 8001824:	200000ad 	.word	0x200000ad
 8001828:	200000e6 	.word	0x200000e6
 800182c:	200000c8 	.word	0x200000c8
 8001830:	200000e9 	.word	0x200000e9
 8001834:	0800962c 	.word	0x0800962c
 8001838:	08009638 	.word	0x08009638
 800183c:	080095d0 	.word	0x080095d0
 8001840:	080095d8 	.word	0x080095d8

08001844 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <MX_GPIO_Init+0xec>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a33      	ldr	r2, [pc, #204]	; (8001930 <MX_GPIO_Init+0xec>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b31      	ldr	r3, [pc, #196]	; (8001930 <MX_GPIO_Init+0xec>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <MX_GPIO_Init+0xec>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <MX_GPIO_Init+0xec>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <MX_GPIO_Init+0xec>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <MX_GPIO_Init+0xec>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a25      	ldr	r2, [pc, #148]	; (8001930 <MX_GPIO_Init+0xec>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_GPIO_Init+0xec>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80018b4:	481f      	ldr	r0, [pc, #124]	; (8001934 <MX_GPIO_Init+0xf0>)
 80018b6:	f001 f8e3 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c0:	481d      	ldr	r0, [pc, #116]	; (8001938 <MX_GPIO_Init+0xf4>)
 80018c2:	f001 f8dd 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2120      	movs	r1, #32
 80018ca:	481c      	ldr	r0, [pc, #112]	; (800193c <MX_GPIO_Init+0xf8>)
 80018cc:	f001 f8d8 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 80018d0:	f44f 7390 	mov.w	r3, #288	; 0x120
 80018d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	4619      	mov	r1, r3
 80018e8:	4812      	ldr	r0, [pc, #72]	; (8001934 <MX_GPIO_Init+0xf0>)
 80018ea:	f000 ff45 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	4619      	mov	r1, r3
 8001906:	480c      	ldr	r0, [pc, #48]	; (8001938 <MX_GPIO_Init+0xf4>)
 8001908:	f000 ff36 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800190c:	2320      	movs	r3, #32
 800190e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_GPIO_Init+0xf8>)
 8001924:	f000 ff28 	bl	8002778 <HAL_GPIO_Init>

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000
 8001938:	40020800 	.word	0x40020800
 800193c:	40020400 	.word	0x40020400

08001940 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_I2C1_Init+0x50>)
 8001946:	4a13      	ldr	r2, [pc, #76]	; (8001994 <MX_I2C1_Init+0x54>)
 8001948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_I2C1_Init+0x50>)
 800194c:	4a12      	ldr	r2, [pc, #72]	; (8001998 <MX_I2C1_Init+0x58>)
 800194e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_I2C1_Init+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_I2C1_Init+0x50>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_I2C1_Init+0x50>)
 800195e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001962:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_I2C1_Init+0x50>)
 800197e:	f001 f899 	bl	8002ab4 <HAL_I2C_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001988:	f000 f8e2 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200003a4 	.word	0x200003a4
 8001994:	40005400 	.word	0x40005400
 8001998:	000186a0 	.word	0x000186a0

0800199c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_I2C_MspInit+0x84>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12b      	bne.n	8001a16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019da:	23c0      	movs	r3, #192	; 0xc0
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019de:	2312      	movs	r3, #18
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ea:	2304      	movs	r3, #4
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 80019f6:	f000 febf 	bl	8002778 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 8001a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40005400 	.word	0x40005400
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020400 	.word	0x40020400

08001a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a30:	f000 fcc8 	bl	80023c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a34:	f000 f812 	bl	8001a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a38:	f7ff ff04 	bl	8001844 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a3c:	f000 f9bc 	bl	8001db8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a40:	f000 fa34 	bl	8001eac <MX_TIM3_Init>
  MX_I2C1_Init();
 8001a44:	f7ff ff7c 	bl	8001940 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001a48:	f000 fb90 	bl	800216c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001a4c:	f000 fbb8 	bl	80021c0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001a50:	f7ff fc0a 	bl	8001268 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a54:	f004 fc38 	bl	80062c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <main+0x2c>
	...

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b094      	sub	sp, #80	; 0x50
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	2230      	movs	r2, #48	; 0x30
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f006 fbc4 	bl	80081f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <SystemClock_Config+0xc8>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	4a26      	ldr	r2, [pc, #152]	; (8001b24 <SystemClock_Config+0xc8>)
 8001a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a90:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <SystemClock_Config+0xc8>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <SystemClock_Config+0xcc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <SystemClock_Config+0xcc>)
 8001aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <SystemClock_Config+0xcc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001acc:	2308      	movs	r3, #8
 8001ace:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ad0:	2364      	movs	r3, #100	; 0x64
 8001ad2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 fc85 	bl	80033f0 <HAL_RCC_OscConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001aec:	f000 f830 	bl	8001b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af0:	230f      	movs	r3, #15
 8001af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af4:	2302      	movs	r3, #2
 8001af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f001 fee7 	bl	80038e0 <HAL_RCC_ClockConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b18:	f000 f81a 	bl	8001b50 <Error_Handler>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3750      	adds	r7, #80	; 0x50
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40007000 	.word	0x40007000

08001b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b3e:	f000 fc63 	bl	8002408 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40000c00 	.word	0x40000c00

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i
}
 8001b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <Error_Handler+0x8>
	...

08001b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_MspInit+0x54>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_MspInit+0x54>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_MspInit+0x54>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_MspInit+0x54>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_MspInit+0x54>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_MspInit+0x54>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	210f      	movs	r1, #15
 8001b9e:	f06f 0001 	mvn.w	r0, #1
 8001ba2:	f000 fd2d 	bl	8002600 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08e      	sub	sp, #56	; 0x38
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_InitTick+0xe4>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a32      	ldr	r2, [pc, #200]	; (8001c98 <HAL_InitTick+0xe4>)
 8001bce:	f043 0308 	orr.w	r3, r3, #8
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_InitTick+0xe4>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be0:	f107 0210 	add.w	r2, r7, #16
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 f858 	bl	8003ca0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bfa:	f002 f829 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 8001bfe:	6378      	str	r0, [r7, #52]	; 0x34
 8001c00:	e004      	b.n	8001c0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c02:	f002 f825 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 8001c06:	4603      	mov	r3, r0
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0e:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <HAL_InitTick+0xe8>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	0c9b      	lsrs	r3, r3, #18
 8001c16:	3b01      	subs	r3, #1
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_InitTick+0xec>)
 8001c1c:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <HAL_InitTick+0xf0>)
 8001c1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_InitTick+0xec>)
 8001c22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c26:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <HAL_InitTick+0xec>)
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <HAL_InitTick+0xec>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_InitTick+0xec>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_InitTick+0xec>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001c40:	4817      	ldr	r0, [pc, #92]	; (8001ca0 <HAL_InitTick+0xec>)
 8001c42:	f002 f85f 	bl	8003d04 <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d11b      	bne.n	8001c8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001c54:	4812      	ldr	r0, [pc, #72]	; (8001ca0 <HAL_InitTick+0xec>)
 8001c56:	f002 f8a5 	bl	8003da4 <HAL_TIM_Base_Start_IT>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d111      	bne.n	8001c8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c68:	2032      	movs	r0, #50	; 0x32
 8001c6a:	f000 fce5 	bl	8002638 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d808      	bhi.n	8001c86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	2032      	movs	r0, #50	; 0x32
 8001c7a:	f000 fcc1 	bl	8002600 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_InitTick+0xf4>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e002      	b.n	8001c8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3738      	adds	r7, #56	; 0x38
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	431bde83 	.word	0x431bde83
 8001ca0:	200003f8 	.word	0x200003f8
 8001ca4:	40000c00 	.word	0x40000c00
 8001ca8:	20000018 	.word	0x20000018

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <NMI_Handler+0x4>

08001cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler+0x4>

08001cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <TIM2_IRQHandler+0x10>)
 8001cde:	f002 fb41 	bl	8004364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000444 	.word	0x20000444

08001cec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <USART1_IRQHandler+0x10>)
 8001cf2:	f003 fbd3 	bl	800549c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200004d4 	.word	0x200004d4

08001d00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <TIM5_IRQHandler+0x10>)
 8001d06:	f002 fb2d 	bl	8004364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200003f8 	.word	0x200003f8

08001d14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <USART6_IRQHandler+0x10>)
 8001d1a:	f003 fbbf 	bl	800549c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000051c 	.word	0x2000051c

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <_sbrk+0x5c>)
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <_sbrk+0x60>)
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <_sbrk+0x64>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <_sbrk+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d58:	f006 fac2 	bl	80082e0 <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	e009      	b.n	8001d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <_sbrk+0x64>)
 8001d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20020000 	.word	0x20020000
 8001d88:	00000400 	.word	0x00000400
 8001d8c:	20000440 	.word	0x20000440
 8001d90:	20004408 	.word	0x20004408

08001d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <SystemInit+0x20>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <SystemInit+0x20>)
 8001da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0318 	add.w	r3, r7, #24
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001de2:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001dea:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001dec:	2263      	movs	r2, #99	; 0x63
 8001dee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001df8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001dfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e0a:	4827      	ldr	r0, [pc, #156]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001e0c:	f001 ff7a 	bl	8003d04 <HAL_TIM_Base_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001e16:	f7ff fe9b 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e20:	f107 0318 	add.w	r3, r7, #24
 8001e24:	4619      	mov	r1, r3
 8001e26:	4820      	ldr	r0, [pc, #128]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001e28:	f002 fcea 	bl	8004800 <HAL_TIM_ConfigClockSource>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e32:	f7ff fe8d 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e36:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001e38:	f002 f920 	bl	800407c <HAL_TIM_IC_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e42:	f7ff fe85 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001e56:	f003 f9f3 	bl	8005240 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001e60:	f7ff fe76 	bl	8001b50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e64:	2300      	movs	r3, #0
 8001e66:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e74:	463b      	mov	r3, r7
 8001e76:	2200      	movs	r2, #0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001e7c:	f002 fb62 	bl	8004544 <HAL_TIM_IC_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001e86:	f7ff fe63 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_TIM2_Init+0xf0>)
 8001e92:	f002 fb57 	bl	8004544 <HAL_TIM_IC_ConfigChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001e9c:	f7ff fe58 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000444 	.word	0x20000444

08001eac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	; 0x38
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	f107 0320 	add.w	r3, r7, #32
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
 8001ed8:	615a      	str	r2, [r3, #20]
 8001eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001ede:	4a33      	ldr	r2, [pc, #204]	; (8001fac <MX_TIM3_Init+0x100>)
 8001ee0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000-1;
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001ee4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001ee8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001ef2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ef6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f04:	4828      	ldr	r0, [pc, #160]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001f06:	f001 fefd 	bl	8003d04 <HAL_TIM_Base_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f10:	f7ff fe1e 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4821      	ldr	r0, [pc, #132]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001f22:	f002 fc6d 	bl	8004800 <HAL_TIM_ConfigClockSource>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f2c:	f7ff fe10 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f30:	481d      	ldr	r0, [pc, #116]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001f32:	f001 ff99 	bl	8003e68 <HAL_TIM_PWM_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f3c:	f7ff fe08 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4816      	ldr	r0, [pc, #88]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001f50:	f003 f976 	bl	8005240 <HAL_TIMEx_MasterConfigSynchronization>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f5a:	f7ff fdf9 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5e:	2360      	movs	r3, #96	; 0x60
 8001f60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	2200      	movs	r2, #0
 8001f72:	4619      	mov	r1, r3
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001f76:	f002 fb81 	bl	800467c <HAL_TIM_PWM_ConfigChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f80:	f7ff fde6 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2204      	movs	r2, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001f8c:	f002 fb76 	bl	800467c <HAL_TIM_PWM_ConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001f96:	f7ff fddb 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f9a:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <MX_TIM3_Init+0xfc>)
 8001f9c:	f000 f88c 	bl	80020b8 <HAL_TIM_MspPostInit>

}
 8001fa0:	bf00      	nop
 8001fa2:	3738      	adds	r7, #56	; 0x38
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000048c 	.word	0x2000048c
 8001fac:	40000400 	.word	0x40000400

08001fb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	; 0x30
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d153      	bne.n	800207a <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002026:	2301      	movs	r3, #1
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002036:	2301      	movs	r3, #1
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203a:	f107 031c 	add.w	r3, r7, #28
 800203e:	4619      	mov	r1, r3
 8002040:	481a      	ldr	r0, [pc, #104]	; (80020ac <HAL_TIM_Base_MspInit+0xfc>)
 8002042:	f000 fb99 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002058:	2301      	movs	r3, #1
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	4619      	mov	r1, r3
 8002062:	4813      	ldr	r0, [pc, #76]	; (80020b0 <HAL_TIM_Base_MspInit+0x100>)
 8002064:	f000 fb88 	bl	8002778 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	2105      	movs	r1, #5
 800206c:	201c      	movs	r0, #28
 800206e:	f000 fac7 	bl	8002600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002072:	201c      	movs	r0, #28
 8002074:	f000 fae0 	bl	8002638 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002078:	e012      	b.n	80020a0 <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM3)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_TIM_Base_MspInit+0x104>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d10d      	bne.n	80020a0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a06      	ldr	r2, [pc, #24]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_TIM_Base_MspInit+0xf8>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3730      	adds	r7, #48	; 0x30
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020400 	.word	0x40020400
 80020b4:	40000400 	.word	0x40000400

080020b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_TIM_MspPostInit+0xa4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d13b      	bne.n	8002152 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_TIM_MspPostInit+0xa8>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <HAL_TIM_MspPostInit+0xa8>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_TIM_MspPostInit+0xa8>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_TIM_MspPostInit+0xa8>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_TIM_MspPostInit+0xa8>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_TIM_MspPostInit+0xa8>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002122:	2302      	movs	r3, #2
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	480d      	ldr	r0, [pc, #52]	; (8002164 <HAL_TIM_MspPostInit+0xac>)
 800212e:	f000 fb23 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002142:	2302      	movs	r3, #2
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	4806      	ldr	r0, [pc, #24]	; (8002168 <HAL_TIM_MspPostInit+0xb0>)
 800214e:	f000 fb13 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40000400 	.word	0x40000400
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000
 8002168:	40020800 	.word	0x40020800

0800216c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <MX_USART1_UART_Init+0x50>)
 8002174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002178:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800217c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <MX_USART1_UART_Init+0x4c>)
 80021a4:	f003 f8ce 	bl	8005344 <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021ae:	f7ff fccf 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200004d4 	.word	0x200004d4
 80021bc:	40011000 	.word	0x40011000

080021c0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_USART6_UART_Init+0x4c>)
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <MX_USART6_UART_Init+0x50>)
 80021c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <MX_USART6_UART_Init+0x4c>)
 80021cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_USART6_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_USART6_UART_Init+0x4c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_USART6_UART_Init+0x4c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_USART6_UART_Init+0x4c>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_USART6_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_USART6_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_USART6_UART_Init+0x4c>)
 80021f8:	f003 f8a4 	bl	8005344 <HAL_UART_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002202:	f7ff fca5 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000051c 	.word	0x2000051c
 8002210:	40011400 	.word	0x40011400

08002214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a4a      	ldr	r2, [pc, #296]	; (800235c <HAL_UART_MspInit+0x148>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d135      	bne.n	80022a2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	4b49      	ldr	r3, [pc, #292]	; (8002360 <HAL_UART_MspInit+0x14c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a48      	ldr	r2, [pc, #288]	; (8002360 <HAL_UART_MspInit+0x14c>)
 8002240:	f043 0310 	orr.w	r3, r3, #16
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b46      	ldr	r3, [pc, #280]	; (8002360 <HAL_UART_MspInit+0x14c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	4b42      	ldr	r3, [pc, #264]	; (8002360 <HAL_UART_MspInit+0x14c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a41      	ldr	r2, [pc, #260]	; (8002360 <HAL_UART_MspInit+0x14c>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <HAL_UART_MspInit+0x14c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800226e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002280:	2307      	movs	r3, #7
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	4836      	ldr	r0, [pc, #216]	; (8002364 <HAL_UART_MspInit+0x150>)
 800228c:	f000 fa74 	bl	8002778 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2105      	movs	r1, #5
 8002294:	2025      	movs	r0, #37	; 0x25
 8002296:	f000 f9b3 	bl	8002600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800229a:	2025      	movs	r0, #37	; 0x25
 800229c:	f000 f9cc 	bl	8002638 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80022a0:	e057      	b.n	8002352 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART6)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a30      	ldr	r2, [pc, #192]	; (8002368 <HAL_UART_MspInit+0x154>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d152      	bne.n	8002352 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_UART_MspInit+0x14c>)
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	4a2a      	ldr	r2, [pc, #168]	; (8002360 <HAL_UART_MspInit+0x14c>)
 80022b6:	f043 0320 	orr.w	r3, r3, #32
 80022ba:	6453      	str	r3, [r2, #68]	; 0x44
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_UART_MspInit+0x14c>)
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_UART_MspInit+0x14c>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	4a23      	ldr	r2, [pc, #140]	; (8002360 <HAL_UART_MspInit+0x14c>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6313      	str	r3, [r2, #48]	; 0x30
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_UART_MspInit+0x14c>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_UART_MspInit+0x14c>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_UART_MspInit+0x14c>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6313      	str	r3, [r2, #48]	; 0x30
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <HAL_UART_MspInit+0x14c>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002310:	2308      	movs	r3, #8
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <HAL_UART_MspInit+0x158>)
 800231c:	f000 fa2c 	bl	8002778 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002332:	2308      	movs	r3, #8
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4619      	mov	r1, r3
 800233c:	4809      	ldr	r0, [pc, #36]	; (8002364 <HAL_UART_MspInit+0x150>)
 800233e:	f000 fa1b 	bl	8002778 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2105      	movs	r1, #5
 8002346:	2047      	movs	r0, #71	; 0x47
 8002348:	f000 f95a 	bl	8002600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800234c:	2047      	movs	r0, #71	; 0x47
 800234e:	f000 f973 	bl	8002638 <HAL_NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3730      	adds	r7, #48	; 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40011000 	.word	0x40011000
 8002360:	40023800 	.word	0x40023800
 8002364:	40020000 	.word	0x40020000
 8002368:	40011400 	.word	0x40011400
 800236c:	40020800 	.word	0x40020800

08002370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8002370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002374:	f7ff fd0e 	bl	8001d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800237a:	490d      	ldr	r1, [pc, #52]	; (80023b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800237c:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002390:	4c0a      	ldr	r4, [pc, #40]	; (80023bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239e:	f005 ffa5 	bl	80082ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023a2:	f7ff fb43 	bl	8001a2c <main>
  bx  lr    
 80023a6:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 80023a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80023b4:	080097d0 	.word	0x080097d0
  ldr r2, =_sbss
 80023b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80023bc:	20004404 	.word	0x20004404

080023c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c0:	e7fe      	b.n	80023c0 <ADC_IRQHandler>
	...

080023c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c8:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <HAL_Init+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <HAL_Init+0x40>)
 80023ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_Init+0x40>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <HAL_Init+0x40>)
 80023da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_Init+0x40>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a07      	ldr	r2, [pc, #28]	; (8002404 <HAL_Init+0x40>)
 80023e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ec:	2003      	movs	r0, #3
 80023ee:	f000 f8fc 	bl	80025ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f2:	200f      	movs	r0, #15
 80023f4:	f7ff fbde 	bl	8001bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f8:	f7ff fbb0 	bl	8001b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023c00 	.word	0x40023c00

08002408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_IncTick+0x20>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x24>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4413      	add	r3, r2
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_IncTick+0x24>)
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	2000001c 	.word	0x2000001c
 800242c:	20000564 	.word	0x20000564

08002430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return uwTick;
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_GetTick+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000564 	.word	0x20000564

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff ffee 	bl	8002430 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d005      	beq.n	800246e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_Delay+0x44>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246e:	bf00      	nop
 8002470:	f7ff ffde 	bl	8002430 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	429a      	cmp	r2, r3
 800247e:	d8f7      	bhi.n	8002470 <HAL_Delay+0x28>
  {
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000001c 	.word	0x2000001c

08002490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <__NVIC_EnableIRQ+0x38>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100

08002530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	; (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
         );
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ff4c 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002612:	f7ff ff61 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 8002616:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	6978      	ldr	r0, [r7, #20]
 800261e:	f7ff ffb1 	bl	8002584 <NVIC_EncodePriority>
 8002622:	4602      	mov	r2, r0
 8002624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff80 	bl	8002530 <__NVIC_SetPriority>
}
 8002630:	bf00      	nop
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff54 	bl	80024f4 <__NVIC_EnableIRQ>
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002662:	f7ff fee5 	bl	8002430 <HAL_GetTick>
 8002666:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d008      	beq.n	8002686 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2280      	movs	r2, #128	; 0x80
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e052      	b.n	800272c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0216 	bic.w	r2, r2, #22
 8002694:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_DMA_Abort+0x62>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d6:	e013      	b.n	8002700 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026d8:	f7ff feaa 	bl	8002430 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d90c      	bls.n	8002700 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2220      	movs	r2, #32
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e015      	b.n	800272c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1e4      	bne.n	80026d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	223f      	movs	r2, #63	; 0x3f
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d004      	beq.n	8002752 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00c      	b.n	800276c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2205      	movs	r2, #5
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e159      	b.n	8002a48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f040 8148 	bne.w	8002a42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d005      	beq.n	80027ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d130      	bne.n	800282c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 0201 	and.w	r2, r3, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b03      	cmp	r3, #3
 8002836:	d017      	beq.n	8002868 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d123      	bne.n	80028bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	220f      	movs	r2, #15
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a2 	beq.w	8002a42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291a:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x2ec>)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_GPIO_Init+0x2f0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x202>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x2f4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x1fe>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a47      	ldr	r2, [pc, #284]	; (8002a70 <HAL_GPIO_Init+0x2f8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x1fa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a46      	ldr	r2, [pc, #280]	; (8002a74 <HAL_GPIO_Init+0x2fc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x1f6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a45      	ldr	r2, [pc, #276]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x1f2>
 8002966:	2304      	movs	r3, #4
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296a:	2307      	movs	r3, #7
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x204>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298c:	4935      	ldr	r1, [pc, #212]	; (8002a64 <HAL_GPIO_Init+0x2ec>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_GPIO_Init+0x304>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029be:	4a2f      	ldr	r2, [pc, #188]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f aea2 	bls.w	8002794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	041a      	lsls	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e12b      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe ff5e 	bl	800199c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	; 0x24
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b18:	f001 f89a 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 8002b1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a81      	ldr	r2, [pc, #516]	; (8002d28 <HAL_I2C_Init+0x274>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d807      	bhi.n	8002b38 <HAL_I2C_Init+0x84>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a80      	ldr	r2, [pc, #512]	; (8002d2c <HAL_I2C_Init+0x278>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e006      	b.n	8002b46 <HAL_I2C_Init+0x92>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	; (8002d30 <HAL_I2C_Init+0x27c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	bf94      	ite	ls
 8002b40:	2301      	movls	r3, #1
 8002b42:	2300      	movhi	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0e7      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a78      	ldr	r2, [pc, #480]	; (8002d34 <HAL_I2C_Init+0x280>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0c9b      	lsrs	r3, r3, #18
 8002b58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <HAL_I2C_Init+0x274>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d802      	bhi.n	8002b88 <HAL_I2C_Init+0xd4>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3301      	adds	r3, #1
 8002b86:	e009      	b.n	8002b9c <HAL_I2C_Init+0xe8>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	4a69      	ldr	r2, [pc, #420]	; (8002d38 <HAL_I2C_Init+0x284>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	495c      	ldr	r1, [pc, #368]	; (8002d28 <HAL_I2C_Init+0x274>)
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	d819      	bhi.n	8002bf0 <HAL_I2C_Init+0x13c>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e59      	subs	r1, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bca:	1c59      	adds	r1, r3, #1
 8002bcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_I2C_Init+0x138>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e59      	subs	r1, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bea:	e051      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bec:	2304      	movs	r3, #4
 8002bee:	e04f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d111      	bne.n	8002c1c <HAL_I2C_Init+0x168>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	440b      	add	r3, r1
 8002c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e012      	b.n	8002c42 <HAL_I2C_Init+0x18e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Init+0x196>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e022      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10e      	bne.n	8002c70 <HAL_I2C_Init+0x1bc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1e58      	subs	r0, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	440b      	add	r3, r1
 8002c60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6e:	e00f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	0099      	lsls	r1, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	6809      	ldr	r1, [r1, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6911      	ldr	r1, [r2, #16]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68d2      	ldr	r2, [r2, #12]
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	000186a0 	.word	0x000186a0
 8002d2c:	001e847f 	.word	0x001e847f
 8002d30:	003d08ff 	.word	0x003d08ff
 8002d34:	431bde83 	.word	0x431bde83
 8002d38:	10624dd3 	.word	0x10624dd3

08002d3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	461a      	mov	r2, r3
 8002d48:	460b      	mov	r3, r1
 8002d4a:	817b      	strh	r3, [r7, #10]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff fb6e 	bl	8002430 <HAL_GetTick>
 8002d54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	f040 80e0 	bne.w	8002f24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2319      	movs	r3, #25
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4970      	ldr	r1, [pc, #448]	; (8002f30 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f964 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e0d3      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_I2C_Master_Transmit+0x50>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e0cc      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d007      	beq.n	8002db2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2221      	movs	r2, #33	; 0x21
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2210      	movs	r2, #16
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	893a      	ldrh	r2, [r7, #8]
 8002de2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a50      	ldr	r2, [pc, #320]	; (8002f34 <HAL_I2C_Master_Transmit+0x1f8>)
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f89c 	bl	8002f38 <I2C_MasterRequestWrite>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e08d      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e20:	e066      	b.n	8002ef0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	6a39      	ldr	r1, [r7, #32]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fa22 	bl	8003270 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d107      	bne.n	8002e4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06b      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_I2C_Master_Transmit+0x188>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d017      	beq.n	8002ec4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	6a39      	ldr	r1, [r7, #32]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fa19 	bl	8003300 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d107      	bne.n	8002eec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e01a      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d194      	bne.n	8002e22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	00100002 	.word	0x00100002
 8002f34:	ffff0000 	.word	0xffff0000

08002f38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d006      	beq.n	8002f62 <I2C_MasterRequestWrite+0x2a>
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d003      	beq.n	8002f62 <I2C_MasterRequestWrite+0x2a>
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f60:	d108      	bne.n	8002f74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e00b      	b.n	8002f8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	2b12      	cmp	r3, #18
 8002f7a:	d107      	bne.n	8002f8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f84f 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00d      	beq.n	8002fc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d103      	bne.n	8002fbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e035      	b.n	800302c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fc8:	d108      	bne.n	8002fdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fca:	897b      	ldrh	r3, [r7, #10]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fd8:	611a      	str	r2, [r3, #16]
 8002fda:	e01b      	b.n	8003014 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fdc:	897b      	ldrh	r3, [r7, #10]
 8002fde:	11db      	asrs	r3, r3, #7
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 0306 	and.w	r3, r3, #6
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f063 030f 	orn	r3, r3, #15
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	490e      	ldr	r1, [pc, #56]	; (8003034 <I2C_MasterRequestWrite+0xfc>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f898 	bl	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e010      	b.n	800302c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4907      	ldr	r1, [pc, #28]	; (8003038 <I2C_MasterRequestWrite+0x100>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f888 	bl	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00010008 	.word	0x00010008
 8003038:	00010002 	.word	0x00010002

0800303c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800304c:	e048      	b.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d044      	beq.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003056:	f7ff f9eb 	bl	8002430 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d139      	bne.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d10d      	bne.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	43da      	mvns	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	e00c      	b.n	80030ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	43da      	mvns	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d116      	bne.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e023      	b.n	8003128 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	0c1b      	lsrs	r3, r3, #16
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d10d      	bne.n	8003106 <I2C_WaitOnFlagUntilTimeout+0xca>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	43da      	mvns	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4013      	ands	r3, r2
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	e00c      	b.n	8003120 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	43da      	mvns	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4013      	ands	r3, r2
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	429a      	cmp	r2, r3
 8003124:	d093      	beq.n	800304e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800313e:	e071      	b.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314e:	d123      	bne.n	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003168:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e067      	b.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d041      	beq.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a0:	f7ff f946 	bl	8002430 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d302      	bcc.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d136      	bne.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10c      	bne.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bf14      	ite	ne
 80031d2:	2301      	movne	r3, #1
 80031d4:	2300      	moveq	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	e00b      	b.n	80031f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	43da      	mvns	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4013      	ands	r3, r2
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d016      	beq.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e021      	b.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10c      	bne.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	43da      	mvns	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e00b      	b.n	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4013      	ands	r3, r2
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	f47f af6d 	bne.w	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800327c:	e034      	b.n	80032e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f886 	bl	8003390 <I2C_IsAcknowledgeFailed>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e034      	b.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d028      	beq.n	80032e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7ff f8cb 	bl	8002430 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11d      	bne.n	80032e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d016      	beq.n	80032e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e007      	b.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b80      	cmp	r3, #128	; 0x80
 80032f4:	d1c3      	bne.n	800327e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800330c:	e034      	b.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f83e 	bl	8003390 <I2C_IsAcknowledgeFailed>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e034      	b.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d028      	beq.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003326:	f7ff f883 	bl	8002430 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	429a      	cmp	r2, r3
 8003334:	d302      	bcc.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11d      	bne.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d016      	beq.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f043 0220 	orr.w	r2, r3, #32
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e007      	b.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b04      	cmp	r3, #4
 8003384:	d1c3      	bne.n	800330e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a6:	d11b      	bne.n	80033e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f043 0204 	orr.w	r2, r3, #4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e267      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d075      	beq.n	80034fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800340e:	4b88      	ldr	r3, [pc, #544]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b04      	cmp	r3, #4
 8003418:	d00c      	beq.n	8003434 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341a:	4b85      	ldr	r3, [pc, #532]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003422:	2b08      	cmp	r3, #8
 8003424:	d112      	bne.n	800344c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003426:	4b82      	ldr	r3, [pc, #520]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003432:	d10b      	bne.n	800344c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	4b7e      	ldr	r3, [pc, #504]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d05b      	beq.n	80034f8 <HAL_RCC_OscConfig+0x108>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d157      	bne.n	80034f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e242      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003454:	d106      	bne.n	8003464 <HAL_RCC_OscConfig+0x74>
 8003456:	4b76      	ldr	r3, [pc, #472]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a75      	ldr	r2, [pc, #468]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e01d      	b.n	80034a0 <HAL_RCC_OscConfig+0xb0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x98>
 800346e:	4b70      	ldr	r3, [pc, #448]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6f      	ldr	r2, [pc, #444]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b6d      	ldr	r3, [pc, #436]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a6c      	ldr	r2, [pc, #432]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e00b      	b.n	80034a0 <HAL_RCC_OscConfig+0xb0>
 8003488:	4b69      	ldr	r3, [pc, #420]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a68      	ldr	r2, [pc, #416]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800348e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b66      	ldr	r3, [pc, #408]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a65      	ldr	r2, [pc, #404]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800349a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7fe ffc2 	bl	8002430 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b0:	f7fe ffbe 	bl	8002430 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e207      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b5b      	ldr	r3, [pc, #364]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0xc0>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fe ffae 	bl	8002430 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fe ffaa 	bl	8002430 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e1f3      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	4b51      	ldr	r3, [pc, #324]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0xe8>
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d063      	beq.n	80035ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003506:	4b4a      	ldr	r3, [pc, #296]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351a:	2b08      	cmp	r3, #8
 800351c:	d11c      	bne.n	8003558 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351e:	4b44      	ldr	r3, [pc, #272]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d116      	bne.n	8003558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_RCC_OscConfig+0x152>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e1c7      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003542:	4b3b      	ldr	r3, [pc, #236]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4937      	ldr	r1, [pc, #220]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003556:	e03a      	b.n	80035ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003560:	4b34      	ldr	r3, [pc, #208]	; (8003634 <HAL_RCC_OscConfig+0x244>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003566:	f7fe ff63 	bl	8002430 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356e:	f7fe ff5f 	bl	8002430 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e1a8      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003580:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358c:	4b28      	ldr	r3, [pc, #160]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4925      	ldr	r1, [pc, #148]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800359c:	4313      	orrs	r3, r2
 800359e:	600b      	str	r3, [r1, #0]
 80035a0:	e015      	b.n	80035ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_RCC_OscConfig+0x244>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe ff42 	bl	8002430 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b0:	f7fe ff3e 	bl	8002430 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e187      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d036      	beq.n	8003648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e2:	4b15      	ldr	r3, [pc, #84]	; (8003638 <HAL_RCC_OscConfig+0x248>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe ff22 	bl	8002430 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f0:	f7fe ff1e 	bl	8002430 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e167      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x200>
 800360e:	e01b      	b.n	8003648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RCC_OscConfig+0x248>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003616:	f7fe ff0b 	bl	8002430 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	e00e      	b.n	800363c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800361e:	f7fe ff07 	bl	8002430 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d907      	bls.n	800363c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e150      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
 8003630:	40023800 	.word	0x40023800
 8003634:	42470000 	.word	0x42470000
 8003638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363c:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800363e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ea      	bne.n	800361e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8097 	beq.w	8003784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365a:	4b81      	ldr	r3, [pc, #516]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	4b7d      	ldr	r3, [pc, #500]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a7c      	ldr	r2, [pc, #496]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b7a      	ldr	r3, [pc, #488]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b77      	ldr	r3, [pc, #476]	; (8003864 <HAL_RCC_OscConfig+0x474>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d118      	bne.n	80036c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003692:	4b74      	ldr	r3, [pc, #464]	; (8003864 <HAL_RCC_OscConfig+0x474>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a73      	ldr	r2, [pc, #460]	; (8003864 <HAL_RCC_OscConfig+0x474>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369e:	f7fe fec7 	bl	8002430 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a6:	f7fe fec3 	bl	8002430 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e10c      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	4b6a      	ldr	r3, [pc, #424]	; (8003864 <HAL_RCC_OscConfig+0x474>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d106      	bne.n	80036da <HAL_RCC_OscConfig+0x2ea>
 80036cc:	4b64      	ldr	r3, [pc, #400]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a63      	ldr	r2, [pc, #396]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
 80036d8:	e01c      	b.n	8003714 <HAL_RCC_OscConfig+0x324>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b05      	cmp	r3, #5
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x30c>
 80036e2:	4b5f      	ldr	r3, [pc, #380]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a5e      	ldr	r2, [pc, #376]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	4b5c      	ldr	r3, [pc, #368]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	4a5b      	ldr	r2, [pc, #364]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	6713      	str	r3, [r2, #112]	; 0x70
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0x324>
 80036fc:	4b58      	ldr	r3, [pc, #352]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	4a57      	ldr	r2, [pc, #348]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	6713      	str	r3, [r2, #112]	; 0x70
 8003708:	4b55      	ldr	r3, [pc, #340]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4a54      	ldr	r2, [pc, #336]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800370e:	f023 0304 	bic.w	r3, r3, #4
 8003712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d015      	beq.n	8003748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe fe88 	bl	8002430 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fe fe84 	bl	8002430 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0cb      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	4b49      	ldr	r3, [pc, #292]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0ee      	beq.n	8003724 <HAL_RCC_OscConfig+0x334>
 8003746:	e014      	b.n	8003772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7fe fe72 	bl	8002430 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374e:	e00a      	b.n	8003766 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003750:	f7fe fe6e 	bl	8002430 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0b5      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003766:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1ee      	bne.n	8003750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d105      	bne.n	8003784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	4a38      	ldr	r2, [pc, #224]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800377e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80a1 	beq.w	80038d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800378e:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b08      	cmp	r3, #8
 8003798:	d05c      	beq.n	8003854 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d141      	bne.n	8003826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <HAL_RCC_OscConfig+0x478>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe fe42 	bl	8002430 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe fe3e 	bl	8002430 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e087      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	019b      	lsls	r3, r3, #6
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	3b01      	subs	r3, #1
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	061b      	lsls	r3, r3, #24
 80037f2:	491b      	ldr	r1, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_RCC_OscConfig+0x478>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fe:	f7fe fe17 	bl	8002430 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003806:	f7fe fe13 	bl	8002430 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e05c      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x416>
 8003824:	e054      	b.n	80038d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <HAL_RCC_OscConfig+0x478>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe fe00 	bl	8002430 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003834:	f7fe fdfc 	bl	8002430 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e045      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x444>
 8003852:	e03d      	b.n	80038d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e038      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
 8003860:	40023800 	.word	0x40023800
 8003864:	40007000 	.word	0x40007000
 8003868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <HAL_RCC_OscConfig+0x4ec>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d028      	beq.n	80038cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d121      	bne.n	80038cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d11a      	bne.n	80038cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800389c:	4013      	ands	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d111      	bne.n	80038cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	085b      	lsrs	r3, r3, #1
 80038b4:	3b01      	subs	r3, #1
 80038b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d107      	bne.n	80038cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800

080038e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0cc      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f4:	4b68      	ldr	r3, [pc, #416]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d90c      	bls.n	800391c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b65      	ldr	r3, [pc, #404]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003934:	4b59      	ldr	r3, [pc, #356]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800393e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800394c:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a52      	ldr	r2, [pc, #328]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003958:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	494d      	ldr	r1, [pc, #308]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d044      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d119      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e07f      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d003      	beq.n	800399e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399a:	2b03      	cmp	r3, #3
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	4b3f      	ldr	r3, [pc, #252]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e06f      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ae:	4b3b      	ldr	r3, [pc, #236]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e067      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039be:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4934      	ldr	r1, [pc, #208]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d0:	f7fe fd2e 	bl	8002430 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d8:	f7fe fd2a 	bl	8002430 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e04f      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	4b2b      	ldr	r3, [pc, #172]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 020c 	and.w	r2, r3, #12
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d1eb      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a00:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d20c      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e032      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4916      	ldr	r1, [pc, #88]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	490e      	ldr	r1, [pc, #56]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a66:	f000 f821 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	490a      	ldr	r1, [pc, #40]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	5ccb      	ldrb	r3, [r1, r3]
 8003a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe f894 	bl	8001bb4 <HAL_InitTick>

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40023c00 	.word	0x40023c00
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	08009658 	.word	0x08009658
 8003aa4:	20000014 	.word	0x20000014
 8003aa8:	20000018 	.word	0x20000018

08003aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab0:	b090      	sub	sp, #64	; 0x40
 8003ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab8:	2300      	movs	r3, #0
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003abc:	2300      	movs	r3, #0
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac4:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d00d      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x40>
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	f200 80a1 	bhi.w	8003c18 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ade:	e09b      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae0:	4b53      	ldr	r3, [pc, #332]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ae2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ae4:	e09b      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ae6:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ae8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aea:	e098      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aec:	4b4f      	ldr	r3, [pc, #316]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af6:	4b4d      	ldr	r3, [pc, #308]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d028      	beq.n	8003b54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b02:	4b4a      	ldr	r3, [pc, #296]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	2200      	movs	r2, #0
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b14:	2100      	movs	r1, #0
 8003b16:	4b47      	ldr	r3, [pc, #284]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b18:	fb03 f201 	mul.w	r2, r3, r1
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	fb00 f303 	mul.w	r3, r0, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	4a43      	ldr	r2, [pc, #268]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b26:	fba0 1202 	umull	r1, r2, r0, r2
 8003b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b2c:	460a      	mov	r2, r1
 8003b2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b32:	4413      	add	r3, r2
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b38:	2200      	movs	r2, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	61fa      	str	r2, [r7, #28]
 8003b3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b46:	f7fc ff91 	bl	8000a6c <__aeabi_uldivmod>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4613      	mov	r3, r2
 8003b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b52:	e053      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b54:	4b35      	ldr	r3, [pc, #212]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	617a      	str	r2, [r7, #20]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b66:	f04f 0b00 	mov.w	fp, #0
 8003b6a:	4652      	mov	r2, sl
 8003b6c:	465b      	mov	r3, fp
 8003b6e:	f04f 0000 	mov.w	r0, #0
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	0159      	lsls	r1, r3, #5
 8003b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7c:	0150      	lsls	r0, r2, #5
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	ebb2 080a 	subs.w	r8, r2, sl
 8003b86:	eb63 090b 	sbc.w	r9, r3, fp
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b9e:	ebb2 0408 	subs.w	r4, r2, r8
 8003ba2:	eb63 0509 	sbc.w	r5, r3, r9
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	00eb      	lsls	r3, r5, #3
 8003bb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb4:	00e2      	lsls	r2, r4, #3
 8003bb6:	4614      	mov	r4, r2
 8003bb8:	461d      	mov	r5, r3
 8003bba:	eb14 030a 	adds.w	r3, r4, sl
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	eb45 030b 	adc.w	r3, r5, fp
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	028b      	lsls	r3, r1, #10
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bdc:	4621      	mov	r1, r4
 8003bde:	028a      	lsls	r2, r1, #10
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be6:	2200      	movs	r2, #0
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	60fa      	str	r2, [r7, #12]
 8003bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bf0:	f7fc ff3c 	bl	8000a6c <__aeabi_uldivmod>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	3301      	adds	r3, #1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c16:	e002      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3740      	adds	r7, #64	; 0x40
 8003c24:	46bd      	mov	sp, r7
 8003c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	00f42400 	.word	0x00f42400
 8003c34:	017d7840 	.word	0x017d7840

08003c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000014 	.word	0x20000014

08003c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c54:	f7ff fff0 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	; (8003c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	08009668 	.word	0x08009668

08003c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c7c:	f7ff ffdc 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	0b5b      	lsrs	r3, r3, #13
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4903      	ldr	r1, [pc, #12]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	08009668 	.word	0x08009668

08003ca0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	220f      	movs	r2, #15
 8003cae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cb0:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0203 	and.w	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	08db      	lsrs	r3, r3, #3
 8003cda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_RCC_GetClockConfig+0x60>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0207 	and.w	r2, r3, #7
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40023c00 	.word	0x40023c00

08003d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e041      	b.n	8003d9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fe f940 	bl	8001fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f000 fe86 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d001      	beq.n	8003dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e044      	b.n	8003e46 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	; (8003e54 <HAL_TIM_Base_Start_IT+0xb0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d018      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x6c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de6:	d013      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x6c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <HAL_TIM_Base_Start_IT+0xb4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x6c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a19      	ldr	r2, [pc, #100]	; (8003e5c <HAL_TIM_Base_Start_IT+0xb8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x6c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x6c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a16      	ldr	r2, [pc, #88]	; (8003e64 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d111      	bne.n	8003e34 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d010      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e32:	e007      	b.n	8003e44 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40014000 	.word	0x40014000

08003e68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e041      	b.n	8003efe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f839 	bl	8003f06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f000 fdd4 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d109      	bne.n	8003f40 <HAL_TIM_PWM_Start+0x24>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e022      	b.n	8003f86 <HAL_TIM_PWM_Start+0x6a>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d109      	bne.n	8003f5a <HAL_TIM_PWM_Start+0x3e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	e015      	b.n	8003f86 <HAL_TIM_PWM_Start+0x6a>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d109      	bne.n	8003f74 <HAL_TIM_PWM_Start+0x58>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e008      	b.n	8003f86 <HAL_TIM_PWM_Start+0x6a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e068      	b.n	8004060 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <HAL_TIM_PWM_Start+0x82>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f9c:	e013      	b.n	8003fc6 <HAL_TIM_PWM_Start+0xaa>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d104      	bne.n	8003fae <HAL_TIM_PWM_Start+0x92>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fac:	e00b      	b.n	8003fc6 <HAL_TIM_PWM_Start+0xaa>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d104      	bne.n	8003fbe <HAL_TIM_PWM_Start+0xa2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fbc:	e003      	b.n	8003fc6 <HAL_TIM_PWM_Start+0xaa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	6839      	ldr	r1, [r7, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 f910 	bl	80051f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	; (8004068 <HAL_TIM_PWM_Start+0x14c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d107      	bne.n	8003fee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_TIM_PWM_Start+0x14c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d018      	beq.n	800402a <HAL_TIM_PWM_Start+0x10e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d013      	beq.n	800402a <HAL_TIM_PWM_Start+0x10e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a19      	ldr	r2, [pc, #100]	; (800406c <HAL_TIM_PWM_Start+0x150>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00e      	beq.n	800402a <HAL_TIM_PWM_Start+0x10e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <HAL_TIM_PWM_Start+0x154>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_TIM_PWM_Start+0x10e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a16      	ldr	r2, [pc, #88]	; (8004074 <HAL_TIM_PWM_Start+0x158>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_TIM_PWM_Start+0x10e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <HAL_TIM_PWM_Start+0x15c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d111      	bne.n	800404e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b06      	cmp	r3, #6
 800403a:	d010      	beq.n	800405e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404c:	e007      	b.n	800405e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40014000 	.word	0x40014000

0800407c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e041      	b.n	8004112 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f839 	bl	800411a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f000 fcca 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <HAL_TIM_IC_Start_IT+0x1e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e013      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x46>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b04      	cmp	r3, #4
 8004152:	d104      	bne.n	800415e <HAL_TIM_IC_Start_IT+0x2e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e00b      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x46>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d104      	bne.n	800416e <HAL_TIM_IC_Start_IT+0x3e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416a:	b2db      	uxtb	r3, r3
 800416c:	e003      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x46>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <HAL_TIM_IC_Start_IT+0x58>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e013      	b.n	80041b0 <HAL_TIM_IC_Start_IT+0x80>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b04      	cmp	r3, #4
 800418c:	d104      	bne.n	8004198 <HAL_TIM_IC_Start_IT+0x68>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e00b      	b.n	80041b0 <HAL_TIM_IC_Start_IT+0x80>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b08      	cmp	r3, #8
 800419c:	d104      	bne.n	80041a8 <HAL_TIM_IC_Start_IT+0x78>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e003      	b.n	80041b0 <HAL_TIM_IC_Start_IT+0x80>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80041b2:	7bbb      	ldrb	r3, [r7, #14]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d102      	bne.n	80041be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80041b8:	7b7b      	ldrb	r3, [r7, #13]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d001      	beq.n	80041c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e0c2      	b.n	8004348 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_IC_Start_IT+0xa2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d0:	e013      	b.n	80041fa <HAL_TIM_IC_Start_IT+0xca>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_IC_Start_IT+0xb2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e0:	e00b      	b.n	80041fa <HAL_TIM_IC_Start_IT+0xca>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_IC_Start_IT+0xc2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f0:	e003      	b.n	80041fa <HAL_TIM_IC_Start_IT+0xca>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <HAL_TIM_IC_Start_IT+0xda>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004208:	e013      	b.n	8004232 <HAL_TIM_IC_Start_IT+0x102>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b04      	cmp	r3, #4
 800420e:	d104      	bne.n	800421a <HAL_TIM_IC_Start_IT+0xea>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004218:	e00b      	b.n	8004232 <HAL_TIM_IC_Start_IT+0x102>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d104      	bne.n	800422a <HAL_TIM_IC_Start_IT+0xfa>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004228:	e003      	b.n	8004232 <HAL_TIM_IC_Start_IT+0x102>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2202      	movs	r2, #2
 800422e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b0c      	cmp	r3, #12
 8004236:	d841      	bhi.n	80042bc <HAL_TIM_IC_Start_IT+0x18c>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <HAL_TIM_IC_Start_IT+0x110>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004275 	.word	0x08004275
 8004244:	080042bd 	.word	0x080042bd
 8004248:	080042bd 	.word	0x080042bd
 800424c:	080042bd 	.word	0x080042bd
 8004250:	08004287 	.word	0x08004287
 8004254:	080042bd 	.word	0x080042bd
 8004258:	080042bd 	.word	0x080042bd
 800425c:	080042bd 	.word	0x080042bd
 8004260:	08004299 	.word	0x08004299
 8004264:	080042bd 	.word	0x080042bd
 8004268:	080042bd 	.word	0x080042bd
 800426c:	080042bd 	.word	0x080042bd
 8004270:	080042ab 	.word	0x080042ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0202 	orr.w	r2, r2, #2
 8004282:	60da      	str	r2, [r3, #12]
      break;
 8004284:	e01d      	b.n	80042c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0204 	orr.w	r2, r2, #4
 8004294:	60da      	str	r2, [r3, #12]
      break;
 8004296:	e014      	b.n	80042c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0208 	orr.w	r2, r2, #8
 80042a6:	60da      	str	r2, [r3, #12]
      break;
 80042a8:	e00b      	b.n	80042c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0210 	orr.w	r2, r2, #16
 80042b8:	60da      	str	r2, [r3, #12]
      break;
 80042ba:	e002      	b.n	80042c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
      break;
 80042c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d13e      	bne.n	8004346 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2201      	movs	r2, #1
 80042ce:	6839      	ldr	r1, [r7, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 ff8f 	bl	80051f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <HAL_TIM_IC_Start_IT+0x220>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d018      	beq.n	8004312 <HAL_TIM_IC_Start_IT+0x1e2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e8:	d013      	beq.n	8004312 <HAL_TIM_IC_Start_IT+0x1e2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a19      	ldr	r2, [pc, #100]	; (8004354 <HAL_TIM_IC_Start_IT+0x224>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00e      	beq.n	8004312 <HAL_TIM_IC_Start_IT+0x1e2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a17      	ldr	r2, [pc, #92]	; (8004358 <HAL_TIM_IC_Start_IT+0x228>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d009      	beq.n	8004312 <HAL_TIM_IC_Start_IT+0x1e2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a16      	ldr	r2, [pc, #88]	; (800435c <HAL_TIM_IC_Start_IT+0x22c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_TIM_IC_Start_IT+0x1e2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a14      	ldr	r2, [pc, #80]	; (8004360 <HAL_TIM_IC_Start_IT+0x230>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d111      	bne.n	8004336 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b06      	cmp	r3, #6
 8004322:	d010      	beq.n	8004346 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004334:	e007      	b.n	8004346 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0201 	orr.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40010000 	.word	0x40010000
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40014000 	.word	0x40014000

08004364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0202 	mvn.w	r2, #2
 8004398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fdc6 	bl	8000f40 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fb2e 	bl	8004a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fb35 	bl	8004a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0204 	mvn.w	r2, #4
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc fda0 	bl	8000f40 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fb08 	bl	8004a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fb0f 	bl	8004a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0208 	mvn.w	r2, #8
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc fd7a 	bl	8000f40 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fae2 	bl	8004a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fae9 	bl	8004a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b00      	cmp	r3, #0
 8004468:	d020      	beq.n	80044ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0210 	mvn.w	r2, #16
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2208      	movs	r2, #8
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc fd54 	bl	8000f40 <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fabc 	bl	8004a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fac3 	bl	8004a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0201 	mvn.w	r2, #1
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fd fb2e 	bl	8001b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00c      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 ff1e 	bl	8005330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa94 	bl	8004a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0220 	mvn.w	r2, #32
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fef0 	bl	800531c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_TIM_IC_ConfigChannel+0x1e>
 800455e:	2302      	movs	r3, #2
 8004560:	e088      	b.n	8004674 <HAL_TIM_IC_ConfigChannel+0x130>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11b      	bne.n	80045a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004580:	f000 fc80 	bl	8004e84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 020c 	bic.w	r2, r2, #12
 8004592:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6999      	ldr	r1, [r3, #24]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	619a      	str	r2, [r3, #24]
 80045a6:	e060      	b.n	800466a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d11c      	bne.n	80045e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80045be:	f000 fcf8 	bl	8004fb2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6999      	ldr	r1, [r3, #24]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	021a      	lsls	r2, r3, #8
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	619a      	str	r2, [r3, #24]
 80045e6:	e040      	b.n	800466a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d11b      	bne.n	8004626 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80045fe:	f000 fd45 	bl	800508c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 020c 	bic.w	r2, r2, #12
 8004610:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69d9      	ldr	r1, [r3, #28]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	61da      	str	r2, [r3, #28]
 8004624:	e021      	b.n	800466a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d11c      	bne.n	8004666 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800463c:	f000 fd62 	bl	8005104 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800464e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69d9      	ldr	r1, [r3, #28]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	021a      	lsls	r2, r3, #8
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	61da      	str	r2, [r3, #28]
 8004664:	e001      	b.n	800466a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004696:	2302      	movs	r3, #2
 8004698:	e0ae      	b.n	80047f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	f200 809f 	bhi.w	80047e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	080047e9 	.word	0x080047e9
 80046b8:	080047e9 	.word	0x080047e9
 80046bc:	080047e9 	.word	0x080047e9
 80046c0:	08004725 	.word	0x08004725
 80046c4:	080047e9 	.word	0x080047e9
 80046c8:	080047e9 	.word	0x080047e9
 80046cc:	080047e9 	.word	0x080047e9
 80046d0:	08004767 	.word	0x08004767
 80046d4:	080047e9 	.word	0x080047e9
 80046d8:	080047e9 	.word	0x080047e9
 80046dc:	080047e9 	.word	0x080047e9
 80046e0:	080047a7 	.word	0x080047a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fa3e 	bl	8004b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0208 	orr.w	r2, r2, #8
 80046fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0204 	bic.w	r2, r2, #4
 800470e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6999      	ldr	r1, [r3, #24]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	619a      	str	r2, [r3, #24]
      break;
 8004722:	e064      	b.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fa84 	bl	8004c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800473e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6999      	ldr	r1, [r3, #24]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	021a      	lsls	r2, r3, #8
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	619a      	str	r2, [r3, #24]
      break;
 8004764:	e043      	b.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 facf 	bl	8004d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0208 	orr.w	r2, r2, #8
 8004780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0204 	bic.w	r2, r2, #4
 8004790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69d9      	ldr	r1, [r3, #28]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	61da      	str	r2, [r3, #28]
      break;
 80047a4:	e023      	b.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fb19 	bl	8004de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69d9      	ldr	r1, [r3, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	021a      	lsls	r2, r3, #8
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	61da      	str	r2, [r3, #28]
      break;
 80047e6:	e002      	b.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]
      break;
 80047ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIM_ConfigClockSource+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e0b4      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x186>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800483a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004854:	d03e      	beq.n	80048d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485a:	f200 8087 	bhi.w	800496c <HAL_TIM_ConfigClockSource+0x16c>
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004862:	f000 8086 	beq.w	8004972 <HAL_TIM_ConfigClockSource+0x172>
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486a:	d87f      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b70      	cmp	r3, #112	; 0x70
 800486e:	d01a      	beq.n	80048a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004870:	2b70      	cmp	r3, #112	; 0x70
 8004872:	d87b      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b60      	cmp	r3, #96	; 0x60
 8004876:	d050      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x11a>
 8004878:	2b60      	cmp	r3, #96	; 0x60
 800487a:	d877      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b50      	cmp	r3, #80	; 0x50
 800487e:	d03c      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0xfa>
 8004880:	2b50      	cmp	r3, #80	; 0x50
 8004882:	d873      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d058      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x13a>
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d86f      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b30      	cmp	r3, #48	; 0x30
 800488e:	d064      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15a>
 8004890:	2b30      	cmp	r3, #48	; 0x30
 8004892:	d86b      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b20      	cmp	r3, #32
 8004896:	d060      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15a>
 8004898:	2b20      	cmp	r3, #32
 800489a:	d867      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d05c      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15a>
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d05a      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15a>
 80048a4:	e062      	b.n	800496c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048b6:	f000 fc7d 	bl	80051b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	609a      	str	r2, [r3, #8]
      break;
 80048d2:	e04f      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048e4:	f000 fc66 	bl	80051b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048f6:	609a      	str	r2, [r3, #8]
      break;
 80048f8:	e03c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004906:	461a      	mov	r2, r3
 8004908:	f000 fb24 	bl	8004f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2150      	movs	r1, #80	; 0x50
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fc33 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004918:	e02c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004926:	461a      	mov	r2, r3
 8004928:	f000 fb80 	bl	800502c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2160      	movs	r1, #96	; 0x60
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fc23 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004938:	e01c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004946:	461a      	mov	r2, r3
 8004948:	f000 fb04 	bl	8004f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2140      	movs	r1, #64	; 0x40
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fc13 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004958:	e00c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f000 fc0a 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 800496a:	e003      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      break;
 8004970:	e000      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b0c      	cmp	r3, #12
 80049a2:	d831      	bhi.n	8004a08 <HAL_TIM_ReadCapturedValue+0x78>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049e1 	.word	0x080049e1
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004a09 	.word	0x08004a09
 80049bc:	080049eb 	.word	0x080049eb
 80049c0:	08004a09 	.word	0x08004a09
 80049c4:	08004a09 	.word	0x08004a09
 80049c8:	08004a09 	.word	0x08004a09
 80049cc:	080049f5 	.word	0x080049f5
 80049d0:	08004a09 	.word	0x08004a09
 80049d4:	08004a09 	.word	0x08004a09
 80049d8:	08004a09 	.word	0x08004a09
 80049dc:	080049ff 	.word	0x080049ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	60fb      	str	r3, [r7, #12]

      break;
 80049e8:	e00f      	b.n	8004a0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	60fb      	str	r3, [r7, #12]

      break;
 80049f2:	e00a      	b.n	8004a0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	60fb      	str	r3, [r7, #12]

      break;
 80049fc:	e005      	b.n	8004a0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	60fb      	str	r3, [r7, #12]

      break;
 8004a06:	e000      	b.n	8004a0a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004a08:	bf00      	nop
  }

  return tmpreg;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a3a      	ldr	r2, [pc, #232]	; (8004b50 <TIM_Base_SetConfig+0xfc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00f      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a72:	d00b      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a37      	ldr	r2, [pc, #220]	; (8004b54 <TIM_Base_SetConfig+0x100>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a36      	ldr	r2, [pc, #216]	; (8004b58 <TIM_Base_SetConfig+0x104>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a35      	ldr	r2, [pc, #212]	; (8004b5c <TIM_Base_SetConfig+0x108>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d108      	bne.n	8004a9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a2b      	ldr	r2, [pc, #172]	; (8004b50 <TIM_Base_SetConfig+0xfc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01b      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aac:	d017      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a28      	ldr	r2, [pc, #160]	; (8004b54 <TIM_Base_SetConfig+0x100>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <TIM_Base_SetConfig+0x104>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00f      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <TIM_Base_SetConfig+0x108>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00b      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a25      	ldr	r2, [pc, #148]	; (8004b60 <TIM_Base_SetConfig+0x10c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d007      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <TIM_Base_SetConfig+0x110>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a23      	ldr	r2, [pc, #140]	; (8004b68 <TIM_Base_SetConfig+0x114>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d108      	bne.n	8004af0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a0e      	ldr	r2, [pc, #56]	; (8004b50 <TIM_Base_SetConfig+0xfc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d103      	bne.n	8004b24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d105      	bne.n	8004b42 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	611a      	str	r2, [r3, #16]
  }
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800

08004b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f023 0201 	bic.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 0302 	bic.w	r3, r3, #2
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <TIM_OC1_SetConfig+0xc8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10c      	bne.n	8004be2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0308 	bic.w	r3, r3, #8
 8004bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f023 0304 	bic.w	r3, r3, #4
 8004be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <TIM_OC1_SetConfig+0xc8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d111      	bne.n	8004c0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	621a      	str	r2, [r3, #32]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40010000 	.word	0x40010000

08004c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f023 0210 	bic.w	r2, r3, #16
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0320 	bic.w	r3, r3, #32
 8004c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <TIM_OC2_SetConfig+0xd4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10d      	bne.n	8004cb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <TIM_OC2_SetConfig+0xd4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d113      	bne.n	8004ce4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000

08004d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <TIM_OC3_SetConfig+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10d      	bne.n	8004d8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a14      	ldr	r2, [pc, #80]	; (8004de0 <TIM_OC3_SetConfig+0xd0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d113      	bne.n	8004dba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40010000 	.word	0x40010000

08004de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a10      	ldr	r2, [pc, #64]	; (8004e80 <TIM_OC4_SetConfig+0x9c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d109      	bne.n	8004e58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	019b      	lsls	r3, r3, #6
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	621a      	str	r2, [r3, #32]
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000

08004e84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f023 0201 	bic.w	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a24      	ldr	r2, [pc, #144]	; (8004f40 <TIM_TI1_SetConfig+0xbc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <TIM_TI1_SetConfig+0x56>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb8:	d00f      	beq.n	8004eda <TIM_TI1_SetConfig+0x56>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a21      	ldr	r2, [pc, #132]	; (8004f44 <TIM_TI1_SetConfig+0xc0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00b      	beq.n	8004eda <TIM_TI1_SetConfig+0x56>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4a20      	ldr	r2, [pc, #128]	; (8004f48 <TIM_TI1_SetConfig+0xc4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <TIM_TI1_SetConfig+0x56>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <TIM_TI1_SetConfig+0xc8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_TI1_SetConfig+0x56>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <TIM_TI1_SetConfig+0xcc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d101      	bne.n	8004ede <TIM_TI1_SetConfig+0x5a>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <TIM_TI1_SetConfig+0x5c>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e003      	b.n	8004efe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f023 030a 	bic.w	r3, r3, #10
 8004f18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f003 030a 	and.w	r3, r3, #10
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40014000 	.word	0x40014000

08004f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0201 	bic.w	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 030a 	bic.w	r3, r3, #10
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b087      	sub	sp, #28
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0210 	bic.w	r2, r3, #16
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	031b      	lsls	r3, r3, #12
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005004:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	621a      	str	r2, [r3, #32]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f023 0210 	bic.w	r2, r3, #16
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	031b      	lsls	r3, r3, #12
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005068:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	621a      	str	r2, [r3, #32]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f023 0303 	bic.w	r3, r3, #3
 80050b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	621a      	str	r2, [r3, #32]
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005142:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	031b      	lsls	r3, r3, #12
 8005148:	b29b      	uxth	r3, r3
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005156:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	031b      	lsls	r3, r3, #12
 800515c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	f043 0307 	orr.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	2201      	movs	r2, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1a      	ldr	r2, [r3, #32]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	43db      	mvns	r3, r3
 8005216:	401a      	ands	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	fa01 f303 	lsl.w	r3, r1, r3
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005254:	2302      	movs	r3, #2
 8005256:	e050      	b.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a4:	d013      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a18      	ldr	r2, [pc, #96]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a16      	ldr	r2, [pc, #88]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a15      	ldr	r2, [pc, #84]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a13      	ldr	r2, [pc, #76]	; (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10c      	bne.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40010000 	.word	0x40010000
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40014000 	.word	0x40014000

0800531c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e042      	b.n	80053dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fc ff52 	bl	8002214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2224      	movs	r2, #36	; 0x24
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fd11 	bl	8005db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800539c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d121      	bne.n	8005442 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_UART_Transmit_IT+0x26>
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e01a      	b.n	8005444 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	88fa      	ldrh	r2, [r7, #6]
 8005418:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	88fa      	ldrh	r2, [r7, #6]
 800541e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2221      	movs	r2, #33	; 0x21
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800543c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	e000      	b.n	8005444 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b20      	cmp	r3, #32
 8005468:	d112      	bne.n	8005490 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <HAL_UART_Receive_IT+0x26>
 8005470:	88fb      	ldrh	r3, [r7, #6]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e00b      	b.n	8005492 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	461a      	mov	r2, r3
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 faba 	bl	8005a00 <UART_Start_Receive_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	e000      	b.n	8005492 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
  }
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b0ba      	sub	sp, #232	; 0xe8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80054da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <HAL_UART_IRQHandler+0x66>
 80054ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fb99 	bl	8005c32 <UART_Receive_IT>
      return;
 8005500:	e25b      	b.n	80059ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80de 	beq.w	80056c8 <HAL_UART_IRQHandler+0x22c>
 800550c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80d1 	beq.w	80056c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <HAL_UART_IRQHandler+0xae>
 8005532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <HAL_UART_IRQHandler+0xd2>
 8005556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	f043 0202 	orr.w	r2, r3, #2
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_UART_IRQHandler+0xf6>
 800557a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d011      	beq.n	80055c2 <HAL_UART_IRQHandler+0x126>
 800559e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d105      	bne.n	80055b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	f043 0208 	orr.w	r2, r3, #8
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 81f2 	beq.w	80059b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_UART_IRQHandler+0x14e>
 80055d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb24 	bl	8005c32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	bf0c      	ite	eq
 80055f8:	2301      	moveq	r3, #1
 80055fa:	2300      	movne	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <HAL_UART_IRQHandler+0x17a>
 800560e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d04f      	beq.n	80056b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fa2c 	bl	8005a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d141      	bne.n	80056ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3314      	adds	r3, #20
 8005630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3314      	adds	r3, #20
 8005652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005656:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800565a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800566e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1d9      	bne.n	800562a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d013      	beq.n	80056a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	4a7e      	ldr	r2, [pc, #504]	; (800587c <HAL_UART_IRQHandler+0x3e0>)
 8005684:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568a:	4618      	mov	r0, r3
 800568c:	f7fd f852 	bl	8002734 <HAL_DMA_Abort_IT>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d016      	beq.n	80056c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056a0:	4610      	mov	r0, r2
 80056a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	e00e      	b.n	80056c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f994 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ac:	e00a      	b.n	80056c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f990 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b4:	e006      	b.n	80056c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f98c 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80056c2:	e175      	b.n	80059b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c4:	bf00      	nop
    return;
 80056c6:	e173      	b.n	80059b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	f040 814f 	bne.w	8005970 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d6:	f003 0310 	and.w	r3, r3, #16
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8148 	beq.w	8005970 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8141 	beq.w	8005970 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b40      	cmp	r3, #64	; 0x40
 8005710:	f040 80b6 	bne.w	8005880 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005720:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8145 	beq.w	80059b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800572e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005732:	429a      	cmp	r2, r3
 8005734:	f080 813e 	bcs.w	80059b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800573e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574a:	f000 8088 	beq.w	800585e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800576c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	330c      	adds	r3, #12
 8005776:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800577a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800577e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1d9      	bne.n	800574e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3314      	adds	r3, #20
 80057a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3314      	adds	r3, #20
 80057ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e1      	bne.n	800579a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005800:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e3      	bne.n	80057d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800582c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800582e:	f023 0310 	bic.w	r3, r3, #16
 8005832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005840:	65ba      	str	r2, [r7, #88]	; 0x58
 8005842:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005846:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800584e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e3      	bne.n	800581c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005858:	4618      	mov	r0, r3
 800585a:	f7fc fefb 	bl	8002654 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800586c:	b29b      	uxth	r3, r3
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	b29b      	uxth	r3, r3
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8b7 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800587a:	e09b      	b.n	80059b4 <HAL_UART_IRQHandler+0x518>
 800587c:	08005b3b 	.word	0x08005b3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005888:	b29b      	uxth	r3, r3
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 808e 	beq.w	80059b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800589c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8089 	beq.w	80059b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80058ca:	647a      	str	r2, [r7, #68]	; 0x44
 80058cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e3      	bne.n	80058a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3314      	adds	r3, #20
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	623b      	str	r3, [r7, #32]
   return(result);
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3314      	adds	r3, #20
 80058fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005902:	633a      	str	r2, [r7, #48]	; 0x30
 8005904:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e3      	bne.n	80058de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	60fb      	str	r3, [r7, #12]
   return(result);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0310 	bic.w	r3, r3, #16
 800593a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	330c      	adds	r3, #12
 8005944:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005948:	61fa      	str	r2, [r7, #28]
 800594a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	69b9      	ldr	r1, [r7, #24]
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	617b      	str	r3, [r7, #20]
   return(result);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e3      	bne.n	8005924 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f83d 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800596e:	e023      	b.n	80059b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b00      	cmp	r3, #0
 800597a:	d009      	beq.n	8005990 <HAL_UART_IRQHandler+0x4f4>
 800597c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f8ea 	bl	8005b62 <UART_Transmit_IT>
    return;
 800598e:	e014      	b.n	80059ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00e      	beq.n	80059ba <HAL_UART_IRQHandler+0x51e>
 800599c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f92a 	bl	8005c02 <UART_EndTransmit_IT>
    return;
 80059ae:	e004      	b.n	80059ba <HAL_UART_IRQHandler+0x51e>
    return;
 80059b0:	bf00      	nop
 80059b2:	e002      	b.n	80059ba <HAL_UART_IRQHandler+0x51e>
      return;
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <HAL_UART_IRQHandler+0x51e>
      return;
 80059b8:	bf00      	nop
  }
}
 80059ba:	37e8      	adds	r7, #232	; 0xe8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	88fa      	ldrh	r2, [r7, #6]
 8005a18:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	88fa      	ldrh	r2, [r7, #6]
 8005a1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2222      	movs	r2, #34	; 0x22
 8005a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a44:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0201 	orr.w	r2, r2, #1
 8005a54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0220 	orr.w	r2, r2, #32
 8005a64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b095      	sub	sp, #84	; 0x54
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e5      	bne.n	8005a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e5      	bne.n	8005ab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d119      	bne.n	8005b20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f023 0310 	bic.w	r3, r3, #16
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b0c:	61ba      	str	r2, [r7, #24]
 8005b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b2e:	bf00      	nop
 8005b30:	3754      	adds	r7, #84	; 0x54
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7ff ff3d 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b21      	cmp	r3, #33	; 0x21
 8005b74:	d13e      	bne.n	8005bf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7e:	d114      	bne.n	8005baa <UART_Transmit_IT+0x48>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d110      	bne.n	8005baa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	621a      	str	r2, [r3, #32]
 8005ba8:	e008      	b.n	8005bbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	1c59      	adds	r1, r3, #1
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6211      	str	r1, [r2, #32]
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10f      	bne.n	8005bf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e000      	b.n	8005bf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
  }
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fecc 	bl	80059c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b08c      	sub	sp, #48	; 0x30
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b22      	cmp	r3, #34	; 0x22
 8005c44:	f040 80ae 	bne.w	8005da4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c50:	d117      	bne.n	8005c82 <UART_Receive_IT+0x50>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d113      	bne.n	8005c82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	1c9a      	adds	r2, r3, #2
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c80:	e026      	b.n	8005cd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c94:	d007      	beq.n	8005ca6 <UART_Receive_IT+0x74>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <UART_Receive_IT+0x82>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	e008      	b.n	8005cc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d15d      	bne.n	8005da0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0220 	bic.w	r2, r2, #32
 8005cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d135      	bne.n	8005d96 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f023 0310 	bic.w	r3, r3, #16
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d50:	623a      	str	r2, [r7, #32]
 8005d52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	69f9      	ldr	r1, [r7, #28]
 8005d56:	6a3a      	ldr	r2, [r7, #32]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b10      	cmp	r3, #16
 8005d70:	d10a      	bne.n	8005d88 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fe2a 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
 8005d94:	e002      	b.n	8005d9c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fb fa42 	bl	8001220 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e002      	b.n	8005da6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e000      	b.n	8005da6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3730      	adds	r7, #48	; 0x30
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db4:	b0c0      	sub	sp, #256	; 0x100
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	68d9      	ldr	r1, [r3, #12]
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	ea40 0301 	orr.w	r3, r0, r1
 8005dd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e08:	f021 010c 	bic.w	r1, r1, #12
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e16:	430b      	orrs	r3, r1
 8005e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2a:	6999      	ldr	r1, [r3, #24]
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	ea40 0301 	orr.w	r3, r0, r1
 8005e36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b8f      	ldr	r3, [pc, #572]	; (800607c <UART_SetConfig+0x2cc>)
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d005      	beq.n	8005e50 <UART_SetConfig+0xa0>
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b8d      	ldr	r3, [pc, #564]	; (8006080 <UART_SetConfig+0x2d0>)
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d104      	bne.n	8005e5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e50:	f7fd ff12 	bl	8003c78 <HAL_RCC_GetPCLK2Freq>
 8005e54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e58:	e003      	b.n	8005e62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e5a:	f7fd fef9 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 8005e5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6c:	f040 810c 	bne.w	8006088 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e82:	4622      	mov	r2, r4
 8005e84:	462b      	mov	r3, r5
 8005e86:	1891      	adds	r1, r2, r2
 8005e88:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e8a:	415b      	adcs	r3, r3
 8005e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e92:	4621      	mov	r1, r4
 8005e94:	eb12 0801 	adds.w	r8, r2, r1
 8005e98:	4629      	mov	r1, r5
 8005e9a:	eb43 0901 	adc.w	r9, r3, r1
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eb2:	4690      	mov	r8, r2
 8005eb4:	4699      	mov	r9, r3
 8005eb6:	4623      	mov	r3, r4
 8005eb8:	eb18 0303 	adds.w	r3, r8, r3
 8005ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	eb49 0303 	adc.w	r3, r9, r3
 8005ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ed6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005eda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ede:	460b      	mov	r3, r1
 8005ee0:	18db      	adds	r3, r3, r3
 8005ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	eb42 0303 	adc.w	r3, r2, r3
 8005eea:	657b      	str	r3, [r7, #84]	; 0x54
 8005eec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ef0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ef4:	f7fa fdba 	bl	8000a6c <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4b61      	ldr	r3, [pc, #388]	; (8006084 <UART_SetConfig+0x2d4>)
 8005efe:	fba3 2302 	umull	r2, r3, r3, r2
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	011c      	lsls	r4, r3, #4
 8005f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f18:	4642      	mov	r2, r8
 8005f1a:	464b      	mov	r3, r9
 8005f1c:	1891      	adds	r1, r2, r2
 8005f1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f20:	415b      	adcs	r3, r3
 8005f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f28:	4641      	mov	r1, r8
 8005f2a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f2e:	4649      	mov	r1, r9
 8005f30:	eb43 0b01 	adc.w	fp, r3, r1
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f48:	4692      	mov	sl, r2
 8005f4a:	469b      	mov	fp, r3
 8005f4c:	4643      	mov	r3, r8
 8005f4e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f56:	464b      	mov	r3, r9
 8005f58:	eb4b 0303 	adc.w	r3, fp, r3
 8005f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f74:	460b      	mov	r3, r1
 8005f76:	18db      	adds	r3, r3, r3
 8005f78:	643b      	str	r3, [r7, #64]	; 0x40
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	eb42 0303 	adc.w	r3, r2, r3
 8005f80:	647b      	str	r3, [r7, #68]	; 0x44
 8005f82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f8a:	f7fa fd6f 	bl	8000a6c <__aeabi_uldivmod>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4611      	mov	r1, r2
 8005f94:	4b3b      	ldr	r3, [pc, #236]	; (8006084 <UART_SetConfig+0x2d4>)
 8005f96:	fba3 2301 	umull	r2, r3, r3, r1
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	2264      	movs	r2, #100	; 0x64
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	1acb      	subs	r3, r1, r3
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005faa:	4b36      	ldr	r3, [pc, #216]	; (8006084 <UART_SetConfig+0x2d4>)
 8005fac:	fba3 2302 	umull	r2, r3, r3, r2
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fb8:	441c      	add	r4, r3
 8005fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fcc:	4642      	mov	r2, r8
 8005fce:	464b      	mov	r3, r9
 8005fd0:	1891      	adds	r1, r2, r2
 8005fd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fd4:	415b      	adcs	r3, r3
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fdc:	4641      	mov	r1, r8
 8005fde:	1851      	adds	r1, r2, r1
 8005fe0:	6339      	str	r1, [r7, #48]	; 0x30
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	414b      	adcs	r3, r1
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ff4:	4659      	mov	r1, fp
 8005ff6:	00cb      	lsls	r3, r1, #3
 8005ff8:	4651      	mov	r1, sl
 8005ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ffe:	4651      	mov	r1, sl
 8006000:	00ca      	lsls	r2, r1, #3
 8006002:	4610      	mov	r0, r2
 8006004:	4619      	mov	r1, r3
 8006006:	4603      	mov	r3, r0
 8006008:	4642      	mov	r2, r8
 800600a:	189b      	adds	r3, r3, r2
 800600c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006010:	464b      	mov	r3, r9
 8006012:	460a      	mov	r2, r1
 8006014:	eb42 0303 	adc.w	r3, r2, r3
 8006018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006028:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800602c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006030:	460b      	mov	r3, r1
 8006032:	18db      	adds	r3, r3, r3
 8006034:	62bb      	str	r3, [r7, #40]	; 0x28
 8006036:	4613      	mov	r3, r2
 8006038:	eb42 0303 	adc.w	r3, r2, r3
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800603e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006042:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006046:	f7fa fd11 	bl	8000a6c <__aeabi_uldivmod>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <UART_SetConfig+0x2d4>)
 8006050:	fba3 1302 	umull	r1, r3, r3, r2
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	2164      	movs	r1, #100	; 0x64
 8006058:	fb01 f303 	mul.w	r3, r1, r3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	3332      	adds	r3, #50	; 0x32
 8006062:	4a08      	ldr	r2, [pc, #32]	; (8006084 <UART_SetConfig+0x2d4>)
 8006064:	fba2 2303 	umull	r2, r3, r2, r3
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	f003 0207 	and.w	r2, r3, #7
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4422      	add	r2, r4
 8006076:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006078:	e106      	b.n	8006288 <UART_SetConfig+0x4d8>
 800607a:	bf00      	nop
 800607c:	40011000 	.word	0x40011000
 8006080:	40011400 	.word	0x40011400
 8006084:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608c:	2200      	movs	r2, #0
 800608e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006092:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006096:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800609a:	4642      	mov	r2, r8
 800609c:	464b      	mov	r3, r9
 800609e:	1891      	adds	r1, r2, r2
 80060a0:	6239      	str	r1, [r7, #32]
 80060a2:	415b      	adcs	r3, r3
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
 80060a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060aa:	4641      	mov	r1, r8
 80060ac:	1854      	adds	r4, r2, r1
 80060ae:	4649      	mov	r1, r9
 80060b0:	eb43 0501 	adc.w	r5, r3, r1
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	00eb      	lsls	r3, r5, #3
 80060be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060c2:	00e2      	lsls	r2, r4, #3
 80060c4:	4614      	mov	r4, r2
 80060c6:	461d      	mov	r5, r3
 80060c8:	4643      	mov	r3, r8
 80060ca:	18e3      	adds	r3, r4, r3
 80060cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060d0:	464b      	mov	r3, r9
 80060d2:	eb45 0303 	adc.w	r3, r5, r3
 80060d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060f6:	4629      	mov	r1, r5
 80060f8:	008b      	lsls	r3, r1, #2
 80060fa:	4621      	mov	r1, r4
 80060fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006100:	4621      	mov	r1, r4
 8006102:	008a      	lsls	r2, r1, #2
 8006104:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006108:	f7fa fcb0 	bl	8000a6c <__aeabi_uldivmod>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4b60      	ldr	r3, [pc, #384]	; (8006294 <UART_SetConfig+0x4e4>)
 8006112:	fba3 2302 	umull	r2, r3, r3, r2
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	011c      	lsls	r4, r3, #4
 800611a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800611e:	2200      	movs	r2, #0
 8006120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006124:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006128:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800612c:	4642      	mov	r2, r8
 800612e:	464b      	mov	r3, r9
 8006130:	1891      	adds	r1, r2, r2
 8006132:	61b9      	str	r1, [r7, #24]
 8006134:	415b      	adcs	r3, r3
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800613c:	4641      	mov	r1, r8
 800613e:	1851      	adds	r1, r2, r1
 8006140:	6139      	str	r1, [r7, #16]
 8006142:	4649      	mov	r1, r9
 8006144:	414b      	adcs	r3, r1
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006154:	4659      	mov	r1, fp
 8006156:	00cb      	lsls	r3, r1, #3
 8006158:	4651      	mov	r1, sl
 800615a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800615e:	4651      	mov	r1, sl
 8006160:	00ca      	lsls	r2, r1, #3
 8006162:	4610      	mov	r0, r2
 8006164:	4619      	mov	r1, r3
 8006166:	4603      	mov	r3, r0
 8006168:	4642      	mov	r2, r8
 800616a:	189b      	adds	r3, r3, r2
 800616c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006170:	464b      	mov	r3, r9
 8006172:	460a      	mov	r2, r1
 8006174:	eb42 0303 	adc.w	r3, r2, r3
 8006178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	67bb      	str	r3, [r7, #120]	; 0x78
 8006186:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006194:	4649      	mov	r1, r9
 8006196:	008b      	lsls	r3, r1, #2
 8006198:	4641      	mov	r1, r8
 800619a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800619e:	4641      	mov	r1, r8
 80061a0:	008a      	lsls	r2, r1, #2
 80061a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061a6:	f7fa fc61 	bl	8000a6c <__aeabi_uldivmod>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4611      	mov	r1, r2
 80061b0:	4b38      	ldr	r3, [pc, #224]	; (8006294 <UART_SetConfig+0x4e4>)
 80061b2:	fba3 2301 	umull	r2, r3, r3, r1
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	2264      	movs	r2, #100	; 0x64
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	1acb      	subs	r3, r1, r3
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	3332      	adds	r3, #50	; 0x32
 80061c4:	4a33      	ldr	r2, [pc, #204]	; (8006294 <UART_SetConfig+0x4e4>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061d0:	441c      	add	r4, r3
 80061d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d6:	2200      	movs	r2, #0
 80061d8:	673b      	str	r3, [r7, #112]	; 0x70
 80061da:	677a      	str	r2, [r7, #116]	; 0x74
 80061dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061e0:	4642      	mov	r2, r8
 80061e2:	464b      	mov	r3, r9
 80061e4:	1891      	adds	r1, r2, r2
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	415b      	adcs	r3, r3
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061f0:	4641      	mov	r1, r8
 80061f2:	1851      	adds	r1, r2, r1
 80061f4:	6039      	str	r1, [r7, #0]
 80061f6:	4649      	mov	r1, r9
 80061f8:	414b      	adcs	r3, r1
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006208:	4659      	mov	r1, fp
 800620a:	00cb      	lsls	r3, r1, #3
 800620c:	4651      	mov	r1, sl
 800620e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006212:	4651      	mov	r1, sl
 8006214:	00ca      	lsls	r2, r1, #3
 8006216:	4610      	mov	r0, r2
 8006218:	4619      	mov	r1, r3
 800621a:	4603      	mov	r3, r0
 800621c:	4642      	mov	r2, r8
 800621e:	189b      	adds	r3, r3, r2
 8006220:	66bb      	str	r3, [r7, #104]	; 0x68
 8006222:	464b      	mov	r3, r9
 8006224:	460a      	mov	r2, r1
 8006226:	eb42 0303 	adc.w	r3, r2, r3
 800622a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	663b      	str	r3, [r7, #96]	; 0x60
 8006236:	667a      	str	r2, [r7, #100]	; 0x64
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006244:	4649      	mov	r1, r9
 8006246:	008b      	lsls	r3, r1, #2
 8006248:	4641      	mov	r1, r8
 800624a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800624e:	4641      	mov	r1, r8
 8006250:	008a      	lsls	r2, r1, #2
 8006252:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006256:	f7fa fc09 	bl	8000a6c <__aeabi_uldivmod>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4b0d      	ldr	r3, [pc, #52]	; (8006294 <UART_SetConfig+0x4e4>)
 8006260:	fba3 1302 	umull	r1, r3, r3, r2
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	2164      	movs	r1, #100	; 0x64
 8006268:	fb01 f303 	mul.w	r3, r1, r3
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	3332      	adds	r3, #50	; 0x32
 8006272:	4a08      	ldr	r2, [pc, #32]	; (8006294 <UART_SetConfig+0x4e4>)
 8006274:	fba2 2303 	umull	r2, r3, r2, r3
 8006278:	095b      	lsrs	r3, r3, #5
 800627a:	f003 020f 	and.w	r2, r3, #15
 800627e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4422      	add	r2, r4
 8006286:	609a      	str	r2, [r3, #8]
}
 8006288:	bf00      	nop
 800628a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800628e:	46bd      	mov	sp, r7
 8006290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006294:	51eb851f 	.word	0x51eb851f

08006298 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80062a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062aa:	2b84      	cmp	r3, #132	; 0x84
 80062ac:	d005      	beq.n	80062ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80062ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	3303      	adds	r3, #3
 80062b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80062ba:	68fb      	ldr	r3, [r7, #12]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80062cc:	f000 fe34 	bl	8006f38 <vTaskStartScheduler>
  
  return osOK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80062d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d8:	b089      	sub	sp, #36	; 0x24
 80062da:	af04      	add	r7, sp, #16
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d020      	beq.n	800632a <osThreadCreate+0x54>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01c      	beq.n	800632a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685c      	ldr	r4, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691e      	ldr	r6, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff ffc8 	bl	8006298 <makeFreeRtosPriority>
 8006308:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006312:	9202      	str	r2, [sp, #8]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	9100      	str	r1, [sp, #0]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	4632      	mov	r2, r6
 800631c:	4629      	mov	r1, r5
 800631e:	4620      	mov	r0, r4
 8006320:	f000 fc2c 	bl	8006b7c <xTaskCreateStatic>
 8006324:	4603      	mov	r3, r0
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	e01c      	b.n	8006364 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685c      	ldr	r4, [r3, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006336:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff ffaa 	bl	8006298 <makeFreeRtosPriority>
 8006344:	4602      	mov	r2, r0
 8006346:	f107 030c 	add.w	r3, r7, #12
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	9200      	str	r2, [sp, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	4632      	mov	r2, r6
 8006352:	4629      	mov	r1, r5
 8006354:	4620      	mov	r0, r4
 8006356:	f000 fc6e 	bl	8006c36 <xTaskCreate>
 800635a:	4603      	mov	r3, r0
 800635c:	2b01      	cmp	r3, #1
 800635e:	d001      	beq.n	8006364 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	e000      	b.n	8006366 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006364:	68fb      	ldr	r3, [r7, #12]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800636e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <osDelay+0x16>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	e000      	b.n	8006386 <osDelay+0x18>
 8006384:	2301      	movs	r3, #1
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fda2 	bl	8006ed0 <vTaskDelay>
  
  return osOK;
 800638c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006396:	b580      	push	{r7, lr}
 8006398:	b086      	sub	sp, #24
 800639a:	af02      	add	r7, sp, #8
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00f      	beq.n	80063c8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d10a      	bne.n	80063c4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2203      	movs	r2, #3
 80063b4:	9200      	str	r2, [sp, #0]
 80063b6:	2200      	movs	r2, #0
 80063b8:	2100      	movs	r1, #0
 80063ba:	2001      	movs	r0, #1
 80063bc:	f000 f93a 	bl	8006634 <xQueueGenericCreateStatic>
 80063c0:	4603      	mov	r3, r0
 80063c2:	e016      	b.n	80063f2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e014      	b.n	80063f2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d110      	bne.n	80063f0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80063ce:	2203      	movs	r2, #3
 80063d0:	2100      	movs	r1, #0
 80063d2:	2001      	movs	r0, #1
 80063d4:	f000 f9a6 	bl	8006724 <xQueueGenericCreate>
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <osSemaphoreCreate+0x56>
 80063e0:	2300      	movs	r3, #0
 80063e2:	2200      	movs	r2, #0
 80063e4:	2100      	movs	r1, #0
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f9f6 	bl	80067d8 <xQueueGenericSend>
      return sema;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	e000      	b.n	80063f2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80063f0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f103 0208 	add.w	r2, r3, #8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f04f 32ff 	mov.w	r2, #4294967295
 8006412:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f103 0208 	add.w	r2, r3, #8
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f103 0208 	add.w	r2, r3, #8
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	601a      	str	r2, [r3, #0]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d103      	bne.n	80064bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	e00c      	b.n	80064d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3308      	adds	r3, #8
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	e002      	b.n	80064ca <vListInsert+0x2e>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d2f6      	bcs.n	80064c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	601a      	str	r2, [r3, #0]
}
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6892      	ldr	r2, [r2, #8]
 8006524:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6852      	ldr	r2, [r2, #4]
 800652e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d103      	bne.n	8006542 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	1e5a      	subs	r2, r3, #1
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800658e:	f001 fb19 	bl	8007bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800659e:	fb01 f303 	mul.w	r3, r1, r3
 80065a2:	441a      	add	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	3b01      	subs	r3, #1
 80065c0:	68f9      	ldr	r1, [r7, #12]
 80065c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	441a      	add	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	22ff      	movs	r2, #255	; 0xff
 80065d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	22ff      	movs	r2, #255	; 0xff
 80065da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d114      	bne.n	800660e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01a      	beq.n	8006622 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3310      	adds	r3, #16
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fef3 	bl	80073dc <xTaskRemoveFromEventList>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d012      	beq.n	8006622 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <xQueueGenericReset+0xcc>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	e009      	b.n	8006622 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3310      	adds	r3, #16
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fef1 	bl	80063fa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3324      	adds	r3, #36	; 0x24
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff feec 	bl	80063fa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006622:	f001 faff 	bl	8007c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006626:	2301      	movs	r3, #1
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08e      	sub	sp, #56	; 0x38
 8006638:	af02      	add	r7, sp, #8
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <xQueueGenericCreateStatic+0x52>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <xQueueGenericCreateStatic+0x56>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <xQueueGenericCreateStatic+0x58>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	623b      	str	r3, [r7, #32]
}
 80066a2:	bf00      	nop
 80066a4:	e7fe      	b.n	80066a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d102      	bne.n	80066b2 <xQueueGenericCreateStatic+0x7e>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <xQueueGenericCreateStatic+0x82>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <xQueueGenericCreateStatic+0x84>
 80066b6:	2300      	movs	r3, #0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	61fb      	str	r3, [r7, #28]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066d2:	2348      	movs	r3, #72	; 0x48
 80066d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b48      	cmp	r3, #72	; 0x48
 80066da:	d00a      	beq.n	80066f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	61bb      	str	r3, [r7, #24]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00d      	beq.n	800671a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006706:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	4613      	mov	r3, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f83f 	bl	8006798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800671c:	4618      	mov	r0, r3
 800671e:	3730      	adds	r7, #48	; 0x30
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	; 0x28
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	613b      	str	r3, [r7, #16]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	3348      	adds	r3, #72	; 0x48
 800675c:	4618      	mov	r0, r3
 800675e:	f001 fb13 	bl	8007d88 <pvPortMalloc>
 8006762:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d011      	beq.n	800678e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	3348      	adds	r3, #72	; 0x48
 8006772:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800677c:	79fa      	ldrb	r2, [r7, #7]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	4613      	mov	r3, r2
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f805 	bl	8006798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800678e:	69bb      	ldr	r3, [r7, #24]
	}
 8006790:	4618      	mov	r0, r3
 8006792:	3720      	adds	r7, #32
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d103      	bne.n	80067b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	e002      	b.n	80067ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067c6:	2101      	movs	r1, #1
 80067c8:	69b8      	ldr	r0, [r7, #24]
 80067ca:	f7ff fecb 	bl	8006564 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08e      	sub	sp, #56	; 0x38
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067e6:	2300      	movs	r3, #0
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <xQueueGenericSend+0x32>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d103      	bne.n	8006818 <xQueueGenericSend+0x40>
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <xQueueGenericSend+0x44>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <xQueueGenericSend+0x46>
 800681c:	2300      	movs	r3, #0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <xQueueGenericSend+0x60>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d103      	bne.n	8006846 <xQueueGenericSend+0x6e>
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <xQueueGenericSend+0x72>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <xQueueGenericSend+0x74>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <xQueueGenericSend+0x8e>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	623b      	str	r3, [r7, #32]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006866:	f000 ff79 	bl	800775c <xTaskGetSchedulerState>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <xQueueGenericSend+0x9e>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <xQueueGenericSend+0xa2>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <xQueueGenericSend+0xa4>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xQueueGenericSend+0xbe>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	61fb      	str	r3, [r7, #28]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006896:	f001 f995 	bl	8007bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d302      	bcc.n	80068ac <xQueueGenericSend+0xd4>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d129      	bne.n	8006900 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068b2:	f000 f88f 	bl	80069d4 <prvCopyDataToQueue>
 80068b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d010      	beq.n	80068e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	3324      	adds	r3, #36	; 0x24
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fd89 	bl	80073dc <xTaskRemoveFromEventList>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d013      	beq.n	80068f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068d0:	4b3f      	ldr	r3, [pc, #252]	; (80069d0 <xQueueGenericSend+0x1f8>)
 80068d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	e00a      	b.n	80068f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068e8:	4b39      	ldr	r3, [pc, #228]	; (80069d0 <xQueueGenericSend+0x1f8>)
 80068ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068f8:	f001 f994 	bl	8007c24 <vPortExitCritical>
				return pdPASS;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e063      	b.n	80069c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006906:	f001 f98d 	bl	8007c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800690a:	2300      	movs	r3, #0
 800690c:	e05c      	b.n	80069c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800690e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006910:	2b00      	cmp	r3, #0
 8006912:	d106      	bne.n	8006922 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006914:	f107 0314 	add.w	r3, r7, #20
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fdc1 	bl	80074a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800691e:	2301      	movs	r3, #1
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006922:	f001 f97f 	bl	8007c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006926:	f000 fb71 	bl	800700c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800692a:	f001 f94b 	bl	8007bc4 <vPortEnterCritical>
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006934:	b25b      	sxtb	r3, r3
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d103      	bne.n	8006944 <xQueueGenericSend+0x16c>
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694a:	b25b      	sxtb	r3, r3
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d103      	bne.n	800695a <xQueueGenericSend+0x182>
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800695a:	f001 f963 	bl	8007c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800695e:	1d3a      	adds	r2, r7, #4
 8006960:	f107 0314 	add.w	r3, r7, #20
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fdb0 	bl	80074cc <xTaskCheckForTimeOut>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d124      	bne.n	80069bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006974:	f000 f8ea 	bl	8006b4c <prvIsQueueFull>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d018      	beq.n	80069b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	3310      	adds	r3, #16
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fd04 	bl	8007394 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800698c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800698e:	f000 f88b 	bl	8006aa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006992:	f000 fb49 	bl	8007028 <xTaskResumeAll>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	f47f af7c 	bne.w	8006896 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <xQueueGenericSend+0x1f8>)
 80069a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	e772      	b.n	8006896 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069b2:	f000 f879 	bl	8006aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069b6:	f000 fb37 	bl	8007028 <xTaskResumeAll>
 80069ba:	e76c      	b.n	8006896 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069be:	f000 f873 	bl	8006aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069c2:	f000 fb31 	bl	8007028 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3738      	adds	r7, #56	; 0x38
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10d      	bne.n	8006a0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d14d      	bne.n	8006a96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 feca 	bl	8007798 <xTaskPriorityDisinherit>
 8006a04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	609a      	str	r2, [r3, #8]
 8006a0c:	e043      	b.n	8006a96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d119      	bne.n	8006a48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6858      	ldr	r0, [r3, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	f001 fc8a 	bl	8008338 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	441a      	add	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d32b      	bcc.n	8006a96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	605a      	str	r2, [r3, #4]
 8006a46:	e026      	b.n	8006a96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	68d8      	ldr	r0, [r3, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	461a      	mov	r2, r3
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	f001 fc70 	bl	8008338 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	425b      	negs	r3, r3
 8006a62:	441a      	add	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d207      	bcs.n	8006a84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	425b      	negs	r3, r3
 8006a7e:	441a      	add	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d105      	bne.n	8006a96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a9e:	697b      	ldr	r3, [r7, #20]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ab0:	f001 f888 	bl	8007bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006abc:	e011      	b.n	8006ae2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d012      	beq.n	8006aec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3324      	adds	r3, #36	; 0x24
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fc86 	bl	80073dc <xTaskRemoveFromEventList>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ad6:	f000 fd5b 	bl	8007590 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dce9      	bgt.n	8006abe <prvUnlockQueue+0x16>
 8006aea:	e000      	b.n	8006aee <prvUnlockQueue+0x46>
					break;
 8006aec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	22ff      	movs	r2, #255	; 0xff
 8006af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006af6:	f001 f895 	bl	8007c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006afa:	f001 f863 	bl	8007bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b06:	e011      	b.n	8006b2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d012      	beq.n	8006b36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3310      	adds	r3, #16
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fc61 	bl	80073dc <xTaskRemoveFromEventList>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b20:	f000 fd36 	bl	8007590 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	dce9      	bgt.n	8006b08 <prvUnlockQueue+0x60>
 8006b34:	e000      	b.n	8006b38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	22ff      	movs	r2, #255	; 0xff
 8006b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b40:	f001 f870 	bl	8007c24 <vPortExitCritical>
}
 8006b44:	bf00      	nop
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b54:	f001 f836 	bl	8007bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d102      	bne.n	8006b6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b64:	2301      	movs	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	e001      	b.n	8006b6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b6e:	f001 f859 	bl	8007c24 <vPortExitCritical>

	return xReturn;
 8006b72:	68fb      	ldr	r3, [r7, #12]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08e      	sub	sp, #56	; 0x38
 8006b80:	af04      	add	r7, sp, #16
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	623b      	str	r3, [r7, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	61fb      	str	r3, [r7, #28]
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bc2:	23a0      	movs	r3, #160	; 0xa0
 8006bc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2ba0      	cmp	r3, #160	; 0xa0
 8006bca:	d00a      	beq.n	8006be2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	61bb      	str	r3, [r7, #24]
}
 8006bde:	bf00      	nop
 8006be0:	e7fe      	b.n	8006be0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006be2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01e      	beq.n	8006c28 <xTaskCreateStatic+0xac>
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01b      	beq.n	8006c28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c02:	2300      	movs	r3, #0
 8006c04:	9303      	str	r3, [sp, #12]
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	9302      	str	r3, [sp, #8]
 8006c0a:	f107 0314 	add.w	r3, r7, #20
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f850 	bl	8006cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c22:	f000 f8eb 	bl	8006dfc <prvAddNewTaskToReadyList>
 8006c26:	e001      	b.n	8006c2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c2c:	697b      	ldr	r3, [r7, #20]
	}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3728      	adds	r7, #40	; 0x28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b08c      	sub	sp, #48	; 0x30
 8006c3a:	af04      	add	r7, sp, #16
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	603b      	str	r3, [r7, #0]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 f89c 	bl	8007d88 <pvPortMalloc>
 8006c50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00e      	beq.n	8006c76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c58:	20a0      	movs	r0, #160	; 0xa0
 8006c5a:	f001 f895 	bl	8007d88 <pvPortMalloc>
 8006c5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c6c:	e005      	b.n	8006c7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c6e:	6978      	ldr	r0, [r7, #20]
 8006c70:	f001 f956 	bl	8007f20 <vPortFree>
 8006c74:	e001      	b.n	8006c7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d017      	beq.n	8006cb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c88:	88fa      	ldrh	r2, [r7, #6]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9303      	str	r3, [sp, #12]
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	9302      	str	r3, [sp, #8]
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f80e 	bl	8006cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ca4:	69f8      	ldr	r0, [r7, #28]
 8006ca6:	f000 f8a9 	bl	8006dfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006caa:	2301      	movs	r3, #1
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	e002      	b.n	8006cb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
	}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3720      	adds	r7, #32
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	f023 0307 	bic.w	r3, r3, #7
 8006ce6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	617b      	str	r3, [r7, #20]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01f      	beq.n	8006d4e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61fb      	str	r3, [r7, #28]
 8006d12:	e012      	b.n	8006d3a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	7819      	ldrb	r1, [r3, #0]
 8006d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	4413      	add	r3, r2
 8006d22:	3334      	adds	r3, #52	; 0x34
 8006d24:	460a      	mov	r2, r1
 8006d26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d006      	beq.n	8006d42 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	3301      	adds	r3, #1
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2b0f      	cmp	r3, #15
 8006d3e:	d9e9      	bls.n	8006d14 <prvInitialiseNewTask+0x54>
 8006d40:	e000      	b.n	8006d44 <prvInitialiseNewTask+0x84>
			{
				break;
 8006d42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d4c:	e003      	b.n	8006d56 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	2b06      	cmp	r3, #6
 8006d5a:	d901      	bls.n	8006d60 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d5c:	2306      	movs	r3, #6
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d6a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	2200      	movs	r2, #0
 8006d70:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	3304      	adds	r3, #4
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fb5f 	bl	800643a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	3318      	adds	r3, #24
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff fb5a 	bl	800643a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	f1c3 0207 	rsb	r2, r3, #7
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	334c      	adds	r3, #76	; 0x4c
 8006db0:	224c      	movs	r2, #76	; 0x4c
 8006db2:	2100      	movs	r1, #0
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 fa1f 	bl	80081f8 <memset>
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	4a0c      	ldr	r2, [pc, #48]	; (8006df0 <prvInitialiseNewTask+0x130>)
 8006dbe:	651a      	str	r2, [r3, #80]	; 0x50
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	4a0c      	ldr	r2, [pc, #48]	; (8006df4 <prvInitialiseNewTask+0x134>)
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	4a0b      	ldr	r2, [pc, #44]	; (8006df8 <prvInitialiseNewTask+0x138>)
 8006dca:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	69b8      	ldr	r0, [r7, #24]
 8006dd2:	f000 fdcd 	bl	8007970 <pxPortInitialiseStack>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de8:	bf00      	nop
 8006dea:	3720      	adds	r7, #32
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	200042bc 	.word	0x200042bc
 8006df4:	20004324 	.word	0x20004324
 8006df8:	2000438c 	.word	0x2000438c

08006dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e04:	f000 fede 	bl	8007bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e08:	4b2a      	ldr	r3, [pc, #168]	; (8006eb4 <prvAddNewTaskToReadyList+0xb8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	4a29      	ldr	r2, [pc, #164]	; (8006eb4 <prvAddNewTaskToReadyList+0xb8>)
 8006e10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e12:	4b29      	ldr	r3, [pc, #164]	; (8006eb8 <prvAddNewTaskToReadyList+0xbc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d109      	bne.n	8006e2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e1a:	4a27      	ldr	r2, [pc, #156]	; (8006eb8 <prvAddNewTaskToReadyList+0xbc>)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e20:	4b24      	ldr	r3, [pc, #144]	; (8006eb4 <prvAddNewTaskToReadyList+0xb8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d110      	bne.n	8006e4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e28:	f000 fbd6 	bl	80075d8 <prvInitialiseTaskLists>
 8006e2c:	e00d      	b.n	8006e4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e2e:	4b23      	ldr	r3, [pc, #140]	; (8006ebc <prvAddNewTaskToReadyList+0xc0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d109      	bne.n	8006e4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e36:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <prvAddNewTaskToReadyList+0xbc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d802      	bhi.n	8006e4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e44:	4a1c      	ldr	r2, [pc, #112]	; (8006eb8 <prvAddNewTaskToReadyList+0xbc>)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <prvAddNewTaskToReadyList+0xc4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	4a1b      	ldr	r2, [pc, #108]	; (8006ec0 <prvAddNewTaskToReadyList+0xc4>)
 8006e52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	2201      	movs	r2, #1
 8006e5a:	409a      	lsls	r2, r3
 8006e5c:	4b19      	ldr	r3, [pc, #100]	; (8006ec4 <prvAddNewTaskToReadyList+0xc8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <prvAddNewTaskToReadyList+0xc8>)
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <prvAddNewTaskToReadyList+0xcc>)
 8006e74:	441a      	add	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	f7ff fae9 	bl	8006454 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e82:	f000 fecf 	bl	8007c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <prvAddNewTaskToReadyList+0xc0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00e      	beq.n	8006eac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e8e:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <prvAddNewTaskToReadyList+0xbc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d207      	bcs.n	8006eac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <prvAddNewTaskToReadyList+0xd0>)
 8006e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000668 	.word	0x20000668
 8006eb8:	20000568 	.word	0x20000568
 8006ebc:	20000674 	.word	0x20000674
 8006ec0:	20000684 	.word	0x20000684
 8006ec4:	20000670 	.word	0x20000670
 8006ec8:	2000056c 	.word	0x2000056c
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d017      	beq.n	8006f12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ee2:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <vTaskDelay+0x60>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <vTaskDelay+0x30>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	60bb      	str	r3, [r7, #8]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f00:	f000 f884 	bl	800700c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f04:	2100      	movs	r1, #0
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fccc 	bl	80078a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f0c:	f000 f88c 	bl	8007028 <xTaskResumeAll>
 8006f10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d107      	bne.n	8006f28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <vTaskDelay+0x64>)
 8006f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20000690 	.word	0x20000690
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	; 0x28
 8006f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f46:	463a      	mov	r2, r7
 8006f48:	1d39      	adds	r1, r7, #4
 8006f4a:	f107 0308 	add.w	r3, r7, #8
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fa f970 	bl	8001234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	9202      	str	r2, [sp, #8]
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	460a      	mov	r2, r1
 8006f66:	4921      	ldr	r1, [pc, #132]	; (8006fec <vTaskStartScheduler+0xb4>)
 8006f68:	4821      	ldr	r0, [pc, #132]	; (8006ff0 <vTaskStartScheduler+0xb8>)
 8006f6a:	f7ff fe07 	bl	8006b7c <xTaskCreateStatic>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4a20      	ldr	r2, [pc, #128]	; (8006ff4 <vTaskStartScheduler+0xbc>)
 8006f72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f74:	4b1f      	ldr	r3, [pc, #124]	; (8006ff4 <vTaskStartScheduler+0xbc>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e001      	b.n	8006f86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d11b      	bne.n	8006fc4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	613b      	str	r3, [r7, #16]
}
 8006f9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fa0:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <vTaskStartScheduler+0xc0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	334c      	adds	r3, #76	; 0x4c
 8006fa6:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <vTaskStartScheduler+0xc4>)
 8006fa8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006faa:	4b15      	ldr	r3, [pc, #84]	; (8007000 <vTaskStartScheduler+0xc8>)
 8006fac:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fb2:	4b14      	ldr	r3, [pc, #80]	; (8007004 <vTaskStartScheduler+0xcc>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fb8:	4b13      	ldr	r3, [pc, #76]	; (8007008 <vTaskStartScheduler+0xd0>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fbe:	f000 fd5f 	bl	8007a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fc2:	e00e      	b.n	8006fe2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d10a      	bne.n	8006fe2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	60fb      	str	r3, [r7, #12]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <vTaskStartScheduler+0xa8>
}
 8006fe2:	bf00      	nop
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	08009644 	.word	0x08009644
 8006ff0:	080075a9 	.word	0x080075a9
 8006ff4:	2000068c 	.word	0x2000068c
 8006ff8:	20000568 	.word	0x20000568
 8006ffc:	20000070 	.word	0x20000070
 8007000:	20000688 	.word	0x20000688
 8007004:	20000674 	.word	0x20000674
 8007008:	2000066c 	.word	0x2000066c

0800700c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <vTaskSuspendAll+0x18>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3301      	adds	r3, #1
 8007016:	4a03      	ldr	r2, [pc, #12]	; (8007024 <vTaskSuspendAll+0x18>)
 8007018:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800701a:	bf00      	nop
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	20000690 	.word	0x20000690

08007028 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007032:	2300      	movs	r3, #0
 8007034:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007036:	4b41      	ldr	r3, [pc, #260]	; (800713c <xTaskResumeAll+0x114>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <xTaskResumeAll+0x2c>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	603b      	str	r3, [r7, #0]
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007054:	f000 fdb6 	bl	8007bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007058:	4b38      	ldr	r3, [pc, #224]	; (800713c <xTaskResumeAll+0x114>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3b01      	subs	r3, #1
 800705e:	4a37      	ldr	r2, [pc, #220]	; (800713c <xTaskResumeAll+0x114>)
 8007060:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007062:	4b36      	ldr	r3, [pc, #216]	; (800713c <xTaskResumeAll+0x114>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d161      	bne.n	800712e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800706a:	4b35      	ldr	r3, [pc, #212]	; (8007140 <xTaskResumeAll+0x118>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d05d      	beq.n	800712e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007072:	e02e      	b.n	80070d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007074:	4b33      	ldr	r3, [pc, #204]	; (8007144 <xTaskResumeAll+0x11c>)
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3318      	adds	r3, #24
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff fa44 	bl	800650e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3304      	adds	r3, #4
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff fa3f 	bl	800650e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	2201      	movs	r2, #1
 8007096:	409a      	lsls	r2, r3
 8007098:	4b2b      	ldr	r3, [pc, #172]	; (8007148 <xTaskResumeAll+0x120>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4313      	orrs	r3, r2
 800709e:	4a2a      	ldr	r2, [pc, #168]	; (8007148 <xTaskResumeAll+0x120>)
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4a27      	ldr	r2, [pc, #156]	; (800714c <xTaskResumeAll+0x124>)
 80070b0:	441a      	add	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3304      	adds	r3, #4
 80070b6:	4619      	mov	r1, r3
 80070b8:	4610      	mov	r0, r2
 80070ba:	f7ff f9cb 	bl	8006454 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	4b23      	ldr	r3, [pc, #140]	; (8007150 <xTaskResumeAll+0x128>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80070cc:	4b21      	ldr	r3, [pc, #132]	; (8007154 <xTaskResumeAll+0x12c>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070d2:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <xTaskResumeAll+0x11c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1cc      	bne.n	8007074 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070e0:	f000 fb1c 	bl	800771c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070e4:	4b1c      	ldr	r3, [pc, #112]	; (8007158 <xTaskResumeAll+0x130>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d010      	beq.n	8007112 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070f0:	f000 f836 	bl	8007160 <xTaskIncrementTick>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80070fa:	4b16      	ldr	r3, [pc, #88]	; (8007154 <xTaskResumeAll+0x12c>)
 80070fc:	2201      	movs	r2, #1
 80070fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3b01      	subs	r3, #1
 8007104:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1f1      	bne.n	80070f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800710c:	4b12      	ldr	r3, [pc, #72]	; (8007158 <xTaskResumeAll+0x130>)
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007112:	4b10      	ldr	r3, [pc, #64]	; (8007154 <xTaskResumeAll+0x12c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800711a:	2301      	movs	r3, #1
 800711c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800711e:	4b0f      	ldr	r3, [pc, #60]	; (800715c <xTaskResumeAll+0x134>)
 8007120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800712e:	f000 fd79 	bl	8007c24 <vPortExitCritical>

	return xAlreadyYielded;
 8007132:	68bb      	ldr	r3, [r7, #8]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000690 	.word	0x20000690
 8007140:	20000668 	.word	0x20000668
 8007144:	20000628 	.word	0x20000628
 8007148:	20000670 	.word	0x20000670
 800714c:	2000056c 	.word	0x2000056c
 8007150:	20000568 	.word	0x20000568
 8007154:	2000067c 	.word	0x2000067c
 8007158:	20000678 	.word	0x20000678
 800715c:	e000ed04 	.word	0xe000ed04

08007160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800716a:	4b4e      	ldr	r3, [pc, #312]	; (80072a4 <xTaskIncrementTick+0x144>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f040 808e 	bne.w	8007290 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007174:	4b4c      	ldr	r3, [pc, #304]	; (80072a8 <xTaskIncrementTick+0x148>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3301      	adds	r3, #1
 800717a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800717c:	4a4a      	ldr	r2, [pc, #296]	; (80072a8 <xTaskIncrementTick+0x148>)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d120      	bne.n	80071ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007188:	4b48      	ldr	r3, [pc, #288]	; (80072ac <xTaskIncrementTick+0x14c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	603b      	str	r3, [r7, #0]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xTaskIncrementTick+0x46>
 80071a8:	4b40      	ldr	r3, [pc, #256]	; (80072ac <xTaskIncrementTick+0x14c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	4b40      	ldr	r3, [pc, #256]	; (80072b0 <xTaskIncrementTick+0x150>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a3e      	ldr	r2, [pc, #248]	; (80072ac <xTaskIncrementTick+0x14c>)
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	4a3e      	ldr	r2, [pc, #248]	; (80072b0 <xTaskIncrementTick+0x150>)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	4b3d      	ldr	r3, [pc, #244]	; (80072b4 <xTaskIncrementTick+0x154>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3301      	adds	r3, #1
 80071c2:	4a3c      	ldr	r2, [pc, #240]	; (80072b4 <xTaskIncrementTick+0x154>)
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	f000 faa9 	bl	800771c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071ca:	4b3b      	ldr	r3, [pc, #236]	; (80072b8 <xTaskIncrementTick+0x158>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d348      	bcc.n	8007266 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071d4:	4b35      	ldr	r3, [pc, #212]	; (80072ac <xTaskIncrementTick+0x14c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d104      	bne.n	80071e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071de:	4b36      	ldr	r3, [pc, #216]	; (80072b8 <xTaskIncrementTick+0x158>)
 80071e0:	f04f 32ff 	mov.w	r2, #4294967295
 80071e4:	601a      	str	r2, [r3, #0]
					break;
 80071e6:	e03e      	b.n	8007266 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e8:	4b30      	ldr	r3, [pc, #192]	; (80072ac <xTaskIncrementTick+0x14c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d203      	bcs.n	8007208 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007200:	4a2d      	ldr	r2, [pc, #180]	; (80072b8 <xTaskIncrementTick+0x158>)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007206:	e02e      	b.n	8007266 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	3304      	adds	r3, #4
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff f97e 	bl	800650e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d004      	beq.n	8007224 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	3318      	adds	r3, #24
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff f975 	bl	800650e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	2201      	movs	r2, #1
 800722a:	409a      	lsls	r2, r3
 800722c:	4b23      	ldr	r3, [pc, #140]	; (80072bc <xTaskIncrementTick+0x15c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4313      	orrs	r3, r2
 8007232:	4a22      	ldr	r2, [pc, #136]	; (80072bc <xTaskIncrementTick+0x15c>)
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <xTaskIncrementTick+0x160>)
 8007244:	441a      	add	r2, r3
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	3304      	adds	r3, #4
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7ff f901 	bl	8006454 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007256:	4b1b      	ldr	r3, [pc, #108]	; (80072c4 <xTaskIncrementTick+0x164>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	429a      	cmp	r2, r3
 800725e:	d3b9      	bcc.n	80071d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007260:	2301      	movs	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007264:	e7b6      	b.n	80071d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007266:	4b17      	ldr	r3, [pc, #92]	; (80072c4 <xTaskIncrementTick+0x164>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726c:	4914      	ldr	r1, [pc, #80]	; (80072c0 <xTaskIncrementTick+0x160>)
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	440b      	add	r3, r1
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d901      	bls.n	8007282 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800727e:	2301      	movs	r3, #1
 8007280:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007282:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <xTaskIncrementTick+0x168>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d007      	beq.n	800729a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800728a:	2301      	movs	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	e004      	b.n	800729a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007290:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <xTaskIncrementTick+0x16c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3301      	adds	r3, #1
 8007296:	4a0d      	ldr	r2, [pc, #52]	; (80072cc <xTaskIncrementTick+0x16c>)
 8007298:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800729a:	697b      	ldr	r3, [r7, #20]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000690 	.word	0x20000690
 80072a8:	2000066c 	.word	0x2000066c
 80072ac:	20000620 	.word	0x20000620
 80072b0:	20000624 	.word	0x20000624
 80072b4:	20000680 	.word	0x20000680
 80072b8:	20000688 	.word	0x20000688
 80072bc:	20000670 	.word	0x20000670
 80072c0:	2000056c 	.word	0x2000056c
 80072c4:	20000568 	.word	0x20000568
 80072c8:	2000067c 	.word	0x2000067c
 80072cc:	20000678 	.word	0x20000678

080072d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072d6:	4b29      	ldr	r3, [pc, #164]	; (800737c <vTaskSwitchContext+0xac>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072de:	4b28      	ldr	r3, [pc, #160]	; (8007380 <vTaskSwitchContext+0xb0>)
 80072e0:	2201      	movs	r2, #1
 80072e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072e4:	e044      	b.n	8007370 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80072e6:	4b26      	ldr	r3, [pc, #152]	; (8007380 <vTaskSwitchContext+0xb0>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ec:	4b25      	ldr	r3, [pc, #148]	; (8007384 <vTaskSwitchContext+0xb4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	fab3 f383 	clz	r3, r3
 80072f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80072fa:	7afb      	ldrb	r3, [r7, #11]
 80072fc:	f1c3 031f 	rsb	r3, r3, #31
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	4921      	ldr	r1, [pc, #132]	; (8007388 <vTaskSwitchContext+0xb8>)
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	440b      	add	r3, r1
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	607b      	str	r3, [r7, #4]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <vTaskSwitchContext+0x5a>
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4a14      	ldr	r2, [pc, #80]	; (8007388 <vTaskSwitchContext+0xb8>)
 8007338:	4413      	add	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3308      	adds	r3, #8
 800734e:	429a      	cmp	r2, r3
 8007350:	d104      	bne.n	800735c <vTaskSwitchContext+0x8c>
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	605a      	str	r2, [r3, #4]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	4a0a      	ldr	r2, [pc, #40]	; (800738c <vTaskSwitchContext+0xbc>)
 8007364:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007366:	4b09      	ldr	r3, [pc, #36]	; (800738c <vTaskSwitchContext+0xbc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	334c      	adds	r3, #76	; 0x4c
 800736c:	4a08      	ldr	r2, [pc, #32]	; (8007390 <vTaskSwitchContext+0xc0>)
 800736e:	6013      	str	r3, [r2, #0]
}
 8007370:	bf00      	nop
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	20000690 	.word	0x20000690
 8007380:	2000067c 	.word	0x2000067c
 8007384:	20000670 	.word	0x20000670
 8007388:	2000056c 	.word	0x2000056c
 800738c:	20000568 	.word	0x20000568
 8007390:	20000070 	.word	0x20000070

08007394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	60fb      	str	r3, [r7, #12]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073ba:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <vTaskPlaceOnEventList+0x44>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3318      	adds	r3, #24
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff f86a 	bl	800649c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073c8:	2101      	movs	r1, #1
 80073ca:	6838      	ldr	r0, [r7, #0]
 80073cc:	f000 fa6a 	bl	80078a4 <prvAddCurrentTaskToDelayedList>
}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20000568 	.word	0x20000568

080073dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	60fb      	str	r3, [r7, #12]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	3318      	adds	r3, #24
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff f87e 	bl	800650e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007412:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <xTaskRemoveFromEventList+0xac>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d11c      	bne.n	8007454 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	3304      	adds	r3, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff f875 	bl	800650e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	2201      	movs	r2, #1
 800742a:	409a      	lsls	r2, r3
 800742c:	4b17      	ldr	r3, [pc, #92]	; (800748c <xTaskRemoveFromEventList+0xb0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4313      	orrs	r3, r2
 8007432:	4a16      	ldr	r2, [pc, #88]	; (800748c <xTaskRemoveFromEventList+0xb0>)
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4a13      	ldr	r2, [pc, #76]	; (8007490 <xTaskRemoveFromEventList+0xb4>)
 8007444:	441a      	add	r2, r3
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3304      	adds	r3, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f7ff f801 	bl	8006454 <vListInsertEnd>
 8007452:	e005      	b.n	8007460 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	3318      	adds	r3, #24
 8007458:	4619      	mov	r1, r3
 800745a:	480e      	ldr	r0, [pc, #56]	; (8007494 <xTaskRemoveFromEventList+0xb8>)
 800745c:	f7fe fffa 	bl	8006454 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <xTaskRemoveFromEventList+0xbc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	429a      	cmp	r2, r3
 800746c:	d905      	bls.n	800747a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800746e:	2301      	movs	r3, #1
 8007470:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007472:	4b0a      	ldr	r3, [pc, #40]	; (800749c <xTaskRemoveFromEventList+0xc0>)
 8007474:	2201      	movs	r2, #1
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	e001      	b.n	800747e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800747e:	697b      	ldr	r3, [r7, #20]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000690 	.word	0x20000690
 800748c:	20000670 	.word	0x20000670
 8007490:	2000056c 	.word	0x2000056c
 8007494:	20000628 	.word	0x20000628
 8007498:	20000568 	.word	0x20000568
 800749c:	2000067c 	.word	0x2000067c

080074a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <vTaskInternalSetTimeOutState+0x24>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <vTaskInternalSetTimeOutState+0x28>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	20000680 	.word	0x20000680
 80074c8:	2000066c 	.word	0x2000066c

080074cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	613b      	str	r3, [r7, #16]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	60fb      	str	r3, [r7, #12]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800750e:	f000 fb59 	bl	8007bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007512:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <xTaskCheckForTimeOut+0xbc>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752a:	d102      	bne.n	8007532 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800752c:	2300      	movs	r3, #0
 800752e:	61fb      	str	r3, [r7, #28]
 8007530:	e023      	b.n	800757a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	4b15      	ldr	r3, [pc, #84]	; (800758c <xTaskCheckForTimeOut+0xc0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d007      	beq.n	800754e <xTaskCheckForTimeOut+0x82>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	429a      	cmp	r2, r3
 8007546:	d302      	bcc.n	800754e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007548:	2301      	movs	r3, #1
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	e015      	b.n	800757a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	429a      	cmp	r2, r3
 8007556:	d20b      	bcs.n	8007570 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff ff9b 	bl	80074a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	e004      	b.n	800757a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007576:	2301      	movs	r3, #1
 8007578:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800757a:	f000 fb53 	bl	8007c24 <vPortExitCritical>

	return xReturn;
 800757e:	69fb      	ldr	r3, [r7, #28]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	2000066c 	.word	0x2000066c
 800758c:	20000680 	.word	0x20000680

08007590 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007594:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <vTaskMissedYield+0x14>)
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]
}
 800759a:	bf00      	nop
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	2000067c 	.word	0x2000067c

080075a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075b0:	f000 f852 	bl	8007658 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075b4:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <prvIdleTask+0x28>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d9f9      	bls.n	80075b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075bc:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <prvIdleTask+0x2c>)
 80075be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075cc:	e7f0      	b.n	80075b0 <prvIdleTask+0x8>
 80075ce:	bf00      	nop
 80075d0:	2000056c 	.word	0x2000056c
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
 80075e2:	e00c      	b.n	80075fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4a12      	ldr	r2, [pc, #72]	; (8007638 <prvInitialiseTaskLists+0x60>)
 80075f0:	4413      	add	r3, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe ff01 	bl	80063fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3301      	adds	r3, #1
 80075fc:	607b      	str	r3, [r7, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b06      	cmp	r3, #6
 8007602:	d9ef      	bls.n	80075e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007604:	480d      	ldr	r0, [pc, #52]	; (800763c <prvInitialiseTaskLists+0x64>)
 8007606:	f7fe fef8 	bl	80063fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800760a:	480d      	ldr	r0, [pc, #52]	; (8007640 <prvInitialiseTaskLists+0x68>)
 800760c:	f7fe fef5 	bl	80063fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007610:	480c      	ldr	r0, [pc, #48]	; (8007644 <prvInitialiseTaskLists+0x6c>)
 8007612:	f7fe fef2 	bl	80063fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007616:	480c      	ldr	r0, [pc, #48]	; (8007648 <prvInitialiseTaskLists+0x70>)
 8007618:	f7fe feef 	bl	80063fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800761c:	480b      	ldr	r0, [pc, #44]	; (800764c <prvInitialiseTaskLists+0x74>)
 800761e:	f7fe feec 	bl	80063fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007622:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <prvInitialiseTaskLists+0x78>)
 8007624:	4a05      	ldr	r2, [pc, #20]	; (800763c <prvInitialiseTaskLists+0x64>)
 8007626:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvInitialiseTaskLists+0x7c>)
 800762a:	4a05      	ldr	r2, [pc, #20]	; (8007640 <prvInitialiseTaskLists+0x68>)
 800762c:	601a      	str	r2, [r3, #0]
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	2000056c 	.word	0x2000056c
 800763c:	200005f8 	.word	0x200005f8
 8007640:	2000060c 	.word	0x2000060c
 8007644:	20000628 	.word	0x20000628
 8007648:	2000063c 	.word	0x2000063c
 800764c:	20000654 	.word	0x20000654
 8007650:	20000620 	.word	0x20000620
 8007654:	20000624 	.word	0x20000624

08007658 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800765e:	e019      	b.n	8007694 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007660:	f000 fab0 	bl	8007bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007664:	4b10      	ldr	r3, [pc, #64]	; (80076a8 <prvCheckTasksWaitingTermination+0x50>)
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3304      	adds	r3, #4
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe ff4c 	bl	800650e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007676:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <prvCheckTasksWaitingTermination+0x54>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3b01      	subs	r3, #1
 800767c:	4a0b      	ldr	r2, [pc, #44]	; (80076ac <prvCheckTasksWaitingTermination+0x54>)
 800767e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <prvCheckTasksWaitingTermination+0x58>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3b01      	subs	r3, #1
 8007686:	4a0a      	ldr	r2, [pc, #40]	; (80076b0 <prvCheckTasksWaitingTermination+0x58>)
 8007688:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800768a:	f000 facb 	bl	8007c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f810 	bl	80076b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007694:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <prvCheckTasksWaitingTermination+0x58>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e1      	bne.n	8007660 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800769c:	bf00      	nop
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	2000063c 	.word	0x2000063c
 80076ac:	20000668 	.word	0x20000668
 80076b0:	20000650 	.word	0x20000650

080076b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	334c      	adds	r3, #76	; 0x4c
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fdb7 	bl	8008234 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d108      	bne.n	80076e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fc23 	bl	8007f20 <vPortFree>
				vPortFree( pxTCB );
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fc20 	bl	8007f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076e0:	e018      	b.n	8007714 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d103      	bne.n	80076f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fc17 	bl	8007f20 <vPortFree>
	}
 80076f2:	e00f      	b.n	8007714 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d00a      	beq.n	8007714 <prvDeleteTCB+0x60>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	60fb      	str	r3, [r7, #12]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <prvDeleteTCB+0x5e>
	}
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007722:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <prvResetNextTaskUnblockTime+0x38>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d104      	bne.n	8007736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800772c:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <prvResetNextTaskUnblockTime+0x3c>)
 800772e:	f04f 32ff 	mov.w	r2, #4294967295
 8007732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007734:	e008      	b.n	8007748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007736:	4b07      	ldr	r3, [pc, #28]	; (8007754 <prvResetNextTaskUnblockTime+0x38>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4a04      	ldr	r2, [pc, #16]	; (8007758 <prvResetNextTaskUnblockTime+0x3c>)
 8007746:	6013      	str	r3, [r2, #0]
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	20000620 	.word	0x20000620
 8007758:	20000688 	.word	0x20000688

0800775c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007762:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <xTaskGetSchedulerState+0x34>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d102      	bne.n	8007770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800776a:	2301      	movs	r3, #1
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	e008      	b.n	8007782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007770:	4b08      	ldr	r3, [pc, #32]	; (8007794 <xTaskGetSchedulerState+0x38>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d102      	bne.n	800777e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007778:	2302      	movs	r3, #2
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	e001      	b.n	8007782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007782:	687b      	ldr	r3, [r7, #4]
	}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	20000674 	.word	0x20000674
 8007794:	20000690 	.word	0x20000690

08007798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d06e      	beq.n	800788c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077ae:	4b3a      	ldr	r3, [pc, #232]	; (8007898 <xTaskPriorityDisinherit+0x100>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d00a      	beq.n	80077ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	60fb      	str	r3, [r7, #12]
}
 80077ca:	bf00      	nop
 80077cc:	e7fe      	b.n	80077cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10a      	bne.n	80077ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60bb      	str	r3, [r7, #8]
}
 80077e8:	bf00      	nop
 80077ea:	e7fe      	b.n	80077ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f0:	1e5a      	subs	r2, r3, #1
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fe:	429a      	cmp	r2, r3
 8007800:	d044      	beq.n	800788c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007806:	2b00      	cmp	r3, #0
 8007808:	d140      	bne.n	800788c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	3304      	adds	r3, #4
 800780e:	4618      	mov	r0, r3
 8007810:	f7fe fe7d 	bl	800650e <uxListRemove>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d115      	bne.n	8007846 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781e:	491f      	ldr	r1, [pc, #124]	; (800789c <xTaskPriorityDisinherit+0x104>)
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	440b      	add	r3, r1
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xTaskPriorityDisinherit+0xae>
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	2201      	movs	r2, #1
 8007836:	fa02 f303 	lsl.w	r3, r2, r3
 800783a:	43da      	mvns	r2, r3
 800783c:	4b18      	ldr	r3, [pc, #96]	; (80078a0 <xTaskPriorityDisinherit+0x108>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4013      	ands	r3, r2
 8007842:	4a17      	ldr	r2, [pc, #92]	; (80078a0 <xTaskPriorityDisinherit+0x108>)
 8007844:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007852:	f1c3 0207 	rsb	r2, r3, #7
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	2201      	movs	r2, #1
 8007860:	409a      	lsls	r2, r3
 8007862:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <xTaskPriorityDisinherit+0x108>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4313      	orrs	r3, r2
 8007868:	4a0d      	ldr	r2, [pc, #52]	; (80078a0 <xTaskPriorityDisinherit+0x108>)
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4a08      	ldr	r2, [pc, #32]	; (800789c <xTaskPriorityDisinherit+0x104>)
 800787a:	441a      	add	r2, r3
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	3304      	adds	r3, #4
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f7fe fde6 	bl	8006454 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007888:	2301      	movs	r3, #1
 800788a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800788c:	697b      	ldr	r3, [r7, #20]
	}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000568 	.word	0x20000568
 800789c:	2000056c 	.word	0x2000056c
 80078a0:	20000670 	.word	0x20000670

080078a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078ae:	4b29      	ldr	r3, [pc, #164]	; (8007954 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078b4:	4b28      	ldr	r3, [pc, #160]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fe27 	bl	800650e <uxListRemove>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10b      	bne.n	80078de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80078c6:	4b24      	ldr	r3, [pc, #144]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078cc:	2201      	movs	r2, #1
 80078ce:	fa02 f303 	lsl.w	r3, r2, r3
 80078d2:	43da      	mvns	r2, r3
 80078d4:	4b21      	ldr	r3, [pc, #132]	; (800795c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4013      	ands	r3, r2
 80078da:	4a20      	ldr	r2, [pc, #128]	; (800795c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e4:	d10a      	bne.n	80078fc <prvAddCurrentTaskToDelayedList+0x58>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d007      	beq.n	80078fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ec:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4619      	mov	r1, r3
 80078f4:	481a      	ldr	r0, [pc, #104]	; (8007960 <prvAddCurrentTaskToDelayedList+0xbc>)
 80078f6:	f7fe fdad 	bl	8006454 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078fa:	e026      	b.n	800794a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4413      	add	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007904:	4b14      	ldr	r3, [pc, #80]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	429a      	cmp	r2, r3
 8007912:	d209      	bcs.n	8007928 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007914:	4b13      	ldr	r3, [pc, #76]	; (8007964 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3304      	adds	r3, #4
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7fe fdbb 	bl	800649c <vListInsert>
}
 8007926:	e010      	b.n	800794a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007928:	4b0f      	ldr	r3, [pc, #60]	; (8007968 <prvAddCurrentTaskToDelayedList+0xc4>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <prvAddCurrentTaskToDelayedList+0xb4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3304      	adds	r3, #4
 8007932:	4619      	mov	r1, r3
 8007934:	4610      	mov	r0, r2
 8007936:	f7fe fdb1 	bl	800649c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800793a:	4b0c      	ldr	r3, [pc, #48]	; (800796c <prvAddCurrentTaskToDelayedList+0xc8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	429a      	cmp	r2, r3
 8007942:	d202      	bcs.n	800794a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007944:	4a09      	ldr	r2, [pc, #36]	; (800796c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6013      	str	r3, [r2, #0]
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	2000066c 	.word	0x2000066c
 8007958:	20000568 	.word	0x20000568
 800795c:	20000670 	.word	0x20000670
 8007960:	20000654 	.word	0x20000654
 8007964:	20000624 	.word	0x20000624
 8007968:	20000620 	.word	0x20000620
 800796c:	20000688 	.word	0x20000688

08007970 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3b04      	subs	r3, #4
 8007980:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3b04      	subs	r3, #4
 800798e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f023 0201 	bic.w	r2, r3, #1
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3b04      	subs	r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079a0:	4a0c      	ldr	r2, [pc, #48]	; (80079d4 <pxPortInitialiseStack+0x64>)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3b14      	subs	r3, #20
 80079aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3b04      	subs	r3, #4
 80079b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f06f 0202 	mvn.w	r2, #2
 80079be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3b20      	subs	r3, #32
 80079c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079c6:	68fb      	ldr	r3, [r7, #12]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	080079d9 	.word	0x080079d9

080079d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079e2:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <prvTaskExitError+0x54>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ea:	d00a      	beq.n	8007a02 <prvTaskExitError+0x2a>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	60fb      	str	r3, [r7, #12]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <prvTaskExitError+0x28>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	60bb      	str	r3, [r7, #8]
}
 8007a14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a16:	bf00      	nop
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0fc      	beq.n	8007a18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a1e:	bf00      	nop
 8007a20:	bf00      	nop
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	20000020 	.word	0x20000020

08007a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <pxCurrentTCBConst2>)
 8007a32:	6819      	ldr	r1, [r3, #0]
 8007a34:	6808      	ldr	r0, [r1, #0]
 8007a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	f380 8809 	msr	PSP, r0
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f04f 0000 	mov.w	r0, #0
 8007a46:	f380 8811 	msr	BASEPRI, r0
 8007a4a:	4770      	bx	lr
 8007a4c:	f3af 8000 	nop.w

08007a50 <pxCurrentTCBConst2>:
 8007a50:	20000568 	.word	0x20000568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop

08007a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a58:	4808      	ldr	r0, [pc, #32]	; (8007a7c <prvPortStartFirstTask+0x24>)
 8007a5a:	6800      	ldr	r0, [r0, #0]
 8007a5c:	6800      	ldr	r0, [r0, #0]
 8007a5e:	f380 8808 	msr	MSP, r0
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f380 8814 	msr	CONTROL, r0
 8007a6a:	b662      	cpsie	i
 8007a6c:	b661      	cpsie	f
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	df00      	svc	0
 8007a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a7a:	bf00      	nop
 8007a7c:	e000ed08 	.word	0xe000ed08

08007a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a86:	4b46      	ldr	r3, [pc, #280]	; (8007ba0 <xPortStartScheduler+0x120>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a46      	ldr	r2, [pc, #280]	; (8007ba4 <xPortStartScheduler+0x124>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d10a      	bne.n	8007aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	613b      	str	r3, [r7, #16]
}
 8007aa2:	bf00      	nop
 8007aa4:	e7fe      	b.n	8007aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007aa6:	4b3e      	ldr	r3, [pc, #248]	; (8007ba0 <xPortStartScheduler+0x120>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a3f      	ldr	r2, [pc, #252]	; (8007ba8 <xPortStartScheduler+0x128>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d10a      	bne.n	8007ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	60fb      	str	r3, [r7, #12]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ac6:	4b39      	ldr	r3, [pc, #228]	; (8007bac <xPortStartScheduler+0x12c>)
 8007ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	22ff      	movs	r2, #255	; 0xff
 8007ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	4b31      	ldr	r3, [pc, #196]	; (8007bb0 <xPortStartScheduler+0x130>)
 8007aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007aee:	4b31      	ldr	r3, [pc, #196]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007af0:	2207      	movs	r2, #7
 8007af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007af4:	e009      	b.n	8007b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007af6:	4b2f      	ldr	r3, [pc, #188]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	4a2d      	ldr	r2, [pc, #180]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b00:	78fb      	ldrb	r3, [r7, #3]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b12:	2b80      	cmp	r3, #128	; 0x80
 8007b14:	d0ef      	beq.n	8007af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b16:	4b27      	ldr	r3, [pc, #156]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f1c3 0307 	rsb	r3, r3, #7
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d00a      	beq.n	8007b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	60bb      	str	r3, [r7, #8]
}
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b38:	4b1e      	ldr	r3, [pc, #120]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b42:	4b1c      	ldr	r3, [pc, #112]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b4a:	4a1a      	ldr	r2, [pc, #104]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b56:	4b18      	ldr	r3, [pc, #96]	; (8007bb8 <xPortStartScheduler+0x138>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a17      	ldr	r2, [pc, #92]	; (8007bb8 <xPortStartScheduler+0x138>)
 8007b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b62:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <xPortStartScheduler+0x138>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <xPortStartScheduler+0x138>)
 8007b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b6e:	f000 f8dd 	bl	8007d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b72:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <xPortStartScheduler+0x13c>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b78:	f000 f8fc 	bl	8007d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b7c:	4b10      	ldr	r3, [pc, #64]	; (8007bc0 <xPortStartScheduler+0x140>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a0f      	ldr	r2, [pc, #60]	; (8007bc0 <xPortStartScheduler+0x140>)
 8007b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b88:	f7ff ff66 	bl	8007a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b8c:	f7ff fba0 	bl	80072d0 <vTaskSwitchContext>
	prvTaskExitError();
 8007b90:	f7ff ff22 	bl	80079d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	e000ed00 	.word	0xe000ed00
 8007ba4:	410fc271 	.word	0x410fc271
 8007ba8:	410fc270 	.word	0x410fc270
 8007bac:	e000e400 	.word	0xe000e400
 8007bb0:	20000694 	.word	0x20000694
 8007bb4:	20000698 	.word	0x20000698
 8007bb8:	e000ed20 	.word	0xe000ed20
 8007bbc:	20000020 	.word	0x20000020
 8007bc0:	e000ef34 	.word	0xe000ef34

08007bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	607b      	str	r3, [r7, #4]
}
 8007bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bde:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <vPortEnterCritical+0x58>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3301      	adds	r3, #1
 8007be4:	4a0d      	ldr	r2, [pc, #52]	; (8007c1c <vPortEnterCritical+0x58>)
 8007be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007be8:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <vPortEnterCritical+0x58>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d10f      	bne.n	8007c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <vPortEnterCritical+0x5c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	603b      	str	r3, [r7, #0]
}
 8007c0c:	bf00      	nop
 8007c0e:	e7fe      	b.n	8007c0e <vPortEnterCritical+0x4a>
	}
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	20000020 	.word	0x20000020
 8007c20:	e000ed04 	.word	0xe000ed04

08007c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c2a:	4b12      	ldr	r3, [pc, #72]	; (8007c74 <vPortExitCritical+0x50>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10a      	bne.n	8007c48 <vPortExitCritical+0x24>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	607b      	str	r3, [r7, #4]
}
 8007c44:	bf00      	nop
 8007c46:	e7fe      	b.n	8007c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c48:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <vPortExitCritical+0x50>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	4a09      	ldr	r2, [pc, #36]	; (8007c74 <vPortExitCritical+0x50>)
 8007c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c52:	4b08      	ldr	r3, [pc, #32]	; (8007c74 <vPortExitCritical+0x50>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d105      	bne.n	8007c66 <vPortExitCritical+0x42>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20000020 	.word	0x20000020
	...

08007c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c80:	f3ef 8009 	mrs	r0, PSP
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	4b15      	ldr	r3, [pc, #84]	; (8007ce0 <pxCurrentTCBConst>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	f01e 0f10 	tst.w	lr, #16
 8007c90:	bf08      	it	eq
 8007c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9a:	6010      	str	r0, [r2, #0]
 8007c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ca4:	f380 8811 	msr	BASEPRI, r0
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f7ff fb0e 	bl	80072d0 <vTaskSwitchContext>
 8007cb4:	f04f 0000 	mov.w	r0, #0
 8007cb8:	f380 8811 	msr	BASEPRI, r0
 8007cbc:	bc09      	pop	{r0, r3}
 8007cbe:	6819      	ldr	r1, [r3, #0]
 8007cc0:	6808      	ldr	r0, [r1, #0]
 8007cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc6:	f01e 0f10 	tst.w	lr, #16
 8007cca:	bf08      	it	eq
 8007ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cd0:	f380 8809 	msr	PSP, r0
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	f3af 8000 	nop.w

08007ce0 <pxCurrentTCBConst>:
 8007ce0:	20000568 	.word	0x20000568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop

08007ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	607b      	str	r3, [r7, #4]
}
 8007d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d02:	f7ff fa2d 	bl	8007160 <xTaskIncrementTick>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d0c:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <SysTick_Handler+0x40>)
 8007d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	2300      	movs	r3, #0
 8007d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	f383 8811 	msr	BASEPRI, r3
}
 8007d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	e000ed04 	.word	0xe000ed04

08007d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <vPortSetupTimerInterrupt+0x34>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d36:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <vPortSetupTimerInterrupt+0x38>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <vPortSetupTimerInterrupt+0x3c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a0a      	ldr	r2, [pc, #40]	; (8007d6c <vPortSetupTimerInterrupt+0x40>)
 8007d42:	fba2 2303 	umull	r2, r3, r2, r3
 8007d46:	099b      	lsrs	r3, r3, #6
 8007d48:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <vPortSetupTimerInterrupt+0x44>)
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d4e:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <vPortSetupTimerInterrupt+0x34>)
 8007d50:	2207      	movs	r2, #7
 8007d52:	601a      	str	r2, [r3, #0]
}
 8007d54:	bf00      	nop
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	e000e010 	.word	0xe000e010
 8007d64:	e000e018 	.word	0xe000e018
 8007d68:	20000014 	.word	0x20000014
 8007d6c:	10624dd3 	.word	0x10624dd3
 8007d70:	e000e014 	.word	0xe000e014

08007d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d84 <vPortEnableVFP+0x10>
 8007d78:	6801      	ldr	r1, [r0, #0]
 8007d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d7e:	6001      	str	r1, [r0, #0]
 8007d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d82:	bf00      	nop
 8007d84:	e000ed88 	.word	0xe000ed88

08007d88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08a      	sub	sp, #40	; 0x28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d90:	2300      	movs	r3, #0
 8007d92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d94:	f7ff f93a 	bl	800700c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d98:	4b5b      	ldr	r3, [pc, #364]	; (8007f08 <pvPortMalloc+0x180>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007da0:	f000 f920 	bl	8007fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007da4:	4b59      	ldr	r3, [pc, #356]	; (8007f0c <pvPortMalloc+0x184>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f040 8093 	bne.w	8007ed8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01d      	beq.n	8007df4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007db8:	2208      	movs	r2, #8
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d014      	beq.n	8007df4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f023 0307 	bic.w	r3, r3, #7
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <pvPortMalloc+0x6c>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	617b      	str	r3, [r7, #20]
}
 8007df0:	bf00      	nop
 8007df2:	e7fe      	b.n	8007df2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d06e      	beq.n	8007ed8 <pvPortMalloc+0x150>
 8007dfa:	4b45      	ldr	r3, [pc, #276]	; (8007f10 <pvPortMalloc+0x188>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d869      	bhi.n	8007ed8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e04:	4b43      	ldr	r3, [pc, #268]	; (8007f14 <pvPortMalloc+0x18c>)
 8007e06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e08:	4b42      	ldr	r3, [pc, #264]	; (8007f14 <pvPortMalloc+0x18c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e0e:	e004      	b.n	8007e1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d903      	bls.n	8007e2c <pvPortMalloc+0xa4>
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1f1      	bne.n	8007e10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e2c:	4b36      	ldr	r3, [pc, #216]	; (8007f08 <pvPortMalloc+0x180>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d050      	beq.n	8007ed8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2208      	movs	r2, #8
 8007e3c:	4413      	add	r3, r2
 8007e3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	1ad2      	subs	r2, r2, r3
 8007e50:	2308      	movs	r3, #8
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d91f      	bls.n	8007e98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <pvPortMalloc+0xf8>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	613b      	str	r3, [r7, #16]
}
 8007e7c:	bf00      	nop
 8007e7e:	e7fe      	b.n	8007e7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	1ad2      	subs	r2, r2, r3
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e92:	69b8      	ldr	r0, [r7, #24]
 8007e94:	f000 f908 	bl	80080a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e98:	4b1d      	ldr	r3, [pc, #116]	; (8007f10 <pvPortMalloc+0x188>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	4a1b      	ldr	r2, [pc, #108]	; (8007f10 <pvPortMalloc+0x188>)
 8007ea4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ea6:	4b1a      	ldr	r3, [pc, #104]	; (8007f10 <pvPortMalloc+0x188>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <pvPortMalloc+0x190>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d203      	bcs.n	8007eba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007eb2:	4b17      	ldr	r3, [pc, #92]	; (8007f10 <pvPortMalloc+0x188>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <pvPortMalloc+0x190>)
 8007eb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <pvPortMalloc+0x184>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ece:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <pvPortMalloc+0x194>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	4a11      	ldr	r2, [pc, #68]	; (8007f1c <pvPortMalloc+0x194>)
 8007ed6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ed8:	f7ff f8a6 	bl	8007028 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <pvPortMalloc+0x174>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	60fb      	str	r3, [r7, #12]
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <pvPortMalloc+0x172>
	return pvReturn;
 8007efc:	69fb      	ldr	r3, [r7, #28]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3728      	adds	r7, #40	; 0x28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	200042a4 	.word	0x200042a4
 8007f0c:	200042b8 	.word	0x200042b8
 8007f10:	200042a8 	.word	0x200042a8
 8007f14:	2000429c 	.word	0x2000429c
 8007f18:	200042ac 	.word	0x200042ac
 8007f1c:	200042b0 	.word	0x200042b0

08007f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d04d      	beq.n	8007fce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f32:	2308      	movs	r3, #8
 8007f34:	425b      	negs	r3, r3
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	4413      	add	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <vPortFree+0xb8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <vPortFree+0x44>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	60fb      	str	r3, [r7, #12]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <vPortFree+0x62>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60bb      	str	r3, [r7, #8]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <vPortFree+0xb8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01e      	beq.n	8007fce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11a      	bne.n	8007fce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <vPortFree+0xb8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	401a      	ands	r2, r3
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fa8:	f7ff f830 	bl	800700c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <vPortFree+0xbc>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	4a09      	ldr	r2, [pc, #36]	; (8007fdc <vPortFree+0xbc>)
 8007fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fba:	6938      	ldr	r0, [r7, #16]
 8007fbc:	f000 f874 	bl	80080a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fc0:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <vPortFree+0xc0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	4a06      	ldr	r2, [pc, #24]	; (8007fe0 <vPortFree+0xc0>)
 8007fc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fca:	f7ff f82d 	bl	8007028 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fce:	bf00      	nop
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	200042b8 	.word	0x200042b8
 8007fdc:	200042a8 	.word	0x200042a8
 8007fe0:	200042b4 	.word	0x200042b4

08007fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ff0:	4b27      	ldr	r3, [pc, #156]	; (8008090 <prvHeapInit+0xac>)
 8007ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3307      	adds	r3, #7
 8008002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0307 	bic.w	r3, r3, #7
 800800a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <prvHeapInit+0xac>)
 8008014:	4413      	add	r3, r2
 8008016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800801c:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <prvHeapInit+0xb0>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008022:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <prvHeapInit+0xb0>)
 8008024:	2200      	movs	r2, #0
 8008026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008030:	2208      	movs	r2, #8
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0307 	bic.w	r3, r3, #7
 800803e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a15      	ldr	r2, [pc, #84]	; (8008098 <prvHeapInit+0xb4>)
 8008044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008046:	4b14      	ldr	r3, [pc, #80]	; (8008098 <prvHeapInit+0xb4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800804e:	4b12      	ldr	r3, [pc, #72]	; (8008098 <prvHeapInit+0xb4>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008064:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <prvHeapInit+0xb4>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	4a0a      	ldr	r2, [pc, #40]	; (800809c <prvHeapInit+0xb8>)
 8008072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <prvHeapInit+0xbc>)
 800807a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800807c:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <prvHeapInit+0xc0>)
 800807e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008082:	601a      	str	r2, [r3, #0]
}
 8008084:	bf00      	nop
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	2000069c 	.word	0x2000069c
 8008094:	2000429c 	.word	0x2000429c
 8008098:	200042a4 	.word	0x200042a4
 800809c:	200042ac 	.word	0x200042ac
 80080a0:	200042a8 	.word	0x200042a8
 80080a4:	200042b8 	.word	0x200042b8

080080a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080b0:	4b28      	ldr	r3, [pc, #160]	; (8008154 <prvInsertBlockIntoFreeList+0xac>)
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	e002      	b.n	80080bc <prvInsertBlockIntoFreeList+0x14>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d8f7      	bhi.n	80080b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	4413      	add	r3, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d108      	bne.n	80080ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	441a      	add	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	441a      	add	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d118      	bne.n	8008130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4b15      	ldr	r3, [pc, #84]	; (8008158 <prvInsertBlockIntoFreeList+0xb0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d00d      	beq.n	8008126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	441a      	add	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	e008      	b.n	8008138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008126:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <prvInsertBlockIntoFreeList+0xb0>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e003      	b.n	8008138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	d002      	beq.n	8008146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	2000429c 	.word	0x2000429c
 8008158:	200042a4 	.word	0x200042a4

0800815c <siprintf>:
 800815c:	b40e      	push	{r1, r2, r3}
 800815e:	b500      	push	{lr}
 8008160:	b09c      	sub	sp, #112	; 0x70
 8008162:	ab1d      	add	r3, sp, #116	; 0x74
 8008164:	9002      	str	r0, [sp, #8]
 8008166:	9006      	str	r0, [sp, #24]
 8008168:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800816c:	4809      	ldr	r0, [pc, #36]	; (8008194 <siprintf+0x38>)
 800816e:	9107      	str	r1, [sp, #28]
 8008170:	9104      	str	r1, [sp, #16]
 8008172:	4909      	ldr	r1, [pc, #36]	; (8008198 <siprintf+0x3c>)
 8008174:	f853 2b04 	ldr.w	r2, [r3], #4
 8008178:	9105      	str	r1, [sp, #20]
 800817a:	6800      	ldr	r0, [r0, #0]
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	a902      	add	r1, sp, #8
 8008180:	f000 fa3a 	bl	80085f8 <_svfiprintf_r>
 8008184:	9b02      	ldr	r3, [sp, #8]
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
 800818a:	b01c      	add	sp, #112	; 0x70
 800818c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008190:	b003      	add	sp, #12
 8008192:	4770      	bx	lr
 8008194:	20000070 	.word	0x20000070
 8008198:	ffff0208 	.word	0xffff0208

0800819c <siscanf>:
 800819c:	b40e      	push	{r1, r2, r3}
 800819e:	b510      	push	{r4, lr}
 80081a0:	b09f      	sub	sp, #124	; 0x7c
 80081a2:	ac21      	add	r4, sp, #132	; 0x84
 80081a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80081a8:	f854 2b04 	ldr.w	r2, [r4], #4
 80081ac:	9201      	str	r2, [sp, #4]
 80081ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 80081b2:	9004      	str	r0, [sp, #16]
 80081b4:	9008      	str	r0, [sp, #32]
 80081b6:	f7f8 f813 	bl	80001e0 <strlen>
 80081ba:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <siscanf+0x50>)
 80081bc:	9005      	str	r0, [sp, #20]
 80081be:	9009      	str	r0, [sp, #36]	; 0x24
 80081c0:	930d      	str	r3, [sp, #52]	; 0x34
 80081c2:	480b      	ldr	r0, [pc, #44]	; (80081f0 <siscanf+0x54>)
 80081c4:	9a01      	ldr	r2, [sp, #4]
 80081c6:	6800      	ldr	r0, [r0, #0]
 80081c8:	9403      	str	r4, [sp, #12]
 80081ca:	2300      	movs	r3, #0
 80081cc:	9311      	str	r3, [sp, #68]	; 0x44
 80081ce:	9316      	str	r3, [sp, #88]	; 0x58
 80081d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80081d8:	a904      	add	r1, sp, #16
 80081da:	4623      	mov	r3, r4
 80081dc:	f000 fb64 	bl	80088a8 <__ssvfiscanf_r>
 80081e0:	b01f      	add	sp, #124	; 0x7c
 80081e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e6:	b003      	add	sp, #12
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	080081f5 	.word	0x080081f5
 80081f0:	20000070 	.word	0x20000070

080081f4 <__seofread>:
 80081f4:	2000      	movs	r0, #0
 80081f6:	4770      	bx	lr

080081f8 <memset>:
 80081f8:	4402      	add	r2, r0
 80081fa:	4603      	mov	r3, r0
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d100      	bne.n	8008202 <memset+0xa>
 8008200:	4770      	bx	lr
 8008202:	f803 1b01 	strb.w	r1, [r3], #1
 8008206:	e7f9      	b.n	80081fc <memset+0x4>

08008208 <strstr>:
 8008208:	780a      	ldrb	r2, [r1, #0]
 800820a:	b570      	push	{r4, r5, r6, lr}
 800820c:	b96a      	cbnz	r2, 800822a <strstr+0x22>
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	429a      	cmp	r2, r3
 8008212:	d109      	bne.n	8008228 <strstr+0x20>
 8008214:	460c      	mov	r4, r1
 8008216:	4605      	mov	r5, r0
 8008218:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0f6      	beq.n	800820e <strstr+0x6>
 8008220:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008224:	429e      	cmp	r6, r3
 8008226:	d0f7      	beq.n	8008218 <strstr+0x10>
 8008228:	3001      	adds	r0, #1
 800822a:	7803      	ldrb	r3, [r0, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1ef      	bne.n	8008210 <strstr+0x8>
 8008230:	4618      	mov	r0, r3
 8008232:	e7ec      	b.n	800820e <strstr+0x6>

08008234 <_reclaim_reent>:
 8008234:	4b29      	ldr	r3, [pc, #164]	; (80082dc <_reclaim_reent+0xa8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4283      	cmp	r3, r0
 800823a:	b570      	push	{r4, r5, r6, lr}
 800823c:	4604      	mov	r4, r0
 800823e:	d04b      	beq.n	80082d8 <_reclaim_reent+0xa4>
 8008240:	69c3      	ldr	r3, [r0, #28]
 8008242:	b143      	cbz	r3, 8008256 <_reclaim_reent+0x22>
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d144      	bne.n	80082d4 <_reclaim_reent+0xa0>
 800824a:	69e3      	ldr	r3, [r4, #28]
 800824c:	6819      	ldr	r1, [r3, #0]
 800824e:	b111      	cbz	r1, 8008256 <_reclaim_reent+0x22>
 8008250:	4620      	mov	r0, r4
 8008252:	f000 f87f 	bl	8008354 <_free_r>
 8008256:	6961      	ldr	r1, [r4, #20]
 8008258:	b111      	cbz	r1, 8008260 <_reclaim_reent+0x2c>
 800825a:	4620      	mov	r0, r4
 800825c:	f000 f87a 	bl	8008354 <_free_r>
 8008260:	69e1      	ldr	r1, [r4, #28]
 8008262:	b111      	cbz	r1, 800826a <_reclaim_reent+0x36>
 8008264:	4620      	mov	r0, r4
 8008266:	f000 f875 	bl	8008354 <_free_r>
 800826a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800826c:	b111      	cbz	r1, 8008274 <_reclaim_reent+0x40>
 800826e:	4620      	mov	r0, r4
 8008270:	f000 f870 	bl	8008354 <_free_r>
 8008274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008276:	b111      	cbz	r1, 800827e <_reclaim_reent+0x4a>
 8008278:	4620      	mov	r0, r4
 800827a:	f000 f86b 	bl	8008354 <_free_r>
 800827e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008280:	b111      	cbz	r1, 8008288 <_reclaim_reent+0x54>
 8008282:	4620      	mov	r0, r4
 8008284:	f000 f866 	bl	8008354 <_free_r>
 8008288:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800828a:	b111      	cbz	r1, 8008292 <_reclaim_reent+0x5e>
 800828c:	4620      	mov	r0, r4
 800828e:	f000 f861 	bl	8008354 <_free_r>
 8008292:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008294:	b111      	cbz	r1, 800829c <_reclaim_reent+0x68>
 8008296:	4620      	mov	r0, r4
 8008298:	f000 f85c 	bl	8008354 <_free_r>
 800829c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800829e:	b111      	cbz	r1, 80082a6 <_reclaim_reent+0x72>
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 f857 	bl	8008354 <_free_r>
 80082a6:	6a23      	ldr	r3, [r4, #32]
 80082a8:	b1b3      	cbz	r3, 80082d8 <_reclaim_reent+0xa4>
 80082aa:	4620      	mov	r0, r4
 80082ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082b0:	4718      	bx	r3
 80082b2:	5949      	ldr	r1, [r1, r5]
 80082b4:	b941      	cbnz	r1, 80082c8 <_reclaim_reent+0x94>
 80082b6:	3504      	adds	r5, #4
 80082b8:	69e3      	ldr	r3, [r4, #28]
 80082ba:	2d80      	cmp	r5, #128	; 0x80
 80082bc:	68d9      	ldr	r1, [r3, #12]
 80082be:	d1f8      	bne.n	80082b2 <_reclaim_reent+0x7e>
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 f847 	bl	8008354 <_free_r>
 80082c6:	e7c0      	b.n	800824a <_reclaim_reent+0x16>
 80082c8:	680e      	ldr	r6, [r1, #0]
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 f842 	bl	8008354 <_free_r>
 80082d0:	4631      	mov	r1, r6
 80082d2:	e7ef      	b.n	80082b4 <_reclaim_reent+0x80>
 80082d4:	2500      	movs	r5, #0
 80082d6:	e7ef      	b.n	80082b8 <_reclaim_reent+0x84>
 80082d8:	bd70      	pop	{r4, r5, r6, pc}
 80082da:	bf00      	nop
 80082dc:	20000070 	.word	0x20000070

080082e0 <__errno>:
 80082e0:	4b01      	ldr	r3, [pc, #4]	; (80082e8 <__errno+0x8>)
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	20000070 	.word	0x20000070

080082ec <__libc_init_array>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	4d0d      	ldr	r5, [pc, #52]	; (8008324 <__libc_init_array+0x38>)
 80082f0:	4c0d      	ldr	r4, [pc, #52]	; (8008328 <__libc_init_array+0x3c>)
 80082f2:	1b64      	subs	r4, r4, r5
 80082f4:	10a4      	asrs	r4, r4, #2
 80082f6:	2600      	movs	r6, #0
 80082f8:	42a6      	cmp	r6, r4
 80082fa:	d109      	bne.n	8008310 <__libc_init_array+0x24>
 80082fc:	4d0b      	ldr	r5, [pc, #44]	; (800832c <__libc_init_array+0x40>)
 80082fe:	4c0c      	ldr	r4, [pc, #48]	; (8008330 <__libc_init_array+0x44>)
 8008300:	f001 f8f6 	bl	80094f0 <_init>
 8008304:	1b64      	subs	r4, r4, r5
 8008306:	10a4      	asrs	r4, r4, #2
 8008308:	2600      	movs	r6, #0
 800830a:	42a6      	cmp	r6, r4
 800830c:	d105      	bne.n	800831a <__libc_init_array+0x2e>
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	f855 3b04 	ldr.w	r3, [r5], #4
 8008314:	4798      	blx	r3
 8008316:	3601      	adds	r6, #1
 8008318:	e7ee      	b.n	80082f8 <__libc_init_array+0xc>
 800831a:	f855 3b04 	ldr.w	r3, [r5], #4
 800831e:	4798      	blx	r3
 8008320:	3601      	adds	r6, #1
 8008322:	e7f2      	b.n	800830a <__libc_init_array+0x1e>
 8008324:	080097c8 	.word	0x080097c8
 8008328:	080097c8 	.word	0x080097c8
 800832c:	080097c8 	.word	0x080097c8
 8008330:	080097cc 	.word	0x080097cc

08008334 <__retarget_lock_acquire_recursive>:
 8008334:	4770      	bx	lr

08008336 <__retarget_lock_release_recursive>:
 8008336:	4770      	bx	lr

08008338 <memcpy>:
 8008338:	440a      	add	r2, r1
 800833a:	4291      	cmp	r1, r2
 800833c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008340:	d100      	bne.n	8008344 <memcpy+0xc>
 8008342:	4770      	bx	lr
 8008344:	b510      	push	{r4, lr}
 8008346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800834a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800834e:	4291      	cmp	r1, r2
 8008350:	d1f9      	bne.n	8008346 <memcpy+0xe>
 8008352:	bd10      	pop	{r4, pc}

08008354 <_free_r>:
 8008354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008356:	2900      	cmp	r1, #0
 8008358:	d044      	beq.n	80083e4 <_free_r+0x90>
 800835a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800835e:	9001      	str	r0, [sp, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f1a1 0404 	sub.w	r4, r1, #4
 8008366:	bfb8      	it	lt
 8008368:	18e4      	addlt	r4, r4, r3
 800836a:	f000 f8df 	bl	800852c <__malloc_lock>
 800836e:	4a1e      	ldr	r2, [pc, #120]	; (80083e8 <_free_r+0x94>)
 8008370:	9801      	ldr	r0, [sp, #4]
 8008372:	6813      	ldr	r3, [r2, #0]
 8008374:	b933      	cbnz	r3, 8008384 <_free_r+0x30>
 8008376:	6063      	str	r3, [r4, #4]
 8008378:	6014      	str	r4, [r2, #0]
 800837a:	b003      	add	sp, #12
 800837c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008380:	f000 b8da 	b.w	8008538 <__malloc_unlock>
 8008384:	42a3      	cmp	r3, r4
 8008386:	d908      	bls.n	800839a <_free_r+0x46>
 8008388:	6825      	ldr	r5, [r4, #0]
 800838a:	1961      	adds	r1, r4, r5
 800838c:	428b      	cmp	r3, r1
 800838e:	bf01      	itttt	eq
 8008390:	6819      	ldreq	r1, [r3, #0]
 8008392:	685b      	ldreq	r3, [r3, #4]
 8008394:	1949      	addeq	r1, r1, r5
 8008396:	6021      	streq	r1, [r4, #0]
 8008398:	e7ed      	b.n	8008376 <_free_r+0x22>
 800839a:	461a      	mov	r2, r3
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	b10b      	cbz	r3, 80083a4 <_free_r+0x50>
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d9fa      	bls.n	800839a <_free_r+0x46>
 80083a4:	6811      	ldr	r1, [r2, #0]
 80083a6:	1855      	adds	r5, r2, r1
 80083a8:	42a5      	cmp	r5, r4
 80083aa:	d10b      	bne.n	80083c4 <_free_r+0x70>
 80083ac:	6824      	ldr	r4, [r4, #0]
 80083ae:	4421      	add	r1, r4
 80083b0:	1854      	adds	r4, r2, r1
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	6011      	str	r1, [r2, #0]
 80083b6:	d1e0      	bne.n	800837a <_free_r+0x26>
 80083b8:	681c      	ldr	r4, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	6053      	str	r3, [r2, #4]
 80083be:	440c      	add	r4, r1
 80083c0:	6014      	str	r4, [r2, #0]
 80083c2:	e7da      	b.n	800837a <_free_r+0x26>
 80083c4:	d902      	bls.n	80083cc <_free_r+0x78>
 80083c6:	230c      	movs	r3, #12
 80083c8:	6003      	str	r3, [r0, #0]
 80083ca:	e7d6      	b.n	800837a <_free_r+0x26>
 80083cc:	6825      	ldr	r5, [r4, #0]
 80083ce:	1961      	adds	r1, r4, r5
 80083d0:	428b      	cmp	r3, r1
 80083d2:	bf04      	itt	eq
 80083d4:	6819      	ldreq	r1, [r3, #0]
 80083d6:	685b      	ldreq	r3, [r3, #4]
 80083d8:	6063      	str	r3, [r4, #4]
 80083da:	bf04      	itt	eq
 80083dc:	1949      	addeq	r1, r1, r5
 80083de:	6021      	streq	r1, [r4, #0]
 80083e0:	6054      	str	r4, [r2, #4]
 80083e2:	e7ca      	b.n	800837a <_free_r+0x26>
 80083e4:	b003      	add	sp, #12
 80083e6:	bd30      	pop	{r4, r5, pc}
 80083e8:	200043fc 	.word	0x200043fc

080083ec <sbrk_aligned>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4e0e      	ldr	r6, [pc, #56]	; (8008428 <sbrk_aligned+0x3c>)
 80083f0:	460c      	mov	r4, r1
 80083f2:	6831      	ldr	r1, [r6, #0]
 80083f4:	4605      	mov	r5, r0
 80083f6:	b911      	cbnz	r1, 80083fe <sbrk_aligned+0x12>
 80083f8:	f000 ff3a 	bl	8009270 <_sbrk_r>
 80083fc:	6030      	str	r0, [r6, #0]
 80083fe:	4621      	mov	r1, r4
 8008400:	4628      	mov	r0, r5
 8008402:	f000 ff35 	bl	8009270 <_sbrk_r>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d00a      	beq.n	8008420 <sbrk_aligned+0x34>
 800840a:	1cc4      	adds	r4, r0, #3
 800840c:	f024 0403 	bic.w	r4, r4, #3
 8008410:	42a0      	cmp	r0, r4
 8008412:	d007      	beq.n	8008424 <sbrk_aligned+0x38>
 8008414:	1a21      	subs	r1, r4, r0
 8008416:	4628      	mov	r0, r5
 8008418:	f000 ff2a 	bl	8009270 <_sbrk_r>
 800841c:	3001      	adds	r0, #1
 800841e:	d101      	bne.n	8008424 <sbrk_aligned+0x38>
 8008420:	f04f 34ff 	mov.w	r4, #4294967295
 8008424:	4620      	mov	r0, r4
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	20004400 	.word	0x20004400

0800842c <_malloc_r>:
 800842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008430:	1ccd      	adds	r5, r1, #3
 8008432:	f025 0503 	bic.w	r5, r5, #3
 8008436:	3508      	adds	r5, #8
 8008438:	2d0c      	cmp	r5, #12
 800843a:	bf38      	it	cc
 800843c:	250c      	movcc	r5, #12
 800843e:	2d00      	cmp	r5, #0
 8008440:	4607      	mov	r7, r0
 8008442:	db01      	blt.n	8008448 <_malloc_r+0x1c>
 8008444:	42a9      	cmp	r1, r5
 8008446:	d905      	bls.n	8008454 <_malloc_r+0x28>
 8008448:	230c      	movs	r3, #12
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	2600      	movs	r6, #0
 800844e:	4630      	mov	r0, r6
 8008450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008454:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008528 <_malloc_r+0xfc>
 8008458:	f000 f868 	bl	800852c <__malloc_lock>
 800845c:	f8d8 3000 	ldr.w	r3, [r8]
 8008460:	461c      	mov	r4, r3
 8008462:	bb5c      	cbnz	r4, 80084bc <_malloc_r+0x90>
 8008464:	4629      	mov	r1, r5
 8008466:	4638      	mov	r0, r7
 8008468:	f7ff ffc0 	bl	80083ec <sbrk_aligned>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	4604      	mov	r4, r0
 8008470:	d155      	bne.n	800851e <_malloc_r+0xf2>
 8008472:	f8d8 4000 	ldr.w	r4, [r8]
 8008476:	4626      	mov	r6, r4
 8008478:	2e00      	cmp	r6, #0
 800847a:	d145      	bne.n	8008508 <_malloc_r+0xdc>
 800847c:	2c00      	cmp	r4, #0
 800847e:	d048      	beq.n	8008512 <_malloc_r+0xe6>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	4631      	mov	r1, r6
 8008484:	4638      	mov	r0, r7
 8008486:	eb04 0903 	add.w	r9, r4, r3
 800848a:	f000 fef1 	bl	8009270 <_sbrk_r>
 800848e:	4581      	cmp	r9, r0
 8008490:	d13f      	bne.n	8008512 <_malloc_r+0xe6>
 8008492:	6821      	ldr	r1, [r4, #0]
 8008494:	1a6d      	subs	r5, r5, r1
 8008496:	4629      	mov	r1, r5
 8008498:	4638      	mov	r0, r7
 800849a:	f7ff ffa7 	bl	80083ec <sbrk_aligned>
 800849e:	3001      	adds	r0, #1
 80084a0:	d037      	beq.n	8008512 <_malloc_r+0xe6>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	442b      	add	r3, r5
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	f8d8 3000 	ldr.w	r3, [r8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d038      	beq.n	8008522 <_malloc_r+0xf6>
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	42a2      	cmp	r2, r4
 80084b4:	d12b      	bne.n	800850e <_malloc_r+0xe2>
 80084b6:	2200      	movs	r2, #0
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	e00f      	b.n	80084dc <_malloc_r+0xb0>
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	1b52      	subs	r2, r2, r5
 80084c0:	d41f      	bmi.n	8008502 <_malloc_r+0xd6>
 80084c2:	2a0b      	cmp	r2, #11
 80084c4:	d917      	bls.n	80084f6 <_malloc_r+0xca>
 80084c6:	1961      	adds	r1, r4, r5
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	6025      	str	r5, [r4, #0]
 80084cc:	bf18      	it	ne
 80084ce:	6059      	strne	r1, [r3, #4]
 80084d0:	6863      	ldr	r3, [r4, #4]
 80084d2:	bf08      	it	eq
 80084d4:	f8c8 1000 	streq.w	r1, [r8]
 80084d8:	5162      	str	r2, [r4, r5]
 80084da:	604b      	str	r3, [r1, #4]
 80084dc:	4638      	mov	r0, r7
 80084de:	f104 060b 	add.w	r6, r4, #11
 80084e2:	f000 f829 	bl	8008538 <__malloc_unlock>
 80084e6:	f026 0607 	bic.w	r6, r6, #7
 80084ea:	1d23      	adds	r3, r4, #4
 80084ec:	1af2      	subs	r2, r6, r3
 80084ee:	d0ae      	beq.n	800844e <_malloc_r+0x22>
 80084f0:	1b9b      	subs	r3, r3, r6
 80084f2:	50a3      	str	r3, [r4, r2]
 80084f4:	e7ab      	b.n	800844e <_malloc_r+0x22>
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	6862      	ldr	r2, [r4, #4]
 80084fa:	d1dd      	bne.n	80084b8 <_malloc_r+0x8c>
 80084fc:	f8c8 2000 	str.w	r2, [r8]
 8008500:	e7ec      	b.n	80084dc <_malloc_r+0xb0>
 8008502:	4623      	mov	r3, r4
 8008504:	6864      	ldr	r4, [r4, #4]
 8008506:	e7ac      	b.n	8008462 <_malloc_r+0x36>
 8008508:	4634      	mov	r4, r6
 800850a:	6876      	ldr	r6, [r6, #4]
 800850c:	e7b4      	b.n	8008478 <_malloc_r+0x4c>
 800850e:	4613      	mov	r3, r2
 8008510:	e7cc      	b.n	80084ac <_malloc_r+0x80>
 8008512:	230c      	movs	r3, #12
 8008514:	603b      	str	r3, [r7, #0]
 8008516:	4638      	mov	r0, r7
 8008518:	f000 f80e 	bl	8008538 <__malloc_unlock>
 800851c:	e797      	b.n	800844e <_malloc_r+0x22>
 800851e:	6025      	str	r5, [r4, #0]
 8008520:	e7dc      	b.n	80084dc <_malloc_r+0xb0>
 8008522:	605b      	str	r3, [r3, #4]
 8008524:	deff      	udf	#255	; 0xff
 8008526:	bf00      	nop
 8008528:	200043fc 	.word	0x200043fc

0800852c <__malloc_lock>:
 800852c:	4801      	ldr	r0, [pc, #4]	; (8008534 <__malloc_lock+0x8>)
 800852e:	f7ff bf01 	b.w	8008334 <__retarget_lock_acquire_recursive>
 8008532:	bf00      	nop
 8008534:	200043f8 	.word	0x200043f8

08008538 <__malloc_unlock>:
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <__malloc_unlock+0x8>)
 800853a:	f7ff befc 	b.w	8008336 <__retarget_lock_release_recursive>
 800853e:	bf00      	nop
 8008540:	200043f8 	.word	0x200043f8

08008544 <__ssputs_r>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	688e      	ldr	r6, [r1, #8]
 800854a:	461f      	mov	r7, r3
 800854c:	42be      	cmp	r6, r7
 800854e:	680b      	ldr	r3, [r1, #0]
 8008550:	4682      	mov	sl, r0
 8008552:	460c      	mov	r4, r1
 8008554:	4690      	mov	r8, r2
 8008556:	d82c      	bhi.n	80085b2 <__ssputs_r+0x6e>
 8008558:	898a      	ldrh	r2, [r1, #12]
 800855a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800855e:	d026      	beq.n	80085ae <__ssputs_r+0x6a>
 8008560:	6965      	ldr	r5, [r4, #20]
 8008562:	6909      	ldr	r1, [r1, #16]
 8008564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008568:	eba3 0901 	sub.w	r9, r3, r1
 800856c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008570:	1c7b      	adds	r3, r7, #1
 8008572:	444b      	add	r3, r9
 8008574:	106d      	asrs	r5, r5, #1
 8008576:	429d      	cmp	r5, r3
 8008578:	bf38      	it	cc
 800857a:	461d      	movcc	r5, r3
 800857c:	0553      	lsls	r3, r2, #21
 800857e:	d527      	bpl.n	80085d0 <__ssputs_r+0x8c>
 8008580:	4629      	mov	r1, r5
 8008582:	f7ff ff53 	bl	800842c <_malloc_r>
 8008586:	4606      	mov	r6, r0
 8008588:	b360      	cbz	r0, 80085e4 <__ssputs_r+0xa0>
 800858a:	6921      	ldr	r1, [r4, #16]
 800858c:	464a      	mov	r2, r9
 800858e:	f7ff fed3 	bl	8008338 <memcpy>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800859c:	81a3      	strh	r3, [r4, #12]
 800859e:	6126      	str	r6, [r4, #16]
 80085a0:	6165      	str	r5, [r4, #20]
 80085a2:	444e      	add	r6, r9
 80085a4:	eba5 0509 	sub.w	r5, r5, r9
 80085a8:	6026      	str	r6, [r4, #0]
 80085aa:	60a5      	str	r5, [r4, #8]
 80085ac:	463e      	mov	r6, r7
 80085ae:	42be      	cmp	r6, r7
 80085b0:	d900      	bls.n	80085b4 <__ssputs_r+0x70>
 80085b2:	463e      	mov	r6, r7
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	4632      	mov	r2, r6
 80085b8:	4641      	mov	r1, r8
 80085ba:	f000 fe3e 	bl	800923a <memmove>
 80085be:	68a3      	ldr	r3, [r4, #8]
 80085c0:	1b9b      	subs	r3, r3, r6
 80085c2:	60a3      	str	r3, [r4, #8]
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	4433      	add	r3, r6
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	2000      	movs	r0, #0
 80085cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d0:	462a      	mov	r2, r5
 80085d2:	f000 fe5d 	bl	8009290 <_realloc_r>
 80085d6:	4606      	mov	r6, r0
 80085d8:	2800      	cmp	r0, #0
 80085da:	d1e0      	bne.n	800859e <__ssputs_r+0x5a>
 80085dc:	6921      	ldr	r1, [r4, #16]
 80085de:	4650      	mov	r0, sl
 80085e0:	f7ff feb8 	bl	8008354 <_free_r>
 80085e4:	230c      	movs	r3, #12
 80085e6:	f8ca 3000 	str.w	r3, [sl]
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f0:	81a3      	strh	r3, [r4, #12]
 80085f2:	f04f 30ff 	mov.w	r0, #4294967295
 80085f6:	e7e9      	b.n	80085cc <__ssputs_r+0x88>

080085f8 <_svfiprintf_r>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	4698      	mov	r8, r3
 80085fe:	898b      	ldrh	r3, [r1, #12]
 8008600:	061b      	lsls	r3, r3, #24
 8008602:	b09d      	sub	sp, #116	; 0x74
 8008604:	4607      	mov	r7, r0
 8008606:	460d      	mov	r5, r1
 8008608:	4614      	mov	r4, r2
 800860a:	d50e      	bpl.n	800862a <_svfiprintf_r+0x32>
 800860c:	690b      	ldr	r3, [r1, #16]
 800860e:	b963      	cbnz	r3, 800862a <_svfiprintf_r+0x32>
 8008610:	2140      	movs	r1, #64	; 0x40
 8008612:	f7ff ff0b 	bl	800842c <_malloc_r>
 8008616:	6028      	str	r0, [r5, #0]
 8008618:	6128      	str	r0, [r5, #16]
 800861a:	b920      	cbnz	r0, 8008626 <_svfiprintf_r+0x2e>
 800861c:	230c      	movs	r3, #12
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	e0d0      	b.n	80087c8 <_svfiprintf_r+0x1d0>
 8008626:	2340      	movs	r3, #64	; 0x40
 8008628:	616b      	str	r3, [r5, #20]
 800862a:	2300      	movs	r3, #0
 800862c:	9309      	str	r3, [sp, #36]	; 0x24
 800862e:	2320      	movs	r3, #32
 8008630:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008634:	f8cd 800c 	str.w	r8, [sp, #12]
 8008638:	2330      	movs	r3, #48	; 0x30
 800863a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80087e0 <_svfiprintf_r+0x1e8>
 800863e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008642:	f04f 0901 	mov.w	r9, #1
 8008646:	4623      	mov	r3, r4
 8008648:	469a      	mov	sl, r3
 800864a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800864e:	b10a      	cbz	r2, 8008654 <_svfiprintf_r+0x5c>
 8008650:	2a25      	cmp	r2, #37	; 0x25
 8008652:	d1f9      	bne.n	8008648 <_svfiprintf_r+0x50>
 8008654:	ebba 0b04 	subs.w	fp, sl, r4
 8008658:	d00b      	beq.n	8008672 <_svfiprintf_r+0x7a>
 800865a:	465b      	mov	r3, fp
 800865c:	4622      	mov	r2, r4
 800865e:	4629      	mov	r1, r5
 8008660:	4638      	mov	r0, r7
 8008662:	f7ff ff6f 	bl	8008544 <__ssputs_r>
 8008666:	3001      	adds	r0, #1
 8008668:	f000 80a9 	beq.w	80087be <_svfiprintf_r+0x1c6>
 800866c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800866e:	445a      	add	r2, fp
 8008670:	9209      	str	r2, [sp, #36]	; 0x24
 8008672:	f89a 3000 	ldrb.w	r3, [sl]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 80a1 	beq.w	80087be <_svfiprintf_r+0x1c6>
 800867c:	2300      	movs	r3, #0
 800867e:	f04f 32ff 	mov.w	r2, #4294967295
 8008682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008686:	f10a 0a01 	add.w	sl, sl, #1
 800868a:	9304      	str	r3, [sp, #16]
 800868c:	9307      	str	r3, [sp, #28]
 800868e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008692:	931a      	str	r3, [sp, #104]	; 0x68
 8008694:	4654      	mov	r4, sl
 8008696:	2205      	movs	r2, #5
 8008698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869c:	4850      	ldr	r0, [pc, #320]	; (80087e0 <_svfiprintf_r+0x1e8>)
 800869e:	f7f7 fda7 	bl	80001f0 <memchr>
 80086a2:	9a04      	ldr	r2, [sp, #16]
 80086a4:	b9d8      	cbnz	r0, 80086de <_svfiprintf_r+0xe6>
 80086a6:	06d0      	lsls	r0, r2, #27
 80086a8:	bf44      	itt	mi
 80086aa:	2320      	movmi	r3, #32
 80086ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b0:	0711      	lsls	r1, r2, #28
 80086b2:	bf44      	itt	mi
 80086b4:	232b      	movmi	r3, #43	; 0x2b
 80086b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ba:	f89a 3000 	ldrb.w	r3, [sl]
 80086be:	2b2a      	cmp	r3, #42	; 0x2a
 80086c0:	d015      	beq.n	80086ee <_svfiprintf_r+0xf6>
 80086c2:	9a07      	ldr	r2, [sp, #28]
 80086c4:	4654      	mov	r4, sl
 80086c6:	2000      	movs	r0, #0
 80086c8:	f04f 0c0a 	mov.w	ip, #10
 80086cc:	4621      	mov	r1, r4
 80086ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086d2:	3b30      	subs	r3, #48	; 0x30
 80086d4:	2b09      	cmp	r3, #9
 80086d6:	d94d      	bls.n	8008774 <_svfiprintf_r+0x17c>
 80086d8:	b1b0      	cbz	r0, 8008708 <_svfiprintf_r+0x110>
 80086da:	9207      	str	r2, [sp, #28]
 80086dc:	e014      	b.n	8008708 <_svfiprintf_r+0x110>
 80086de:	eba0 0308 	sub.w	r3, r0, r8
 80086e2:	fa09 f303 	lsl.w	r3, r9, r3
 80086e6:	4313      	orrs	r3, r2
 80086e8:	9304      	str	r3, [sp, #16]
 80086ea:	46a2      	mov	sl, r4
 80086ec:	e7d2      	b.n	8008694 <_svfiprintf_r+0x9c>
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	1d19      	adds	r1, r3, #4
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	9103      	str	r1, [sp, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bfbb      	ittet	lt
 80086fa:	425b      	neglt	r3, r3
 80086fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008700:	9307      	strge	r3, [sp, #28]
 8008702:	9307      	strlt	r3, [sp, #28]
 8008704:	bfb8      	it	lt
 8008706:	9204      	strlt	r2, [sp, #16]
 8008708:	7823      	ldrb	r3, [r4, #0]
 800870a:	2b2e      	cmp	r3, #46	; 0x2e
 800870c:	d10c      	bne.n	8008728 <_svfiprintf_r+0x130>
 800870e:	7863      	ldrb	r3, [r4, #1]
 8008710:	2b2a      	cmp	r3, #42	; 0x2a
 8008712:	d134      	bne.n	800877e <_svfiprintf_r+0x186>
 8008714:	9b03      	ldr	r3, [sp, #12]
 8008716:	1d1a      	adds	r2, r3, #4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	9203      	str	r2, [sp, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	bfb8      	it	lt
 8008720:	f04f 33ff 	movlt.w	r3, #4294967295
 8008724:	3402      	adds	r4, #2
 8008726:	9305      	str	r3, [sp, #20]
 8008728:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80087f0 <_svfiprintf_r+0x1f8>
 800872c:	7821      	ldrb	r1, [r4, #0]
 800872e:	2203      	movs	r2, #3
 8008730:	4650      	mov	r0, sl
 8008732:	f7f7 fd5d 	bl	80001f0 <memchr>
 8008736:	b138      	cbz	r0, 8008748 <_svfiprintf_r+0x150>
 8008738:	9b04      	ldr	r3, [sp, #16]
 800873a:	eba0 000a 	sub.w	r0, r0, sl
 800873e:	2240      	movs	r2, #64	; 0x40
 8008740:	4082      	lsls	r2, r0
 8008742:	4313      	orrs	r3, r2
 8008744:	3401      	adds	r4, #1
 8008746:	9304      	str	r3, [sp, #16]
 8008748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874c:	4825      	ldr	r0, [pc, #148]	; (80087e4 <_svfiprintf_r+0x1ec>)
 800874e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008752:	2206      	movs	r2, #6
 8008754:	f7f7 fd4c 	bl	80001f0 <memchr>
 8008758:	2800      	cmp	r0, #0
 800875a:	d038      	beq.n	80087ce <_svfiprintf_r+0x1d6>
 800875c:	4b22      	ldr	r3, [pc, #136]	; (80087e8 <_svfiprintf_r+0x1f0>)
 800875e:	bb1b      	cbnz	r3, 80087a8 <_svfiprintf_r+0x1b0>
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	3307      	adds	r3, #7
 8008764:	f023 0307 	bic.w	r3, r3, #7
 8008768:	3308      	adds	r3, #8
 800876a:	9303      	str	r3, [sp, #12]
 800876c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876e:	4433      	add	r3, r6
 8008770:	9309      	str	r3, [sp, #36]	; 0x24
 8008772:	e768      	b.n	8008646 <_svfiprintf_r+0x4e>
 8008774:	fb0c 3202 	mla	r2, ip, r2, r3
 8008778:	460c      	mov	r4, r1
 800877a:	2001      	movs	r0, #1
 800877c:	e7a6      	b.n	80086cc <_svfiprintf_r+0xd4>
 800877e:	2300      	movs	r3, #0
 8008780:	3401      	adds	r4, #1
 8008782:	9305      	str	r3, [sp, #20]
 8008784:	4619      	mov	r1, r3
 8008786:	f04f 0c0a 	mov.w	ip, #10
 800878a:	4620      	mov	r0, r4
 800878c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008790:	3a30      	subs	r2, #48	; 0x30
 8008792:	2a09      	cmp	r2, #9
 8008794:	d903      	bls.n	800879e <_svfiprintf_r+0x1a6>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0c6      	beq.n	8008728 <_svfiprintf_r+0x130>
 800879a:	9105      	str	r1, [sp, #20]
 800879c:	e7c4      	b.n	8008728 <_svfiprintf_r+0x130>
 800879e:	fb0c 2101 	mla	r1, ip, r1, r2
 80087a2:	4604      	mov	r4, r0
 80087a4:	2301      	movs	r3, #1
 80087a6:	e7f0      	b.n	800878a <_svfiprintf_r+0x192>
 80087a8:	ab03      	add	r3, sp, #12
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	462a      	mov	r2, r5
 80087ae:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <_svfiprintf_r+0x1f4>)
 80087b0:	a904      	add	r1, sp, #16
 80087b2:	4638      	mov	r0, r7
 80087b4:	f3af 8000 	nop.w
 80087b8:	1c42      	adds	r2, r0, #1
 80087ba:	4606      	mov	r6, r0
 80087bc:	d1d6      	bne.n	800876c <_svfiprintf_r+0x174>
 80087be:	89ab      	ldrh	r3, [r5, #12]
 80087c0:	065b      	lsls	r3, r3, #25
 80087c2:	f53f af2d 	bmi.w	8008620 <_svfiprintf_r+0x28>
 80087c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087c8:	b01d      	add	sp, #116	; 0x74
 80087ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ce:	ab03      	add	r3, sp, #12
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	462a      	mov	r2, r5
 80087d4:	4b05      	ldr	r3, [pc, #20]	; (80087ec <_svfiprintf_r+0x1f4>)
 80087d6:	a904      	add	r1, sp, #16
 80087d8:	4638      	mov	r0, r7
 80087da:	f000 fa4b 	bl	8008c74 <_printf_i>
 80087de:	e7eb      	b.n	80087b8 <_svfiprintf_r+0x1c0>
 80087e0:	08009670 	.word	0x08009670
 80087e4:	0800967a 	.word	0x0800967a
 80087e8:	00000000 	.word	0x00000000
 80087ec:	08008545 	.word	0x08008545
 80087f0:	08009676 	.word	0x08009676

080087f4 <_sungetc_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	1c4b      	adds	r3, r1, #1
 80087f8:	4614      	mov	r4, r2
 80087fa:	d103      	bne.n	8008804 <_sungetc_r+0x10>
 80087fc:	f04f 35ff 	mov.w	r5, #4294967295
 8008800:	4628      	mov	r0, r5
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	8993      	ldrh	r3, [r2, #12]
 8008806:	f023 0320 	bic.w	r3, r3, #32
 800880a:	8193      	strh	r3, [r2, #12]
 800880c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800880e:	6852      	ldr	r2, [r2, #4]
 8008810:	b2cd      	uxtb	r5, r1
 8008812:	b18b      	cbz	r3, 8008838 <_sungetc_r+0x44>
 8008814:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008816:	4293      	cmp	r3, r2
 8008818:	dd08      	ble.n	800882c <_sungetc_r+0x38>
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	1e5a      	subs	r2, r3, #1
 800881e:	6022      	str	r2, [r4, #0]
 8008820:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	3301      	adds	r3, #1
 8008828:	6063      	str	r3, [r4, #4]
 800882a:	e7e9      	b.n	8008800 <_sungetc_r+0xc>
 800882c:	4621      	mov	r1, r4
 800882e:	f000 fcca 	bl	80091c6 <__submore>
 8008832:	2800      	cmp	r0, #0
 8008834:	d0f1      	beq.n	800881a <_sungetc_r+0x26>
 8008836:	e7e1      	b.n	80087fc <_sungetc_r+0x8>
 8008838:	6921      	ldr	r1, [r4, #16]
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	b151      	cbz	r1, 8008854 <_sungetc_r+0x60>
 800883e:	4299      	cmp	r1, r3
 8008840:	d208      	bcs.n	8008854 <_sungetc_r+0x60>
 8008842:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008846:	42a9      	cmp	r1, r5
 8008848:	d104      	bne.n	8008854 <_sungetc_r+0x60>
 800884a:	3b01      	subs	r3, #1
 800884c:	3201      	adds	r2, #1
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	6062      	str	r2, [r4, #4]
 8008852:	e7d5      	b.n	8008800 <_sungetc_r+0xc>
 8008854:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800885c:	6363      	str	r3, [r4, #52]	; 0x34
 800885e:	2303      	movs	r3, #3
 8008860:	63a3      	str	r3, [r4, #56]	; 0x38
 8008862:	4623      	mov	r3, r4
 8008864:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	2301      	movs	r3, #1
 800886c:	e7dc      	b.n	8008828 <_sungetc_r+0x34>

0800886e <__ssrefill_r>:
 800886e:	b510      	push	{r4, lr}
 8008870:	460c      	mov	r4, r1
 8008872:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008874:	b169      	cbz	r1, 8008892 <__ssrefill_r+0x24>
 8008876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800887a:	4299      	cmp	r1, r3
 800887c:	d001      	beq.n	8008882 <__ssrefill_r+0x14>
 800887e:	f7ff fd69 	bl	8008354 <_free_r>
 8008882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008884:	6063      	str	r3, [r4, #4]
 8008886:	2000      	movs	r0, #0
 8008888:	6360      	str	r0, [r4, #52]	; 0x34
 800888a:	b113      	cbz	r3, 8008892 <__ssrefill_r+0x24>
 800888c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	bd10      	pop	{r4, pc}
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	2300      	movs	r3, #0
 8008898:	6063      	str	r3, [r4, #4]
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	f043 0320 	orr.w	r3, r3, #32
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295
 80088a6:	e7f3      	b.n	8008890 <__ssrefill_r+0x22>

080088a8 <__ssvfiscanf_r>:
 80088a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	460c      	mov	r4, r1
 80088ae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80088b2:	2100      	movs	r1, #0
 80088b4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80088b8:	49a6      	ldr	r1, [pc, #664]	; (8008b54 <__ssvfiscanf_r+0x2ac>)
 80088ba:	91a0      	str	r1, [sp, #640]	; 0x280
 80088bc:	f10d 0804 	add.w	r8, sp, #4
 80088c0:	49a5      	ldr	r1, [pc, #660]	; (8008b58 <__ssvfiscanf_r+0x2b0>)
 80088c2:	4fa6      	ldr	r7, [pc, #664]	; (8008b5c <__ssvfiscanf_r+0x2b4>)
 80088c4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008b60 <__ssvfiscanf_r+0x2b8>
 80088c8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80088cc:	4606      	mov	r6, r0
 80088ce:	91a1      	str	r1, [sp, #644]	; 0x284
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	7813      	ldrb	r3, [r2, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 815a 	beq.w	8008b8e <__ssvfiscanf_r+0x2e6>
 80088da:	5cf9      	ldrb	r1, [r7, r3]
 80088dc:	f011 0108 	ands.w	r1, r1, #8
 80088e0:	f102 0501 	add.w	r5, r2, #1
 80088e4:	d019      	beq.n	800891a <__ssvfiscanf_r+0x72>
 80088e6:	6863      	ldr	r3, [r4, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	dd0f      	ble.n	800890c <__ssvfiscanf_r+0x64>
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	5cba      	ldrb	r2, [r7, r2]
 80088f2:	0712      	lsls	r2, r2, #28
 80088f4:	d401      	bmi.n	80088fa <__ssvfiscanf_r+0x52>
 80088f6:	462a      	mov	r2, r5
 80088f8:	e7eb      	b.n	80088d2 <__ssvfiscanf_r+0x2a>
 80088fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80088fc:	3201      	adds	r2, #1
 80088fe:	9245      	str	r2, [sp, #276]	; 0x114
 8008900:	6862      	ldr	r2, [r4, #4]
 8008902:	3301      	adds	r3, #1
 8008904:	3a01      	subs	r2, #1
 8008906:	6062      	str	r2, [r4, #4]
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	e7ec      	b.n	80088e6 <__ssvfiscanf_r+0x3e>
 800890c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800890e:	4621      	mov	r1, r4
 8008910:	4630      	mov	r0, r6
 8008912:	4798      	blx	r3
 8008914:	2800      	cmp	r0, #0
 8008916:	d0e9      	beq.n	80088ec <__ssvfiscanf_r+0x44>
 8008918:	e7ed      	b.n	80088f6 <__ssvfiscanf_r+0x4e>
 800891a:	2b25      	cmp	r3, #37	; 0x25
 800891c:	d012      	beq.n	8008944 <__ssvfiscanf_r+0x9c>
 800891e:	469a      	mov	sl, r3
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f340 8091 	ble.w	8008a4a <__ssvfiscanf_r+0x1a2>
 8008928:	6822      	ldr	r2, [r4, #0]
 800892a:	7813      	ldrb	r3, [r2, #0]
 800892c:	4553      	cmp	r3, sl
 800892e:	f040 812e 	bne.w	8008b8e <__ssvfiscanf_r+0x2e6>
 8008932:	6863      	ldr	r3, [r4, #4]
 8008934:	3b01      	subs	r3, #1
 8008936:	6063      	str	r3, [r4, #4]
 8008938:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800893a:	3201      	adds	r2, #1
 800893c:	3301      	adds	r3, #1
 800893e:	6022      	str	r2, [r4, #0]
 8008940:	9345      	str	r3, [sp, #276]	; 0x114
 8008942:	e7d8      	b.n	80088f6 <__ssvfiscanf_r+0x4e>
 8008944:	9141      	str	r1, [sp, #260]	; 0x104
 8008946:	9143      	str	r1, [sp, #268]	; 0x10c
 8008948:	7853      	ldrb	r3, [r2, #1]
 800894a:	2b2a      	cmp	r3, #42	; 0x2a
 800894c:	bf02      	ittt	eq
 800894e:	2310      	moveq	r3, #16
 8008950:	1c95      	addeq	r5, r2, #2
 8008952:	9341      	streq	r3, [sp, #260]	; 0x104
 8008954:	220a      	movs	r2, #10
 8008956:	46aa      	mov	sl, r5
 8008958:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800895c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008960:	2b09      	cmp	r3, #9
 8008962:	d91c      	bls.n	800899e <__ssvfiscanf_r+0xf6>
 8008964:	487e      	ldr	r0, [pc, #504]	; (8008b60 <__ssvfiscanf_r+0x2b8>)
 8008966:	2203      	movs	r2, #3
 8008968:	f7f7 fc42 	bl	80001f0 <memchr>
 800896c:	b138      	cbz	r0, 800897e <__ssvfiscanf_r+0xd6>
 800896e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008970:	eba0 0009 	sub.w	r0, r0, r9
 8008974:	2301      	movs	r3, #1
 8008976:	4083      	lsls	r3, r0
 8008978:	4313      	orrs	r3, r2
 800897a:	9341      	str	r3, [sp, #260]	; 0x104
 800897c:	4655      	mov	r5, sl
 800897e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008982:	2b78      	cmp	r3, #120	; 0x78
 8008984:	d806      	bhi.n	8008994 <__ssvfiscanf_r+0xec>
 8008986:	2b57      	cmp	r3, #87	; 0x57
 8008988:	d810      	bhi.n	80089ac <__ssvfiscanf_r+0x104>
 800898a:	2b25      	cmp	r3, #37	; 0x25
 800898c:	d0c7      	beq.n	800891e <__ssvfiscanf_r+0x76>
 800898e:	d857      	bhi.n	8008a40 <__ssvfiscanf_r+0x198>
 8008990:	2b00      	cmp	r3, #0
 8008992:	d065      	beq.n	8008a60 <__ssvfiscanf_r+0x1b8>
 8008994:	2303      	movs	r3, #3
 8008996:	9347      	str	r3, [sp, #284]	; 0x11c
 8008998:	230a      	movs	r3, #10
 800899a:	9342      	str	r3, [sp, #264]	; 0x108
 800899c:	e076      	b.n	8008a8c <__ssvfiscanf_r+0x1e4>
 800899e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80089a0:	fb02 1103 	mla	r1, r2, r3, r1
 80089a4:	3930      	subs	r1, #48	; 0x30
 80089a6:	9143      	str	r1, [sp, #268]	; 0x10c
 80089a8:	4655      	mov	r5, sl
 80089aa:	e7d4      	b.n	8008956 <__ssvfiscanf_r+0xae>
 80089ac:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80089b0:	2a20      	cmp	r2, #32
 80089b2:	d8ef      	bhi.n	8008994 <__ssvfiscanf_r+0xec>
 80089b4:	a101      	add	r1, pc, #4	; (adr r1, 80089bc <__ssvfiscanf_r+0x114>)
 80089b6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80089ba:	bf00      	nop
 80089bc:	08008a6f 	.word	0x08008a6f
 80089c0:	08008995 	.word	0x08008995
 80089c4:	08008995 	.word	0x08008995
 80089c8:	08008acd 	.word	0x08008acd
 80089cc:	08008995 	.word	0x08008995
 80089d0:	08008995 	.word	0x08008995
 80089d4:	08008995 	.word	0x08008995
 80089d8:	08008995 	.word	0x08008995
 80089dc:	08008995 	.word	0x08008995
 80089e0:	08008995 	.word	0x08008995
 80089e4:	08008995 	.word	0x08008995
 80089e8:	08008ae3 	.word	0x08008ae3
 80089ec:	08008ac9 	.word	0x08008ac9
 80089f0:	08008a47 	.word	0x08008a47
 80089f4:	08008a47 	.word	0x08008a47
 80089f8:	08008a47 	.word	0x08008a47
 80089fc:	08008995 	.word	0x08008995
 8008a00:	08008a85 	.word	0x08008a85
 8008a04:	08008995 	.word	0x08008995
 8008a08:	08008995 	.word	0x08008995
 8008a0c:	08008995 	.word	0x08008995
 8008a10:	08008995 	.word	0x08008995
 8008a14:	08008af3 	.word	0x08008af3
 8008a18:	08008ac1 	.word	0x08008ac1
 8008a1c:	08008a67 	.word	0x08008a67
 8008a20:	08008995 	.word	0x08008995
 8008a24:	08008995 	.word	0x08008995
 8008a28:	08008aef 	.word	0x08008aef
 8008a2c:	08008995 	.word	0x08008995
 8008a30:	08008ac9 	.word	0x08008ac9
 8008a34:	08008995 	.word	0x08008995
 8008a38:	08008995 	.word	0x08008995
 8008a3c:	08008a6f 	.word	0x08008a6f
 8008a40:	3b45      	subs	r3, #69	; 0x45
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d8a6      	bhi.n	8008994 <__ssvfiscanf_r+0xec>
 8008a46:	2305      	movs	r3, #5
 8008a48:	e01f      	b.n	8008a8a <__ssvfiscanf_r+0x1e2>
 8008a4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4630      	mov	r0, r6
 8008a50:	4798      	blx	r3
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f43f af68 	beq.w	8008928 <__ssvfiscanf_r+0x80>
 8008a58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	f040 808d 	bne.w	8008b7a <__ssvfiscanf_r+0x2d2>
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
 8008a64:	e08f      	b.n	8008b86 <__ssvfiscanf_r+0x2de>
 8008a66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a68:	f042 0220 	orr.w	r2, r2, #32
 8008a6c:	9241      	str	r2, [sp, #260]	; 0x104
 8008a6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a74:	9241      	str	r2, [sp, #260]	; 0x104
 8008a76:	2210      	movs	r2, #16
 8008a78:	2b6f      	cmp	r3, #111	; 0x6f
 8008a7a:	9242      	str	r2, [sp, #264]	; 0x108
 8008a7c:	bf34      	ite	cc
 8008a7e:	2303      	movcc	r3, #3
 8008a80:	2304      	movcs	r3, #4
 8008a82:	e002      	b.n	8008a8a <__ssvfiscanf_r+0x1e2>
 8008a84:	2300      	movs	r3, #0
 8008a86:	9342      	str	r3, [sp, #264]	; 0x108
 8008a88:	2303      	movs	r3, #3
 8008a8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8008a8c:	6863      	ldr	r3, [r4, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	dd3d      	ble.n	8008b0e <__ssvfiscanf_r+0x266>
 8008a92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a94:	0659      	lsls	r1, r3, #25
 8008a96:	d404      	bmi.n	8008aa2 <__ssvfiscanf_r+0x1fa>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	781a      	ldrb	r2, [r3, #0]
 8008a9c:	5cba      	ldrb	r2, [r7, r2]
 8008a9e:	0712      	lsls	r2, r2, #28
 8008aa0:	d43c      	bmi.n	8008b1c <__ssvfiscanf_r+0x274>
 8008aa2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	dc4b      	bgt.n	8008b40 <__ssvfiscanf_r+0x298>
 8008aa8:	466b      	mov	r3, sp
 8008aaa:	4622      	mov	r2, r4
 8008aac:	a941      	add	r1, sp, #260	; 0x104
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f000 fa02 	bl	8008eb8 <_scanf_chars>
 8008ab4:	2801      	cmp	r0, #1
 8008ab6:	d06a      	beq.n	8008b8e <__ssvfiscanf_r+0x2e6>
 8008ab8:	2802      	cmp	r0, #2
 8008aba:	f47f af1c 	bne.w	80088f6 <__ssvfiscanf_r+0x4e>
 8008abe:	e7cb      	b.n	8008a58 <__ssvfiscanf_r+0x1b0>
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	9342      	str	r3, [sp, #264]	; 0x108
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	e7e0      	b.n	8008a8a <__ssvfiscanf_r+0x1e2>
 8008ac8:	220a      	movs	r2, #10
 8008aca:	e7d5      	b.n	8008a78 <__ssvfiscanf_r+0x1d0>
 8008acc:	4629      	mov	r1, r5
 8008ace:	4640      	mov	r0, r8
 8008ad0:	f000 fb40 	bl	8009154 <__sccl>
 8008ad4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ada:	9341      	str	r3, [sp, #260]	; 0x104
 8008adc:	4605      	mov	r5, r0
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e7d3      	b.n	8008a8a <__ssvfiscanf_r+0x1e2>
 8008ae2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ae8:	9341      	str	r3, [sp, #260]	; 0x104
 8008aea:	2300      	movs	r3, #0
 8008aec:	e7cd      	b.n	8008a8a <__ssvfiscanf_r+0x1e2>
 8008aee:	2302      	movs	r3, #2
 8008af0:	e7cb      	b.n	8008a8a <__ssvfiscanf_r+0x1e2>
 8008af2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008af4:	06c3      	lsls	r3, r0, #27
 8008af6:	f53f aefe 	bmi.w	80088f6 <__ssvfiscanf_r+0x4e>
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008afe:	1d19      	adds	r1, r3, #4
 8008b00:	9100      	str	r1, [sp, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	07c0      	lsls	r0, r0, #31
 8008b06:	bf4c      	ite	mi
 8008b08:	801a      	strhmi	r2, [r3, #0]
 8008b0a:	601a      	strpl	r2, [r3, #0]
 8008b0c:	e6f3      	b.n	80088f6 <__ssvfiscanf_r+0x4e>
 8008b0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b10:	4621      	mov	r1, r4
 8008b12:	4630      	mov	r0, r6
 8008b14:	4798      	blx	r3
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d0bb      	beq.n	8008a92 <__ssvfiscanf_r+0x1ea>
 8008b1a:	e79d      	b.n	8008a58 <__ssvfiscanf_r+0x1b0>
 8008b1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b1e:	3201      	adds	r2, #1
 8008b20:	9245      	str	r2, [sp, #276]	; 0x114
 8008b22:	6862      	ldr	r2, [r4, #4]
 8008b24:	3a01      	subs	r2, #1
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	6062      	str	r2, [r4, #4]
 8008b2a:	dd02      	ble.n	8008b32 <__ssvfiscanf_r+0x28a>
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	e7b2      	b.n	8008a98 <__ssvfiscanf_r+0x1f0>
 8008b32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b34:	4621      	mov	r1, r4
 8008b36:	4630      	mov	r0, r6
 8008b38:	4798      	blx	r3
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d0ac      	beq.n	8008a98 <__ssvfiscanf_r+0x1f0>
 8008b3e:	e78b      	b.n	8008a58 <__ssvfiscanf_r+0x1b0>
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	dc0f      	bgt.n	8008b64 <__ssvfiscanf_r+0x2bc>
 8008b44:	466b      	mov	r3, sp
 8008b46:	4622      	mov	r2, r4
 8008b48:	a941      	add	r1, sp, #260	; 0x104
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f000 fa0e 	bl	8008f6c <_scanf_i>
 8008b50:	e7b0      	b.n	8008ab4 <__ssvfiscanf_r+0x20c>
 8008b52:	bf00      	nop
 8008b54:	080087f5 	.word	0x080087f5
 8008b58:	0800886f 	.word	0x0800886f
 8008b5c:	080096bf 	.word	0x080096bf
 8008b60:	08009676 	.word	0x08009676
 8008b64:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <__ssvfiscanf_r+0x2ec>)
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f43f aec5 	beq.w	80088f6 <__ssvfiscanf_r+0x4e>
 8008b6c:	466b      	mov	r3, sp
 8008b6e:	4622      	mov	r2, r4
 8008b70:	a941      	add	r1, sp, #260	; 0x104
 8008b72:	4630      	mov	r0, r6
 8008b74:	f3af 8000 	nop.w
 8008b78:	e79c      	b.n	8008ab4 <__ssvfiscanf_r+0x20c>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008b80:	bf18      	it	ne
 8008b82:	f04f 30ff 	movne.w	r0, #4294967295
 8008b86:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008b90:	e7f9      	b.n	8008b86 <__ssvfiscanf_r+0x2de>
 8008b92:	bf00      	nop
 8008b94:	00000000 	.word	0x00000000

08008b98 <_printf_common>:
 8008b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	4699      	mov	r9, r3
 8008ba0:	688a      	ldr	r2, [r1, #8]
 8008ba2:	690b      	ldr	r3, [r1, #16]
 8008ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	bfb8      	it	lt
 8008bac:	4613      	movlt	r3, r2
 8008bae:	6033      	str	r3, [r6, #0]
 8008bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	b10a      	cbz	r2, 8008bbe <_printf_common+0x26>
 8008bba:	3301      	adds	r3, #1
 8008bbc:	6033      	str	r3, [r6, #0]
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	0699      	lsls	r1, r3, #26
 8008bc2:	bf42      	ittt	mi
 8008bc4:	6833      	ldrmi	r3, [r6, #0]
 8008bc6:	3302      	addmi	r3, #2
 8008bc8:	6033      	strmi	r3, [r6, #0]
 8008bca:	6825      	ldr	r5, [r4, #0]
 8008bcc:	f015 0506 	ands.w	r5, r5, #6
 8008bd0:	d106      	bne.n	8008be0 <_printf_common+0x48>
 8008bd2:	f104 0a19 	add.w	sl, r4, #25
 8008bd6:	68e3      	ldr	r3, [r4, #12]
 8008bd8:	6832      	ldr	r2, [r6, #0]
 8008bda:	1a9b      	subs	r3, r3, r2
 8008bdc:	42ab      	cmp	r3, r5
 8008bde:	dc26      	bgt.n	8008c2e <_printf_common+0x96>
 8008be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008be4:	1e13      	subs	r3, r2, #0
 8008be6:	6822      	ldr	r2, [r4, #0]
 8008be8:	bf18      	it	ne
 8008bea:	2301      	movne	r3, #1
 8008bec:	0692      	lsls	r2, r2, #26
 8008bee:	d42b      	bmi.n	8008c48 <_printf_common+0xb0>
 8008bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	47c0      	blx	r8
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d01e      	beq.n	8008c3c <_printf_common+0xa4>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	6922      	ldr	r2, [r4, #16]
 8008c02:	f003 0306 	and.w	r3, r3, #6
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	bf02      	ittt	eq
 8008c0a:	68e5      	ldreq	r5, [r4, #12]
 8008c0c:	6833      	ldreq	r3, [r6, #0]
 8008c0e:	1aed      	subeq	r5, r5, r3
 8008c10:	68a3      	ldr	r3, [r4, #8]
 8008c12:	bf0c      	ite	eq
 8008c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c18:	2500      	movne	r5, #0
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	bfc4      	itt	gt
 8008c1e:	1a9b      	subgt	r3, r3, r2
 8008c20:	18ed      	addgt	r5, r5, r3
 8008c22:	2600      	movs	r6, #0
 8008c24:	341a      	adds	r4, #26
 8008c26:	42b5      	cmp	r5, r6
 8008c28:	d11a      	bne.n	8008c60 <_printf_common+0xc8>
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	e008      	b.n	8008c40 <_printf_common+0xa8>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4652      	mov	r2, sl
 8008c32:	4649      	mov	r1, r9
 8008c34:	4638      	mov	r0, r7
 8008c36:	47c0      	blx	r8
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d103      	bne.n	8008c44 <_printf_common+0xac>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c44:	3501      	adds	r5, #1
 8008c46:	e7c6      	b.n	8008bd6 <_printf_common+0x3e>
 8008c48:	18e1      	adds	r1, r4, r3
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	2030      	movs	r0, #48	; 0x30
 8008c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c52:	4422      	add	r2, r4
 8008c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	e7c7      	b.n	8008bf0 <_printf_common+0x58>
 8008c60:	2301      	movs	r3, #1
 8008c62:	4622      	mov	r2, r4
 8008c64:	4649      	mov	r1, r9
 8008c66:	4638      	mov	r0, r7
 8008c68:	47c0      	blx	r8
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d0e6      	beq.n	8008c3c <_printf_common+0xa4>
 8008c6e:	3601      	adds	r6, #1
 8008c70:	e7d9      	b.n	8008c26 <_printf_common+0x8e>
	...

08008c74 <_printf_i>:
 8008c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c78:	7e0f      	ldrb	r7, [r1, #24]
 8008c7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c7c:	2f78      	cmp	r7, #120	; 0x78
 8008c7e:	4691      	mov	r9, r2
 8008c80:	4680      	mov	r8, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	469a      	mov	sl, r3
 8008c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c8a:	d807      	bhi.n	8008c9c <_printf_i+0x28>
 8008c8c:	2f62      	cmp	r7, #98	; 0x62
 8008c8e:	d80a      	bhi.n	8008ca6 <_printf_i+0x32>
 8008c90:	2f00      	cmp	r7, #0
 8008c92:	f000 80d4 	beq.w	8008e3e <_printf_i+0x1ca>
 8008c96:	2f58      	cmp	r7, #88	; 0x58
 8008c98:	f000 80c0 	beq.w	8008e1c <_printf_i+0x1a8>
 8008c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ca4:	e03a      	b.n	8008d1c <_printf_i+0xa8>
 8008ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008caa:	2b15      	cmp	r3, #21
 8008cac:	d8f6      	bhi.n	8008c9c <_printf_i+0x28>
 8008cae:	a101      	add	r1, pc, #4	; (adr r1, 8008cb4 <_printf_i+0x40>)
 8008cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cb4:	08008d0d 	.word	0x08008d0d
 8008cb8:	08008d21 	.word	0x08008d21
 8008cbc:	08008c9d 	.word	0x08008c9d
 8008cc0:	08008c9d 	.word	0x08008c9d
 8008cc4:	08008c9d 	.word	0x08008c9d
 8008cc8:	08008c9d 	.word	0x08008c9d
 8008ccc:	08008d21 	.word	0x08008d21
 8008cd0:	08008c9d 	.word	0x08008c9d
 8008cd4:	08008c9d 	.word	0x08008c9d
 8008cd8:	08008c9d 	.word	0x08008c9d
 8008cdc:	08008c9d 	.word	0x08008c9d
 8008ce0:	08008e25 	.word	0x08008e25
 8008ce4:	08008d4d 	.word	0x08008d4d
 8008ce8:	08008ddf 	.word	0x08008ddf
 8008cec:	08008c9d 	.word	0x08008c9d
 8008cf0:	08008c9d 	.word	0x08008c9d
 8008cf4:	08008e47 	.word	0x08008e47
 8008cf8:	08008c9d 	.word	0x08008c9d
 8008cfc:	08008d4d 	.word	0x08008d4d
 8008d00:	08008c9d 	.word	0x08008c9d
 8008d04:	08008c9d 	.word	0x08008c9d
 8008d08:	08008de7 	.word	0x08008de7
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	1d1a      	adds	r2, r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	602a      	str	r2, [r5, #0]
 8008d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e09f      	b.n	8008e60 <_printf_i+0x1ec>
 8008d20:	6820      	ldr	r0, [r4, #0]
 8008d22:	682b      	ldr	r3, [r5, #0]
 8008d24:	0607      	lsls	r7, r0, #24
 8008d26:	f103 0104 	add.w	r1, r3, #4
 8008d2a:	6029      	str	r1, [r5, #0]
 8008d2c:	d501      	bpl.n	8008d32 <_printf_i+0xbe>
 8008d2e:	681e      	ldr	r6, [r3, #0]
 8008d30:	e003      	b.n	8008d3a <_printf_i+0xc6>
 8008d32:	0646      	lsls	r6, r0, #25
 8008d34:	d5fb      	bpl.n	8008d2e <_printf_i+0xba>
 8008d36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d3a:	2e00      	cmp	r6, #0
 8008d3c:	da03      	bge.n	8008d46 <_printf_i+0xd2>
 8008d3e:	232d      	movs	r3, #45	; 0x2d
 8008d40:	4276      	negs	r6, r6
 8008d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d46:	485a      	ldr	r0, [pc, #360]	; (8008eb0 <_printf_i+0x23c>)
 8008d48:	230a      	movs	r3, #10
 8008d4a:	e012      	b.n	8008d72 <_printf_i+0xfe>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	6820      	ldr	r0, [r4, #0]
 8008d50:	1d19      	adds	r1, r3, #4
 8008d52:	6029      	str	r1, [r5, #0]
 8008d54:	0605      	lsls	r5, r0, #24
 8008d56:	d501      	bpl.n	8008d5c <_printf_i+0xe8>
 8008d58:	681e      	ldr	r6, [r3, #0]
 8008d5a:	e002      	b.n	8008d62 <_printf_i+0xee>
 8008d5c:	0641      	lsls	r1, r0, #25
 8008d5e:	d5fb      	bpl.n	8008d58 <_printf_i+0xe4>
 8008d60:	881e      	ldrh	r6, [r3, #0]
 8008d62:	4853      	ldr	r0, [pc, #332]	; (8008eb0 <_printf_i+0x23c>)
 8008d64:	2f6f      	cmp	r7, #111	; 0x6f
 8008d66:	bf0c      	ite	eq
 8008d68:	2308      	moveq	r3, #8
 8008d6a:	230a      	movne	r3, #10
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d72:	6865      	ldr	r5, [r4, #4]
 8008d74:	60a5      	str	r5, [r4, #8]
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	bfa2      	ittt	ge
 8008d7a:	6821      	ldrge	r1, [r4, #0]
 8008d7c:	f021 0104 	bicge.w	r1, r1, #4
 8008d80:	6021      	strge	r1, [r4, #0]
 8008d82:	b90e      	cbnz	r6, 8008d88 <_printf_i+0x114>
 8008d84:	2d00      	cmp	r5, #0
 8008d86:	d04b      	beq.n	8008e20 <_printf_i+0x1ac>
 8008d88:	4615      	mov	r5, r2
 8008d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d92:	5dc7      	ldrb	r7, [r0, r7]
 8008d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d98:	4637      	mov	r7, r6
 8008d9a:	42bb      	cmp	r3, r7
 8008d9c:	460e      	mov	r6, r1
 8008d9e:	d9f4      	bls.n	8008d8a <_printf_i+0x116>
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d10b      	bne.n	8008dbc <_printf_i+0x148>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	07de      	lsls	r6, r3, #31
 8008da8:	d508      	bpl.n	8008dbc <_printf_i+0x148>
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	6861      	ldr	r1, [r4, #4]
 8008dae:	4299      	cmp	r1, r3
 8008db0:	bfde      	ittt	le
 8008db2:	2330      	movle	r3, #48	; 0x30
 8008db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dbc:	1b52      	subs	r2, r2, r5
 8008dbe:	6122      	str	r2, [r4, #16]
 8008dc0:	f8cd a000 	str.w	sl, [sp]
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	aa03      	add	r2, sp, #12
 8008dc8:	4621      	mov	r1, r4
 8008dca:	4640      	mov	r0, r8
 8008dcc:	f7ff fee4 	bl	8008b98 <_printf_common>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d14a      	bne.n	8008e6a <_printf_i+0x1f6>
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	b004      	add	sp, #16
 8008dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	f043 0320 	orr.w	r3, r3, #32
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	4833      	ldr	r0, [pc, #204]	; (8008eb4 <_printf_i+0x240>)
 8008de8:	2778      	movs	r7, #120	; 0x78
 8008dea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	6829      	ldr	r1, [r5, #0]
 8008df2:	061f      	lsls	r7, r3, #24
 8008df4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008df8:	d402      	bmi.n	8008e00 <_printf_i+0x18c>
 8008dfa:	065f      	lsls	r7, r3, #25
 8008dfc:	bf48      	it	mi
 8008dfe:	b2b6      	uxthmi	r6, r6
 8008e00:	07df      	lsls	r7, r3, #31
 8008e02:	bf48      	it	mi
 8008e04:	f043 0320 	orrmi.w	r3, r3, #32
 8008e08:	6029      	str	r1, [r5, #0]
 8008e0a:	bf48      	it	mi
 8008e0c:	6023      	strmi	r3, [r4, #0]
 8008e0e:	b91e      	cbnz	r6, 8008e18 <_printf_i+0x1a4>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	f023 0320 	bic.w	r3, r3, #32
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	2310      	movs	r3, #16
 8008e1a:	e7a7      	b.n	8008d6c <_printf_i+0xf8>
 8008e1c:	4824      	ldr	r0, [pc, #144]	; (8008eb0 <_printf_i+0x23c>)
 8008e1e:	e7e4      	b.n	8008dea <_printf_i+0x176>
 8008e20:	4615      	mov	r5, r2
 8008e22:	e7bd      	b.n	8008da0 <_printf_i+0x12c>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	6826      	ldr	r6, [r4, #0]
 8008e28:	6961      	ldr	r1, [r4, #20]
 8008e2a:	1d18      	adds	r0, r3, #4
 8008e2c:	6028      	str	r0, [r5, #0]
 8008e2e:	0635      	lsls	r5, r6, #24
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	d501      	bpl.n	8008e38 <_printf_i+0x1c4>
 8008e34:	6019      	str	r1, [r3, #0]
 8008e36:	e002      	b.n	8008e3e <_printf_i+0x1ca>
 8008e38:	0670      	lsls	r0, r6, #25
 8008e3a:	d5fb      	bpl.n	8008e34 <_printf_i+0x1c0>
 8008e3c:	8019      	strh	r1, [r3, #0]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	6123      	str	r3, [r4, #16]
 8008e42:	4615      	mov	r5, r2
 8008e44:	e7bc      	b.n	8008dc0 <_printf_i+0x14c>
 8008e46:	682b      	ldr	r3, [r5, #0]
 8008e48:	1d1a      	adds	r2, r3, #4
 8008e4a:	602a      	str	r2, [r5, #0]
 8008e4c:	681d      	ldr	r5, [r3, #0]
 8008e4e:	6862      	ldr	r2, [r4, #4]
 8008e50:	2100      	movs	r1, #0
 8008e52:	4628      	mov	r0, r5
 8008e54:	f7f7 f9cc 	bl	80001f0 <memchr>
 8008e58:	b108      	cbz	r0, 8008e5e <_printf_i+0x1ea>
 8008e5a:	1b40      	subs	r0, r0, r5
 8008e5c:	6060      	str	r0, [r4, #4]
 8008e5e:	6863      	ldr	r3, [r4, #4]
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	2300      	movs	r3, #0
 8008e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e68:	e7aa      	b.n	8008dc0 <_printf_i+0x14c>
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	4649      	mov	r1, r9
 8008e70:	4640      	mov	r0, r8
 8008e72:	47d0      	blx	sl
 8008e74:	3001      	adds	r0, #1
 8008e76:	d0ad      	beq.n	8008dd4 <_printf_i+0x160>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	079b      	lsls	r3, r3, #30
 8008e7c:	d413      	bmi.n	8008ea6 <_printf_i+0x232>
 8008e7e:	68e0      	ldr	r0, [r4, #12]
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	4298      	cmp	r0, r3
 8008e84:	bfb8      	it	lt
 8008e86:	4618      	movlt	r0, r3
 8008e88:	e7a6      	b.n	8008dd8 <_printf_i+0x164>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4640      	mov	r0, r8
 8008e92:	47d0      	blx	sl
 8008e94:	3001      	adds	r0, #1
 8008e96:	d09d      	beq.n	8008dd4 <_printf_i+0x160>
 8008e98:	3501      	adds	r5, #1
 8008e9a:	68e3      	ldr	r3, [r4, #12]
 8008e9c:	9903      	ldr	r1, [sp, #12]
 8008e9e:	1a5b      	subs	r3, r3, r1
 8008ea0:	42ab      	cmp	r3, r5
 8008ea2:	dcf2      	bgt.n	8008e8a <_printf_i+0x216>
 8008ea4:	e7eb      	b.n	8008e7e <_printf_i+0x20a>
 8008ea6:	2500      	movs	r5, #0
 8008ea8:	f104 0619 	add.w	r6, r4, #25
 8008eac:	e7f5      	b.n	8008e9a <_printf_i+0x226>
 8008eae:	bf00      	nop
 8008eb0:	08009681 	.word	0x08009681
 8008eb4:	08009692 	.word	0x08009692

08008eb8 <_scanf_chars>:
 8008eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ebc:	4615      	mov	r5, r2
 8008ebe:	688a      	ldr	r2, [r1, #8]
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	b932      	cbnz	r2, 8008ed4 <_scanf_chars+0x1c>
 8008ec6:	698a      	ldr	r2, [r1, #24]
 8008ec8:	2a00      	cmp	r2, #0
 8008eca:	bf0c      	ite	eq
 8008ecc:	2201      	moveq	r2, #1
 8008ece:	f04f 32ff 	movne.w	r2, #4294967295
 8008ed2:	608a      	str	r2, [r1, #8]
 8008ed4:	6822      	ldr	r2, [r4, #0]
 8008ed6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008f68 <_scanf_chars+0xb0>
 8008eda:	06d1      	lsls	r1, r2, #27
 8008edc:	bf5f      	itttt	pl
 8008ede:	681a      	ldrpl	r2, [r3, #0]
 8008ee0:	1d11      	addpl	r1, r2, #4
 8008ee2:	6019      	strpl	r1, [r3, #0]
 8008ee4:	6816      	ldrpl	r6, [r2, #0]
 8008ee6:	2700      	movs	r7, #0
 8008ee8:	69a0      	ldr	r0, [r4, #24]
 8008eea:	b188      	cbz	r0, 8008f10 <_scanf_chars+0x58>
 8008eec:	2801      	cmp	r0, #1
 8008eee:	d107      	bne.n	8008f00 <_scanf_chars+0x48>
 8008ef0:	682a      	ldr	r2, [r5, #0]
 8008ef2:	7811      	ldrb	r1, [r2, #0]
 8008ef4:	6962      	ldr	r2, [r4, #20]
 8008ef6:	5c52      	ldrb	r2, [r2, r1]
 8008ef8:	b952      	cbnz	r2, 8008f10 <_scanf_chars+0x58>
 8008efa:	2f00      	cmp	r7, #0
 8008efc:	d031      	beq.n	8008f62 <_scanf_chars+0xaa>
 8008efe:	e022      	b.n	8008f46 <_scanf_chars+0x8e>
 8008f00:	2802      	cmp	r0, #2
 8008f02:	d120      	bne.n	8008f46 <_scanf_chars+0x8e>
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008f0c:	071b      	lsls	r3, r3, #28
 8008f0e:	d41a      	bmi.n	8008f46 <_scanf_chars+0x8e>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	06da      	lsls	r2, r3, #27
 8008f14:	bf5e      	ittt	pl
 8008f16:	682b      	ldrpl	r3, [r5, #0]
 8008f18:	781b      	ldrbpl	r3, [r3, #0]
 8008f1a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008f1e:	682a      	ldr	r2, [r5, #0]
 8008f20:	686b      	ldr	r3, [r5, #4]
 8008f22:	3201      	adds	r2, #1
 8008f24:	602a      	str	r2, [r5, #0]
 8008f26:	68a2      	ldr	r2, [r4, #8]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	3a01      	subs	r2, #1
 8008f2c:	606b      	str	r3, [r5, #4]
 8008f2e:	3701      	adds	r7, #1
 8008f30:	60a2      	str	r2, [r4, #8]
 8008f32:	b142      	cbz	r2, 8008f46 <_scanf_chars+0x8e>
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	dcd7      	bgt.n	8008ee8 <_scanf_chars+0x30>
 8008f38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	4640      	mov	r0, r8
 8008f40:	4798      	blx	r3
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d0d0      	beq.n	8008ee8 <_scanf_chars+0x30>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	f013 0310 	ands.w	r3, r3, #16
 8008f4c:	d105      	bne.n	8008f5a <_scanf_chars+0xa2>
 8008f4e:	68e2      	ldr	r2, [r4, #12]
 8008f50:	3201      	adds	r2, #1
 8008f52:	60e2      	str	r2, [r4, #12]
 8008f54:	69a2      	ldr	r2, [r4, #24]
 8008f56:	b102      	cbz	r2, 8008f5a <_scanf_chars+0xa2>
 8008f58:	7033      	strb	r3, [r6, #0]
 8008f5a:	6923      	ldr	r3, [r4, #16]
 8008f5c:	443b      	add	r3, r7
 8008f5e:	6123      	str	r3, [r4, #16]
 8008f60:	2000      	movs	r0, #0
 8008f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f66:	bf00      	nop
 8008f68:	080096bf 	.word	0x080096bf

08008f6c <_scanf_i>:
 8008f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	4698      	mov	r8, r3
 8008f72:	4b74      	ldr	r3, [pc, #464]	; (8009144 <_scanf_i+0x1d8>)
 8008f74:	460c      	mov	r4, r1
 8008f76:	4682      	mov	sl, r0
 8008f78:	4616      	mov	r6, r2
 8008f7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	ab03      	add	r3, sp, #12
 8008f82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008f86:	4b70      	ldr	r3, [pc, #448]	; (8009148 <_scanf_i+0x1dc>)
 8008f88:	69a1      	ldr	r1, [r4, #24]
 8008f8a:	4a70      	ldr	r2, [pc, #448]	; (800914c <_scanf_i+0x1e0>)
 8008f8c:	2903      	cmp	r1, #3
 8008f8e:	bf18      	it	ne
 8008f90:	461a      	movne	r2, r3
 8008f92:	68a3      	ldr	r3, [r4, #8]
 8008f94:	9201      	str	r2, [sp, #4]
 8008f96:	1e5a      	subs	r2, r3, #1
 8008f98:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f9c:	bf88      	it	hi
 8008f9e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008fa2:	4627      	mov	r7, r4
 8008fa4:	bf82      	ittt	hi
 8008fa6:	eb03 0905 	addhi.w	r9, r3, r5
 8008faa:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008fae:	60a3      	strhi	r3, [r4, #8]
 8008fb0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008fb4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008fb8:	bf98      	it	ls
 8008fba:	f04f 0900 	movls.w	r9, #0
 8008fbe:	6023      	str	r3, [r4, #0]
 8008fc0:	463d      	mov	r5, r7
 8008fc2:	f04f 0b00 	mov.w	fp, #0
 8008fc6:	6831      	ldr	r1, [r6, #0]
 8008fc8:	ab03      	add	r3, sp, #12
 8008fca:	7809      	ldrb	r1, [r1, #0]
 8008fcc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	f7f7 f90d 	bl	80001f0 <memchr>
 8008fd6:	b328      	cbz	r0, 8009024 <_scanf_i+0xb8>
 8008fd8:	f1bb 0f01 	cmp.w	fp, #1
 8008fdc:	d159      	bne.n	8009092 <_scanf_i+0x126>
 8008fde:	6862      	ldr	r2, [r4, #4]
 8008fe0:	b92a      	cbnz	r2, 8008fee <_scanf_i+0x82>
 8008fe2:	6822      	ldr	r2, [r4, #0]
 8008fe4:	2308      	movs	r3, #8
 8008fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fea:	6063      	str	r3, [r4, #4]
 8008fec:	6022      	str	r2, [r4, #0]
 8008fee:	6822      	ldr	r2, [r4, #0]
 8008ff0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008ff4:	6022      	str	r2, [r4, #0]
 8008ff6:	68a2      	ldr	r2, [r4, #8]
 8008ff8:	1e51      	subs	r1, r2, #1
 8008ffa:	60a1      	str	r1, [r4, #8]
 8008ffc:	b192      	cbz	r2, 8009024 <_scanf_i+0xb8>
 8008ffe:	6832      	ldr	r2, [r6, #0]
 8009000:	1c51      	adds	r1, r2, #1
 8009002:	6031      	str	r1, [r6, #0]
 8009004:	7812      	ldrb	r2, [r2, #0]
 8009006:	f805 2b01 	strb.w	r2, [r5], #1
 800900a:	6872      	ldr	r2, [r6, #4]
 800900c:	3a01      	subs	r2, #1
 800900e:	2a00      	cmp	r2, #0
 8009010:	6072      	str	r2, [r6, #4]
 8009012:	dc07      	bgt.n	8009024 <_scanf_i+0xb8>
 8009014:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009018:	4631      	mov	r1, r6
 800901a:	4650      	mov	r0, sl
 800901c:	4790      	blx	r2
 800901e:	2800      	cmp	r0, #0
 8009020:	f040 8085 	bne.w	800912e <_scanf_i+0x1c2>
 8009024:	f10b 0b01 	add.w	fp, fp, #1
 8009028:	f1bb 0f03 	cmp.w	fp, #3
 800902c:	d1cb      	bne.n	8008fc6 <_scanf_i+0x5a>
 800902e:	6863      	ldr	r3, [r4, #4]
 8009030:	b90b      	cbnz	r3, 8009036 <_scanf_i+0xca>
 8009032:	230a      	movs	r3, #10
 8009034:	6063      	str	r3, [r4, #4]
 8009036:	6863      	ldr	r3, [r4, #4]
 8009038:	4945      	ldr	r1, [pc, #276]	; (8009150 <_scanf_i+0x1e4>)
 800903a:	6960      	ldr	r0, [r4, #20]
 800903c:	1ac9      	subs	r1, r1, r3
 800903e:	f000 f889 	bl	8009154 <__sccl>
 8009042:	f04f 0b00 	mov.w	fp, #0
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	6822      	ldr	r2, [r4, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d03d      	beq.n	80090ca <_scanf_i+0x15e>
 800904e:	6831      	ldr	r1, [r6, #0]
 8009050:	6960      	ldr	r0, [r4, #20]
 8009052:	f891 c000 	ldrb.w	ip, [r1]
 8009056:	f810 000c 	ldrb.w	r0, [r0, ip]
 800905a:	2800      	cmp	r0, #0
 800905c:	d035      	beq.n	80090ca <_scanf_i+0x15e>
 800905e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009062:	d124      	bne.n	80090ae <_scanf_i+0x142>
 8009064:	0510      	lsls	r0, r2, #20
 8009066:	d522      	bpl.n	80090ae <_scanf_i+0x142>
 8009068:	f10b 0b01 	add.w	fp, fp, #1
 800906c:	f1b9 0f00 	cmp.w	r9, #0
 8009070:	d003      	beq.n	800907a <_scanf_i+0x10e>
 8009072:	3301      	adds	r3, #1
 8009074:	f109 39ff 	add.w	r9, r9, #4294967295
 8009078:	60a3      	str	r3, [r4, #8]
 800907a:	6873      	ldr	r3, [r6, #4]
 800907c:	3b01      	subs	r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	6073      	str	r3, [r6, #4]
 8009082:	dd1b      	ble.n	80090bc <_scanf_i+0x150>
 8009084:	6833      	ldr	r3, [r6, #0]
 8009086:	3301      	adds	r3, #1
 8009088:	6033      	str	r3, [r6, #0]
 800908a:	68a3      	ldr	r3, [r4, #8]
 800908c:	3b01      	subs	r3, #1
 800908e:	60a3      	str	r3, [r4, #8]
 8009090:	e7d9      	b.n	8009046 <_scanf_i+0xda>
 8009092:	f1bb 0f02 	cmp.w	fp, #2
 8009096:	d1ae      	bne.n	8008ff6 <_scanf_i+0x8a>
 8009098:	6822      	ldr	r2, [r4, #0]
 800909a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800909e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80090a2:	d1bf      	bne.n	8009024 <_scanf_i+0xb8>
 80090a4:	2310      	movs	r3, #16
 80090a6:	6063      	str	r3, [r4, #4]
 80090a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090ac:	e7a2      	b.n	8008ff4 <_scanf_i+0x88>
 80090ae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80090b2:	6022      	str	r2, [r4, #0]
 80090b4:	780b      	ldrb	r3, [r1, #0]
 80090b6:	f805 3b01 	strb.w	r3, [r5], #1
 80090ba:	e7de      	b.n	800907a <_scanf_i+0x10e>
 80090bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090c0:	4631      	mov	r1, r6
 80090c2:	4650      	mov	r0, sl
 80090c4:	4798      	blx	r3
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d0df      	beq.n	800908a <_scanf_i+0x11e>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	05d9      	lsls	r1, r3, #23
 80090ce:	d50d      	bpl.n	80090ec <_scanf_i+0x180>
 80090d0:	42bd      	cmp	r5, r7
 80090d2:	d909      	bls.n	80090e8 <_scanf_i+0x17c>
 80090d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80090d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090dc:	4632      	mov	r2, r6
 80090de:	4650      	mov	r0, sl
 80090e0:	4798      	blx	r3
 80090e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80090e6:	464d      	mov	r5, r9
 80090e8:	42bd      	cmp	r5, r7
 80090ea:	d028      	beq.n	800913e <_scanf_i+0x1d2>
 80090ec:	6822      	ldr	r2, [r4, #0]
 80090ee:	f012 0210 	ands.w	r2, r2, #16
 80090f2:	d113      	bne.n	800911c <_scanf_i+0x1b0>
 80090f4:	702a      	strb	r2, [r5, #0]
 80090f6:	6863      	ldr	r3, [r4, #4]
 80090f8:	9e01      	ldr	r6, [sp, #4]
 80090fa:	4639      	mov	r1, r7
 80090fc:	4650      	mov	r0, sl
 80090fe:	47b0      	blx	r6
 8009100:	f8d8 3000 	ldr.w	r3, [r8]
 8009104:	6821      	ldr	r1, [r4, #0]
 8009106:	1d1a      	adds	r2, r3, #4
 8009108:	f8c8 2000 	str.w	r2, [r8]
 800910c:	f011 0f20 	tst.w	r1, #32
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	d00f      	beq.n	8009134 <_scanf_i+0x1c8>
 8009114:	6018      	str	r0, [r3, #0]
 8009116:	68e3      	ldr	r3, [r4, #12]
 8009118:	3301      	adds	r3, #1
 800911a:	60e3      	str	r3, [r4, #12]
 800911c:	6923      	ldr	r3, [r4, #16]
 800911e:	1bed      	subs	r5, r5, r7
 8009120:	445d      	add	r5, fp
 8009122:	442b      	add	r3, r5
 8009124:	6123      	str	r3, [r4, #16]
 8009126:	2000      	movs	r0, #0
 8009128:	b007      	add	sp, #28
 800912a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912e:	f04f 0b00 	mov.w	fp, #0
 8009132:	e7ca      	b.n	80090ca <_scanf_i+0x15e>
 8009134:	07ca      	lsls	r2, r1, #31
 8009136:	bf4c      	ite	mi
 8009138:	8018      	strhmi	r0, [r3, #0]
 800913a:	6018      	strpl	r0, [r3, #0]
 800913c:	e7eb      	b.n	8009116 <_scanf_i+0x1aa>
 800913e:	2001      	movs	r0, #1
 8009140:	e7f2      	b.n	8009128 <_scanf_i+0x1bc>
 8009142:	bf00      	nop
 8009144:	0800964c 	.word	0x0800964c
 8009148:	080094dd 	.word	0x080094dd
 800914c:	080093f5 	.word	0x080093f5
 8009150:	080096b3 	.word	0x080096b3

08009154 <__sccl>:
 8009154:	b570      	push	{r4, r5, r6, lr}
 8009156:	780b      	ldrb	r3, [r1, #0]
 8009158:	4604      	mov	r4, r0
 800915a:	2b5e      	cmp	r3, #94	; 0x5e
 800915c:	bf0b      	itete	eq
 800915e:	784b      	ldrbeq	r3, [r1, #1]
 8009160:	1c4a      	addne	r2, r1, #1
 8009162:	1c8a      	addeq	r2, r1, #2
 8009164:	2100      	movne	r1, #0
 8009166:	bf08      	it	eq
 8009168:	2101      	moveq	r1, #1
 800916a:	3801      	subs	r0, #1
 800916c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009170:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009174:	42a8      	cmp	r0, r5
 8009176:	d1fb      	bne.n	8009170 <__sccl+0x1c>
 8009178:	b90b      	cbnz	r3, 800917e <__sccl+0x2a>
 800917a:	1e50      	subs	r0, r2, #1
 800917c:	bd70      	pop	{r4, r5, r6, pc}
 800917e:	f081 0101 	eor.w	r1, r1, #1
 8009182:	54e1      	strb	r1, [r4, r3]
 8009184:	4610      	mov	r0, r2
 8009186:	4602      	mov	r2, r0
 8009188:	f812 5b01 	ldrb.w	r5, [r2], #1
 800918c:	2d2d      	cmp	r5, #45	; 0x2d
 800918e:	d005      	beq.n	800919c <__sccl+0x48>
 8009190:	2d5d      	cmp	r5, #93	; 0x5d
 8009192:	d016      	beq.n	80091c2 <__sccl+0x6e>
 8009194:	2d00      	cmp	r5, #0
 8009196:	d0f1      	beq.n	800917c <__sccl+0x28>
 8009198:	462b      	mov	r3, r5
 800919a:	e7f2      	b.n	8009182 <__sccl+0x2e>
 800919c:	7846      	ldrb	r6, [r0, #1]
 800919e:	2e5d      	cmp	r6, #93	; 0x5d
 80091a0:	d0fa      	beq.n	8009198 <__sccl+0x44>
 80091a2:	42b3      	cmp	r3, r6
 80091a4:	dcf8      	bgt.n	8009198 <__sccl+0x44>
 80091a6:	3002      	adds	r0, #2
 80091a8:	461a      	mov	r2, r3
 80091aa:	3201      	adds	r2, #1
 80091ac:	4296      	cmp	r6, r2
 80091ae:	54a1      	strb	r1, [r4, r2]
 80091b0:	dcfb      	bgt.n	80091aa <__sccl+0x56>
 80091b2:	1af2      	subs	r2, r6, r3
 80091b4:	3a01      	subs	r2, #1
 80091b6:	1c5d      	adds	r5, r3, #1
 80091b8:	42b3      	cmp	r3, r6
 80091ba:	bfa8      	it	ge
 80091bc:	2200      	movge	r2, #0
 80091be:	18ab      	adds	r3, r5, r2
 80091c0:	e7e1      	b.n	8009186 <__sccl+0x32>
 80091c2:	4610      	mov	r0, r2
 80091c4:	e7da      	b.n	800917c <__sccl+0x28>

080091c6 <__submore>:
 80091c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ca:	460c      	mov	r4, r1
 80091cc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80091ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d2:	4299      	cmp	r1, r3
 80091d4:	d11d      	bne.n	8009212 <__submore+0x4c>
 80091d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091da:	f7ff f927 	bl	800842c <_malloc_r>
 80091de:	b918      	cbnz	r0, 80091e8 <__submore+0x22>
 80091e0:	f04f 30ff 	mov.w	r0, #4294967295
 80091e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80091ee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80091f2:	6360      	str	r0, [r4, #52]	; 0x34
 80091f4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80091f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80091fc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009200:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009204:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009208:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800920c:	6020      	str	r0, [r4, #0]
 800920e:	2000      	movs	r0, #0
 8009210:	e7e8      	b.n	80091e4 <__submore+0x1e>
 8009212:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009214:	0077      	lsls	r7, r6, #1
 8009216:	463a      	mov	r2, r7
 8009218:	f000 f83a 	bl	8009290 <_realloc_r>
 800921c:	4605      	mov	r5, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	d0de      	beq.n	80091e0 <__submore+0x1a>
 8009222:	eb00 0806 	add.w	r8, r0, r6
 8009226:	4601      	mov	r1, r0
 8009228:	4632      	mov	r2, r6
 800922a:	4640      	mov	r0, r8
 800922c:	f7ff f884 	bl	8008338 <memcpy>
 8009230:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009234:	f8c4 8000 	str.w	r8, [r4]
 8009238:	e7e9      	b.n	800920e <__submore+0x48>

0800923a <memmove>:
 800923a:	4288      	cmp	r0, r1
 800923c:	b510      	push	{r4, lr}
 800923e:	eb01 0402 	add.w	r4, r1, r2
 8009242:	d902      	bls.n	800924a <memmove+0x10>
 8009244:	4284      	cmp	r4, r0
 8009246:	4623      	mov	r3, r4
 8009248:	d807      	bhi.n	800925a <memmove+0x20>
 800924a:	1e43      	subs	r3, r0, #1
 800924c:	42a1      	cmp	r1, r4
 800924e:	d008      	beq.n	8009262 <memmove+0x28>
 8009250:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009254:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009258:	e7f8      	b.n	800924c <memmove+0x12>
 800925a:	4402      	add	r2, r0
 800925c:	4601      	mov	r1, r0
 800925e:	428a      	cmp	r2, r1
 8009260:	d100      	bne.n	8009264 <memmove+0x2a>
 8009262:	bd10      	pop	{r4, pc}
 8009264:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009268:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800926c:	e7f7      	b.n	800925e <memmove+0x24>
	...

08009270 <_sbrk_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4d06      	ldr	r5, [pc, #24]	; (800928c <_sbrk_r+0x1c>)
 8009274:	2300      	movs	r3, #0
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	602b      	str	r3, [r5, #0]
 800927c:	f7f8 fd54 	bl	8001d28 <_sbrk>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_sbrk_r+0x1a>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_sbrk_r+0x1a>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	200043f4 	.word	0x200043f4

08009290 <_realloc_r>:
 8009290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009294:	4680      	mov	r8, r0
 8009296:	4614      	mov	r4, r2
 8009298:	460e      	mov	r6, r1
 800929a:	b921      	cbnz	r1, 80092a6 <_realloc_r+0x16>
 800929c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092a0:	4611      	mov	r1, r2
 80092a2:	f7ff b8c3 	b.w	800842c <_malloc_r>
 80092a6:	b92a      	cbnz	r2, 80092b4 <_realloc_r+0x24>
 80092a8:	f7ff f854 	bl	8008354 <_free_r>
 80092ac:	4625      	mov	r5, r4
 80092ae:	4628      	mov	r0, r5
 80092b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b4:	f000 f914 	bl	80094e0 <_malloc_usable_size_r>
 80092b8:	4284      	cmp	r4, r0
 80092ba:	4607      	mov	r7, r0
 80092bc:	d802      	bhi.n	80092c4 <_realloc_r+0x34>
 80092be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092c2:	d812      	bhi.n	80092ea <_realloc_r+0x5a>
 80092c4:	4621      	mov	r1, r4
 80092c6:	4640      	mov	r0, r8
 80092c8:	f7ff f8b0 	bl	800842c <_malloc_r>
 80092cc:	4605      	mov	r5, r0
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d0ed      	beq.n	80092ae <_realloc_r+0x1e>
 80092d2:	42bc      	cmp	r4, r7
 80092d4:	4622      	mov	r2, r4
 80092d6:	4631      	mov	r1, r6
 80092d8:	bf28      	it	cs
 80092da:	463a      	movcs	r2, r7
 80092dc:	f7ff f82c 	bl	8008338 <memcpy>
 80092e0:	4631      	mov	r1, r6
 80092e2:	4640      	mov	r0, r8
 80092e4:	f7ff f836 	bl	8008354 <_free_r>
 80092e8:	e7e1      	b.n	80092ae <_realloc_r+0x1e>
 80092ea:	4635      	mov	r5, r6
 80092ec:	e7df      	b.n	80092ae <_realloc_r+0x1e>
	...

080092f0 <_strtol_l.constprop.0>:
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f6:	d001      	beq.n	80092fc <_strtol_l.constprop.0+0xc>
 80092f8:	2b24      	cmp	r3, #36	; 0x24
 80092fa:	d906      	bls.n	800930a <_strtol_l.constprop.0+0x1a>
 80092fc:	f7fe fff0 	bl	80082e0 <__errno>
 8009300:	2316      	movs	r3, #22
 8009302:	6003      	str	r3, [r0, #0]
 8009304:	2000      	movs	r0, #0
 8009306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800930a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80093f0 <_strtol_l.constprop.0+0x100>
 800930e:	460d      	mov	r5, r1
 8009310:	462e      	mov	r6, r5
 8009312:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009316:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800931a:	f017 0708 	ands.w	r7, r7, #8
 800931e:	d1f7      	bne.n	8009310 <_strtol_l.constprop.0+0x20>
 8009320:	2c2d      	cmp	r4, #45	; 0x2d
 8009322:	d132      	bne.n	800938a <_strtol_l.constprop.0+0x9a>
 8009324:	782c      	ldrb	r4, [r5, #0]
 8009326:	2701      	movs	r7, #1
 8009328:	1cb5      	adds	r5, r6, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d05b      	beq.n	80093e6 <_strtol_l.constprop.0+0xf6>
 800932e:	2b10      	cmp	r3, #16
 8009330:	d109      	bne.n	8009346 <_strtol_l.constprop.0+0x56>
 8009332:	2c30      	cmp	r4, #48	; 0x30
 8009334:	d107      	bne.n	8009346 <_strtol_l.constprop.0+0x56>
 8009336:	782c      	ldrb	r4, [r5, #0]
 8009338:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800933c:	2c58      	cmp	r4, #88	; 0x58
 800933e:	d14d      	bne.n	80093dc <_strtol_l.constprop.0+0xec>
 8009340:	786c      	ldrb	r4, [r5, #1]
 8009342:	2310      	movs	r3, #16
 8009344:	3502      	adds	r5, #2
 8009346:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800934a:	f108 38ff 	add.w	r8, r8, #4294967295
 800934e:	f04f 0e00 	mov.w	lr, #0
 8009352:	fbb8 f9f3 	udiv	r9, r8, r3
 8009356:	4676      	mov	r6, lr
 8009358:	fb03 8a19 	mls	sl, r3, r9, r8
 800935c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009360:	f1bc 0f09 	cmp.w	ip, #9
 8009364:	d816      	bhi.n	8009394 <_strtol_l.constprop.0+0xa4>
 8009366:	4664      	mov	r4, ip
 8009368:	42a3      	cmp	r3, r4
 800936a:	dd24      	ble.n	80093b6 <_strtol_l.constprop.0+0xc6>
 800936c:	f1be 3fff 	cmp.w	lr, #4294967295
 8009370:	d008      	beq.n	8009384 <_strtol_l.constprop.0+0x94>
 8009372:	45b1      	cmp	r9, r6
 8009374:	d31c      	bcc.n	80093b0 <_strtol_l.constprop.0+0xc0>
 8009376:	d101      	bne.n	800937c <_strtol_l.constprop.0+0x8c>
 8009378:	45a2      	cmp	sl, r4
 800937a:	db19      	blt.n	80093b0 <_strtol_l.constprop.0+0xc0>
 800937c:	fb06 4603 	mla	r6, r6, r3, r4
 8009380:	f04f 0e01 	mov.w	lr, #1
 8009384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009388:	e7e8      	b.n	800935c <_strtol_l.constprop.0+0x6c>
 800938a:	2c2b      	cmp	r4, #43	; 0x2b
 800938c:	bf04      	itt	eq
 800938e:	782c      	ldrbeq	r4, [r5, #0]
 8009390:	1cb5      	addeq	r5, r6, #2
 8009392:	e7ca      	b.n	800932a <_strtol_l.constprop.0+0x3a>
 8009394:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009398:	f1bc 0f19 	cmp.w	ip, #25
 800939c:	d801      	bhi.n	80093a2 <_strtol_l.constprop.0+0xb2>
 800939e:	3c37      	subs	r4, #55	; 0x37
 80093a0:	e7e2      	b.n	8009368 <_strtol_l.constprop.0+0x78>
 80093a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80093a6:	f1bc 0f19 	cmp.w	ip, #25
 80093aa:	d804      	bhi.n	80093b6 <_strtol_l.constprop.0+0xc6>
 80093ac:	3c57      	subs	r4, #87	; 0x57
 80093ae:	e7db      	b.n	8009368 <_strtol_l.constprop.0+0x78>
 80093b0:	f04f 3eff 	mov.w	lr, #4294967295
 80093b4:	e7e6      	b.n	8009384 <_strtol_l.constprop.0+0x94>
 80093b6:	f1be 3fff 	cmp.w	lr, #4294967295
 80093ba:	d105      	bne.n	80093c8 <_strtol_l.constprop.0+0xd8>
 80093bc:	2322      	movs	r3, #34	; 0x22
 80093be:	6003      	str	r3, [r0, #0]
 80093c0:	4646      	mov	r6, r8
 80093c2:	b942      	cbnz	r2, 80093d6 <_strtol_l.constprop.0+0xe6>
 80093c4:	4630      	mov	r0, r6
 80093c6:	e79e      	b.n	8009306 <_strtol_l.constprop.0+0x16>
 80093c8:	b107      	cbz	r7, 80093cc <_strtol_l.constprop.0+0xdc>
 80093ca:	4276      	negs	r6, r6
 80093cc:	2a00      	cmp	r2, #0
 80093ce:	d0f9      	beq.n	80093c4 <_strtol_l.constprop.0+0xd4>
 80093d0:	f1be 0f00 	cmp.w	lr, #0
 80093d4:	d000      	beq.n	80093d8 <_strtol_l.constprop.0+0xe8>
 80093d6:	1e69      	subs	r1, r5, #1
 80093d8:	6011      	str	r1, [r2, #0]
 80093da:	e7f3      	b.n	80093c4 <_strtol_l.constprop.0+0xd4>
 80093dc:	2430      	movs	r4, #48	; 0x30
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1b1      	bne.n	8009346 <_strtol_l.constprop.0+0x56>
 80093e2:	2308      	movs	r3, #8
 80093e4:	e7af      	b.n	8009346 <_strtol_l.constprop.0+0x56>
 80093e6:	2c30      	cmp	r4, #48	; 0x30
 80093e8:	d0a5      	beq.n	8009336 <_strtol_l.constprop.0+0x46>
 80093ea:	230a      	movs	r3, #10
 80093ec:	e7ab      	b.n	8009346 <_strtol_l.constprop.0+0x56>
 80093ee:	bf00      	nop
 80093f0:	080096bf 	.word	0x080096bf

080093f4 <_strtol_r>:
 80093f4:	f7ff bf7c 	b.w	80092f0 <_strtol_l.constprop.0>

080093f8 <_strtoul_l.constprop.0>:
 80093f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093fc:	4f36      	ldr	r7, [pc, #216]	; (80094d8 <_strtoul_l.constprop.0+0xe0>)
 80093fe:	4686      	mov	lr, r0
 8009400:	460d      	mov	r5, r1
 8009402:	4628      	mov	r0, r5
 8009404:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009408:	5d3e      	ldrb	r6, [r7, r4]
 800940a:	f016 0608 	ands.w	r6, r6, #8
 800940e:	d1f8      	bne.n	8009402 <_strtoul_l.constprop.0+0xa>
 8009410:	2c2d      	cmp	r4, #45	; 0x2d
 8009412:	d130      	bne.n	8009476 <_strtoul_l.constprop.0+0x7e>
 8009414:	782c      	ldrb	r4, [r5, #0]
 8009416:	2601      	movs	r6, #1
 8009418:	1c85      	adds	r5, r0, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d057      	beq.n	80094ce <_strtoul_l.constprop.0+0xd6>
 800941e:	2b10      	cmp	r3, #16
 8009420:	d109      	bne.n	8009436 <_strtoul_l.constprop.0+0x3e>
 8009422:	2c30      	cmp	r4, #48	; 0x30
 8009424:	d107      	bne.n	8009436 <_strtoul_l.constprop.0+0x3e>
 8009426:	7828      	ldrb	r0, [r5, #0]
 8009428:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800942c:	2858      	cmp	r0, #88	; 0x58
 800942e:	d149      	bne.n	80094c4 <_strtoul_l.constprop.0+0xcc>
 8009430:	786c      	ldrb	r4, [r5, #1]
 8009432:	2310      	movs	r3, #16
 8009434:	3502      	adds	r5, #2
 8009436:	f04f 38ff 	mov.w	r8, #4294967295
 800943a:	2700      	movs	r7, #0
 800943c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009440:	fb03 f908 	mul.w	r9, r3, r8
 8009444:	ea6f 0909 	mvn.w	r9, r9
 8009448:	4638      	mov	r0, r7
 800944a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800944e:	f1bc 0f09 	cmp.w	ip, #9
 8009452:	d815      	bhi.n	8009480 <_strtoul_l.constprop.0+0x88>
 8009454:	4664      	mov	r4, ip
 8009456:	42a3      	cmp	r3, r4
 8009458:	dd23      	ble.n	80094a2 <_strtoul_l.constprop.0+0xaa>
 800945a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800945e:	d007      	beq.n	8009470 <_strtoul_l.constprop.0+0x78>
 8009460:	4580      	cmp	r8, r0
 8009462:	d31b      	bcc.n	800949c <_strtoul_l.constprop.0+0xa4>
 8009464:	d101      	bne.n	800946a <_strtoul_l.constprop.0+0x72>
 8009466:	45a1      	cmp	r9, r4
 8009468:	db18      	blt.n	800949c <_strtoul_l.constprop.0+0xa4>
 800946a:	fb00 4003 	mla	r0, r0, r3, r4
 800946e:	2701      	movs	r7, #1
 8009470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009474:	e7e9      	b.n	800944a <_strtoul_l.constprop.0+0x52>
 8009476:	2c2b      	cmp	r4, #43	; 0x2b
 8009478:	bf04      	itt	eq
 800947a:	782c      	ldrbeq	r4, [r5, #0]
 800947c:	1c85      	addeq	r5, r0, #2
 800947e:	e7cc      	b.n	800941a <_strtoul_l.constprop.0+0x22>
 8009480:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009484:	f1bc 0f19 	cmp.w	ip, #25
 8009488:	d801      	bhi.n	800948e <_strtoul_l.constprop.0+0x96>
 800948a:	3c37      	subs	r4, #55	; 0x37
 800948c:	e7e3      	b.n	8009456 <_strtoul_l.constprop.0+0x5e>
 800948e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009492:	f1bc 0f19 	cmp.w	ip, #25
 8009496:	d804      	bhi.n	80094a2 <_strtoul_l.constprop.0+0xaa>
 8009498:	3c57      	subs	r4, #87	; 0x57
 800949a:	e7dc      	b.n	8009456 <_strtoul_l.constprop.0+0x5e>
 800949c:	f04f 37ff 	mov.w	r7, #4294967295
 80094a0:	e7e6      	b.n	8009470 <_strtoul_l.constprop.0+0x78>
 80094a2:	1c7b      	adds	r3, r7, #1
 80094a4:	d106      	bne.n	80094b4 <_strtoul_l.constprop.0+0xbc>
 80094a6:	2322      	movs	r3, #34	; 0x22
 80094a8:	f8ce 3000 	str.w	r3, [lr]
 80094ac:	4638      	mov	r0, r7
 80094ae:	b932      	cbnz	r2, 80094be <_strtoul_l.constprop.0+0xc6>
 80094b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094b4:	b106      	cbz	r6, 80094b8 <_strtoul_l.constprop.0+0xc0>
 80094b6:	4240      	negs	r0, r0
 80094b8:	2a00      	cmp	r2, #0
 80094ba:	d0f9      	beq.n	80094b0 <_strtoul_l.constprop.0+0xb8>
 80094bc:	b107      	cbz	r7, 80094c0 <_strtoul_l.constprop.0+0xc8>
 80094be:	1e69      	subs	r1, r5, #1
 80094c0:	6011      	str	r1, [r2, #0]
 80094c2:	e7f5      	b.n	80094b0 <_strtoul_l.constprop.0+0xb8>
 80094c4:	2430      	movs	r4, #48	; 0x30
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1b5      	bne.n	8009436 <_strtoul_l.constprop.0+0x3e>
 80094ca:	2308      	movs	r3, #8
 80094cc:	e7b3      	b.n	8009436 <_strtoul_l.constprop.0+0x3e>
 80094ce:	2c30      	cmp	r4, #48	; 0x30
 80094d0:	d0a9      	beq.n	8009426 <_strtoul_l.constprop.0+0x2e>
 80094d2:	230a      	movs	r3, #10
 80094d4:	e7af      	b.n	8009436 <_strtoul_l.constprop.0+0x3e>
 80094d6:	bf00      	nop
 80094d8:	080096bf 	.word	0x080096bf

080094dc <_strtoul_r>:
 80094dc:	f7ff bf8c 	b.w	80093f8 <_strtoul_l.constprop.0>

080094e0 <_malloc_usable_size_r>:
 80094e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e4:	1f18      	subs	r0, r3, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfbc      	itt	lt
 80094ea:	580b      	ldrlt	r3, [r1, r0]
 80094ec:	18c0      	addlt	r0, r0, r3
 80094ee:	4770      	bx	lr

080094f0 <_init>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr

080094fc <_fini>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr
